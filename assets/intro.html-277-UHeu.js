import{_ as e,e as i,f as t,o as n}from"./app-C_xW6TWK.js";const a={};function l(o,s){return n(),i("div",null,s[0]||(s[0]=[t(`<h1 id="不错的unsafe队列" tabindex="-1"><a class="header-anchor" href="#不错的unsafe队列"><span>不错的unsafe队列</span></a></h1><p>在之前章节中，基于内部可变性和引用计数的双向链表有些失控了，原因在于 <code>Rc</code> 和 <code>RefCell</code> 对于简单的任务而言，它们是非常称职的，但是对于复杂的任务，它们可能会变得相当笨拙，特别是当我们试图隐藏一些细节时。</p><p>总之，一定有更好的办法！下面来看看该如何使用裸指针和 unsafe 代码实现一个单向链表。</p><blockquote><p>大家可能想等着看我犯错误，unsafe 嘛，不犯错误不可能的，但是呢，俺偏就不犯错误：）</p></blockquote><p>国际惯例，添加第五个链表所需的文件 <code>fifth.rs</code>:</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// in lib.rs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pub</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> mod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> first;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pub</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> mod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> second;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pub</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> mod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> third;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pub</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> mod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fourth;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pub</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> mod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fifth;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然我们依然会从零开始撸代码，但是 <code>fifth.rs</code> 的代码会跟 <code>second.rs</code> 存在一定的重叠，因为对于链表而言，队列其实就是栈的增强。</p>`,7)]))}const c=e(a,[["render",l],["__file","intro.html.vue"]]),p=JSON.parse('{"path":"/src/too-many-lists/unsafe-queue/intro.html","title":"不错的unsafe队列","lang":"zh-CN","frontmatter":{"description":"不错的unsafe队列 在之前章节中，基于内部可变性和引用计数的双向链表有些失控了，原因在于 Rc 和 RefCell 对于简单的任务而言，它们是非常称职的，但是对于复杂的任务，它们可能会变得相当笨拙，特别是当我们试图隐藏一些细节时。 总之，一定有更好的办法！下面来看看该如何使用裸指针和 unsafe 代码实现一个单向链表。 大家可能想等着看我犯错误，...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/src/too-many-lists/unsafe-queue/intro.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"不错的unsafe队列"}],["meta",{"property":"og:description","content":"不错的unsafe队列 在之前章节中，基于内部可变性和引用计数的双向链表有些失控了，原因在于 Rc 和 RefCell 对于简单的任务而言，它们是非常称职的，但是对于复杂的任务，它们可能会变得相当笨拙，特别是当我们试图隐藏一些细节时。 总之，一定有更好的办法！下面来看看该如何使用裸指针和 unsafe 代码实现一个单向链表。 大家可能想等着看我犯错误，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-20T14:07:43.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-20T14:07:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"不错的unsafe队列\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-20T14:07:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{"createdTime":1745158063000,"updatedTime":1745158063000,"contributors":[{"name":"Linc","username":"Linc","email":"762699299@qq.com","commits":1,"url":"https://github.com/Linc"}]},"readingTime":{"minutes":0.81,"words":244},"filePathRelative":"src/too-many-lists/unsafe-queue/intro.md","localizedDate":"2025年4月20日","excerpt":"\\n<p>在之前章节中，基于内部可变性和引用计数的双向链表有些失控了，原因在于 <code>Rc</code> 和 <code>RefCell</code> 对于简单的任务而言，它们是非常称职的，但是对于复杂的任务，它们可能会变得相当笨拙，特别是当我们试图隐藏一些细节时。</p>\\n<p>总之，一定有更好的办法！下面来看看该如何使用裸指针和 unsafe 代码实现一个单向链表。</p>\\n<blockquote>\\n<p>大家可能想等着看我犯错误，unsafe 嘛，不犯错误不可能的，但是呢，俺偏就不犯错误：）</p>\\n</blockquote>\\n<p>国际惯例，添加第五个链表所需的文件 <code>fifth.rs</code>:</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"src/SUMMARY.html"}],"localMap":{"nodes":[{"id":"src/too-many-lists/unsafe-queue/intro.md","value":{"title":"intro","path":"src/too-many-lists/unsafe-queue/intro.md","outlink":[],"backlink":["src/SUMMARY.md"]}},{"id":"src/SUMMARY.md","value":{"title":"SUMMARY","path":"src/SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"src/SUMMARY.md","target":"src/too-many-lists/unsafe-queue/intro.md"}]}}}');export{c as comp,p as data};
