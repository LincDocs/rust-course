import{_ as i,e as a,k as t,o as e}from"./app-Dd7kPxnC.js";const n={};function l(h,s){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="rust-新版解读-1-79-内联-const-临时变量生命周期延长" tabindex="-1"><a class="header-anchor" href="#rust-新版解读-1-79-内联-const-临时变量生命周期延长"><span>Rust 新版解读 | 1.79 | 内联 const，临时变量生命周期延长</span></a></h1><blockquote><p>Rust 1.79 官方 release doc: <a href="https://blog.rust-lang.org/2024/06/13/Rust-1.79.0.html" target="_blank" rel="noopener noreferrer">Announcing Rust 1.79.0 | Rust Blog</a></p></blockquote><p>通过 <a href="https://www.rust-lang.org/tools/install" target="_blank" rel="noopener noreferrer">rustup</a> 安装的同学可以使用以下命令升级到 1.79 版本:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rustup</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stable</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="内联-const-表达式" tabindex="-1"><a class="header-anchor" href="#内联-const-表达式"><span>内联 <code>const</code> 表达式</span></a></h2><p>如今可以写内联 const 块 <code>const {...}</code> 作为表达式，显式地进入 const 上下文，而不需要额外的声明（例如，定义 <code>const</code> 常量或 Trait 的关联常量）。</p><p>与 const 常量 <code>const ITEM: ... = ...</code> 不同，内联 const 里类型可以被推断而不需要显式写出，并且还能使用泛型参数。来看一个很实用的例子：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> EMPTY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Option</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Vec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">u8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&gt; </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> None</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> foo</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">EMPTY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如今可以写成如下形式，（foo 的类型 <code>Option&lt;T&gt;</code> 可以不标注，可以根据上下文推断出来）</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> foo</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">None</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>泛型的例子：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> create_none_array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> N</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">usize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;() -&gt; [</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Option</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;; </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">N</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    [</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">None</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }; </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">N</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多细节见<a href="https://doc.rust-lang.org/nightly/reference/expressions/block-expr.html#const-blocks" target="_blank" rel="noopener noreferrer">参考文档</a></p><h2 id="关联类型约束" tabindex="-1"><a class="header-anchor" href="#关联类型约束"><span>关联类型约束</span></a></h2><p>Rust 1.79 稳定了一些关联类型约束的语法，允许我们在类型约束里写其它类型约束，即 <code>T: Trait&lt;Assoc: Bounds...&gt;</code>。这避免了提供额外的显式泛型类型来约束关联类型。</p><p>这个新特性允许我们在一些情况下更简单地指定好约束关系，解决了一些之前不可能或者会引入额外不必要约束的场景。</p><ul><li><strong><code>where</code> 子句</strong> - 在这个位置，这等同于将约束拆分为两个（或更多）<code>where</code> 语句。例如，<code>where T: Trait&lt;Assoc: Bound&gt;</code> 等同于 <code>where T: Trait, &lt;T as Trait&gt;::Assoc: Bound</code>。</li><li><strong>Supertraits</strong> - 类似于上面，<code>trait CopyIterator: Iterator&lt;Item: Copy&gt; {}</code>。这也等同于将约束拆分为两个（或更多）<code>where</code> 语句；不过当 trait 被使用时，这个对关联类型 Item 的约束是隐含的。</li><li><strong>关联类型 Item 约束</strong> - 允许约束与 trait 的关联类型相关的嵌套类型约束。例如 <code>trait Trait { type Assoc: Trait2&lt;Assoc2: Copy&gt;; }</code>。</li><li><strong>模糊类型约束</strong>（RPIT: return position <code>impl Trait</code>, TAIT: type alias <code>impl Trait</code>） - 允许约束与模糊类型相关的关联类型。例如 <code>impl Iterator&lt;Item: Copy&gt;</code> 定义了 Item 满足 Copy 的迭代器，而不必实际命名该约束。</li></ul><p>更多细节见 <a href="https://github.com/rust-lang/rust/pull/122055/#issue-2170532454" target="_blank" rel="noopener noreferrer">issue</a></p><p>译注：很绕，但是整体上就是一次让 Rust 编译器变得更符合你期望它应该正常工作的样子的更新。</p><h2 id="临时变量生命周期延长" tabindex="-1"><a class="header-anchor" href="#临时变量生命周期延长"><span>临时变量生命周期延长</span></a></h2><p>现在，在 <code>match</code> 和 <code>if</code> 结构中构造并立刻被使用的临时变量的生命周期会自动延长。这与代码结构中的临时变量生命周期延长的效果一致。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ..;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &amp;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">temp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// used to error, but now gets lifetime extended</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ..;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &amp;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">temp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// used to error, but now gets lifetime extended</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    _</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ..;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &amp;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">temp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// used to error, but now gets lifetime extended</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 之前已有的代码块临时变量生命周期延长</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ..;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &amp;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">temp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// lifetime is extended</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="others" tabindex="-1"><a class="header-anchor" href="#others"><span>Others</span></a></h2><p>其它更新细节，和稳定的 API 列表，参考<a href="https://blog.rust-lang.org/2024/06/13/Rust-1.79.0.html#stabilized-apis" target="_blank" rel="noopener noreferrer">原Blog</a></p>`,24)]))}const p=i(n,[["render",l],["__file","1.79.html.vue"]]),k=JSON.parse('{"path":"/appendix/rust-versions/1.79.html","title":"Rust 新版解读 | 1.79 | 内联 const，临时变量生命周期延长","lang":"zh-CN","frontmatter":{"description":"Rust 新版解读 | 1.79 | 内联 const，临时变量生命周期延长 Rust 1.79 官方 release doc: Announcing Rust 1.79.0 | Rust Blog 通过 rustup 安装的同学可以使用以下命令升级到 1.79 版本: 内联 const 表达式 如今可以写内联 const 块 const {...} ...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/appendix/rust-versions/1.79.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"Rust 新版解读 | 1.79 | 内联 const，临时变量生命周期延长"}],["meta",{"property":"og:description","content":"Rust 新版解读 | 1.79 | 内联 const，临时变量生命周期延长 Rust 1.79 官方 release doc: Announcing Rust 1.79.0 | Rust Blog 通过 rustup 安装的同学可以使用以下命令升级到 1.79 版本: 内联 const 表达式 如今可以写内联 const 块 const {...} ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust 新版解读 | 1.79 | 内联 const，临时变量生命周期延长\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{},"readingTime":{"minutes":2.55,"words":766},"filePathRelative":"appendix/rust-versions/1.79.md","excerpt":"\\n<blockquote>\\n<p>Rust 1.79 官方 release doc: <a href=\\"https://blog.rust-lang.org/2024/06/13/Rust-1.79.0.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Announcing Rust 1.79.0 | Rust Blog</a></p>\\n</blockquote>\\n<p>通过 <a href=\\"https://www.rust-lang.org/tools/install\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">rustup</a> 安装的同学可以使用以下命令升级到 1.79 版本:</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"appendix/rust-versions/1.79.md","value":{"title":"1.79","path":"appendix/rust-versions/1.79.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"appendix/rust-versions/1.79.md"}]}}}');export{p as comp,k as data};
