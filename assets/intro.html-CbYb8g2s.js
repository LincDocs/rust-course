import{_ as e,e as i,k as o,o as a}from"./app-Jcta1ofV.js";const l={};function r(n,t){return a(),i("div",null,t[0]||(t[0]=[o('<h1 id="包和模块" tabindex="-1"><a class="header-anchor" href="#包和模块"><span>包和模块</span></a></h1><p>当工程规模变大时，把代码写到一个甚至几个文件中，都是不太聪明的做法，可能存在以下问题：</p><ol><li>单个文件过大，导致打开、翻页速度大幅变慢</li><li>查询和定位效率大幅降低，类比下，你会把所有知识内容放在一个几十万字的文档中吗？</li><li>只有一个代码层次：函数，难以维护和协作，想象一下你的操作系统只有一个根目录，剩下的都是单层子目录会如何：<code>disaster</code></li><li>容易滋生 Bug</li></ol><p>同时，将大的代码文件拆分成包和模块，还允许我们实现代码抽象和复用：将你的代码封装好后提供给用户，那么用户只需要调用公共接口即可，无需知道内部该如何实现。</p><p>因此，跟其它语言一样，Rust 也提供了相应概念用于代码的组织管理：</p><ul><li>项目(Packages)：一个 <code>Cargo</code> 提供的 <code>feature</code>，可以用来构建、测试和分享包</li><li>包(Crate)：一个由多个模块组成的树形结构，可以作为三方库进行分发，也可以生成可执行文件进行运行</li><li>模块(Module)：可以一个文件多个模块，也可以一个文件一个模块，模块可以被认为是真实项目中的代码组织单元</li></ul><p>下面，让我们一一来学习这些概念以及如何在实践中运用。</p>',7)]))}const s=e(l,[["render",r],["__file","intro.html.vue"]]),p=JSON.parse('{"path":"/basic/crate-module/intro.html","title":"包和模块","lang":"zh-CN","frontmatter":{"description":"包和模块 当工程规模变大时，把代码写到一个甚至几个文件中，都是不太聪明的做法，可能存在以下问题： 单个文件过大，导致打开、翻页速度大幅变慢 查询和定位效率大幅降低，类比下，你会把所有知识内容放在一个几十万字的文档中吗？ 只有一个代码层次：函数，难以维护和协作，想象一下你的操作系统只有一个根目录，剩下的都是单层子目录会如何：disaster 容易滋生 B...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/basic/crate-module/intro.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"包和模块"}],["meta",{"property":"og:description","content":"包和模块 当工程规模变大时，把代码写到一个甚至几个文件中，都是不太聪明的做法，可能存在以下问题： 单个文件过大，导致打开、翻页速度大幅变慢 查询和定位效率大幅降低，类比下，你会把所有知识内容放在一个几十万字的文档中吗？ 只有一个代码层次：函数，难以维护和协作，想象一下你的操作系统只有一个根目录，剩下的都是单层子目录会如何：disaster 容易滋生 B..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"包和模块\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.27,"words":382},"filePathRelative":"basic/crate-module/intro.md","excerpt":"\\n<p>当工程规模变大时，把代码写到一个甚至几个文件中，都是不太聪明的做法，可能存在以下问题：</p>\\n<ol>\\n<li>单个文件过大，导致打开、翻页速度大幅变慢</li>\\n<li>查询和定位效率大幅降低，类比下，你会把所有知识内容放在一个几十万字的文档中吗？</li>\\n<li>只有一个代码层次：函数，难以维护和协作，想象一下你的操作系统只有一个根目录，剩下的都是单层子目录会如何：<code>disaster</code></li>\\n<li>容易滋生 Bug</li>\\n</ol>\\n<p>同时，将大的代码文件拆分成包和模块，还允许我们实现代码抽象和复用：将你的代码封装好后提供给用户，那么用户只需要调用公共接口即可，无需知道内部该如何实现。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"basic/crate-module/intro.md","value":{"title":"intro","path":"basic/crate-module/intro.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"basic/crate-module/intro.md"}]}}}');export{s as comp,p as data};
