import{_ as i,e as a,k as n,o as l}from"./app-Dd7kPxnC.js";const h={};function k(p,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="rust所有权转移时发生了奇怪的深拷贝" tabindex="-1"><a class="header-anchor" href="#rust所有权转移时发生了奇怪的深拷贝"><span>Rust所有权转移时发生了奇怪的深拷贝</span></a></h1><p>深拷贝可以说是Rust性能优化的禁忌之词，但是在最不该发生深拷贝的地方却发生了, 本文带领大家来深入分析下原因。</p><p>在所有权章节中，我们详细介绍过<a href="https://course.rs/basic/ownership/ownership.html#%E8%BD%AC%E7%A7%BB%E6%89%80%E6%9C%89%E6%9D%83" target="_blank" rel="noopener noreferrer">所有权转移(move)</a>, 里面提到过一个重点：当类型实现<code>Copy</code>特征时，不会转移所有权，而是直接对值进行拷贝：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> y</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 不会报错</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;我(x)的值仅仅是被复制了，我还拥有值的所有权，不信你看：{:?}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;aaa&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">to_string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 会报错</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;我(s)的值被转移给了s1，我已经失去所有权了: {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的<code>x</code>是数值类型，因此实现了<code>Copy</code>特征，当赋值给<code>y</code>时，仅仅是复制了值，并没有把所有权转移给<code>y</code>，但是<code>s</code>恰好相反，它没有实现<code>Copy</code>特征，当赋值后，所有权被转移给<code>s1</code>，最终导致了最后一行代码的报错.</p><p>根据之前的所有权学习章节，所有权转移时的仅仅是复制一个引用，并不会复制底层的数据，例如上面代码中，<code>s</code>的所有权转移给<code>s1</code>时，仅仅是复制了一个引用，该引用继续指向之前的字符串底层数据，因此<strong>所有权转移的性能是非常高的</strong>。</p><p>但是如果一切都这么完美，也不会出现这篇文章了，实际上是怎么样？先来看一段代码.</p><h2 id="move时发生了数据的深拷贝" tabindex="-1"><a class="header-anchor" href="#move时发生了数据的深拷贝"><span>move时发生了数据的深拷贝</span></a></h2><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LargeArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">i128</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">impl</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> LargeArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">    #[inline(always)]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> transfer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">mut</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{:?}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, &amp;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">mut</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.a[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">mut</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> i128</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 改变数组中的值</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.a[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 23</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.a[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 24</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 返回所有权</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> mut</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> f</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> LargeArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">i128</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{:?}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, &amp;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">mut</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.a[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">mut</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> i128</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> mut</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> f2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">transfer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{:?}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, &amp;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">mut</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> f2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.a[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">mut</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> i128</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子很简单，创建了一个结构体<code>f</code>(内部有一个大数组)，接着将它的所有权转移给<code>transfer</code>方法，最后再通过<code>Self</code>返回，转移给<code>f2</code>，在此过程中，观察结构体中的数组第二个元素的内存地址如何变化。</p><p>这里还有几个注意点：</p><ul><li><code>LargeArray</code>没有实现<code>Copy</code>特征，因此在所有权转移时， <strong>本应该</strong>只是复制一下引用，底层的数组并不会被复制</li><li><code>transfer</code>方法的参数<code>self</code>表示接收所有权，而不是借用，返回类型<code>Self</code>也表示返回所有权，而不是返回借用, 具体内容在<a href="https://course.rs/basic/method.html" target="_blank" rel="noopener noreferrer">方法</a>章节有介绍</li></ul><p>从上可知，我们并不应该去复制底层的数组，那么底层数组的地址也不应该变化，换而言之三次内存地址输出应该是同一个地址。但是真的如此吗？世事难料：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">0x16f9d6870</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">0x16fa4bbc0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">0x16fa24ac0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>果然，结果让人大跌眼镜，竟然三次地址都不一样，意味着每次转移所有权都发生了底层数组的深拷贝！什么情况？！！如果这样，我们以后还能信任Rust吗？完全不符合官方的宣传。</p><p>在福建有一个武夷山5A景区，不仅美食特别好吃，而且风景非常优美，其中最著名的就是历时1个多小时的九曲十八弯漂流，而我们的结论是否也能像漂游一样来个大转折？大家拭目以待。</p><h2 id="罪魁祸首println" tabindex="-1"><a class="header-anchor" href="#罪魁祸首println"><span>罪魁祸首println?</span></a></h2><p>首先，通过谷歌搜索，我发现了一些蛛丝马迹，有文章提到如果通过<code>println</code>输出内存地址，可能会导致编译器优化失效，也就是从本该有的所有权转移变成了深拷贝，不妨来试试。</p><p>但是问题又来了，如果不用<code>println</code>或者类似的方法，我们怎么观察内存地址？好像陷入了绝路。。。只能从Rust之外去想办法了，此时大学学过的汇编发挥了作用：</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">LCPI0_0:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .quad   </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">10</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .quad   </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">example:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">xxx:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     eax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">160000</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    __rust_probestack</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        sub</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     rsp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rax</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     rax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rsp</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        lea</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     rcx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rsp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">160000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        vbroadcasti128</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  ymm0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, xmmword ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rip</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + .LCPI0_0]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">LBB0_1:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        vmovdqu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ymmword ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ymm0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        vmovdqu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ymmword ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ymm0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        vmovdqu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ymmword ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ymm0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        vmovdqu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ymmword ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">96</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ymm0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        vmovdqu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ymmword ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">128</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ymm0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        vmovdqu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ymmword ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">160</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ymm0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        vmovdqu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ymmword ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">192</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ymm0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        vmovdqu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ymmword ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">224</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ymm0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        vmovdqu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ymmword ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">256</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ymm0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        vmovdqu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ymmword ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">288</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ymm0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        vmovdqu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ymmword ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">320</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ymm0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        vmovdqu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ymmword ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">352</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ymm0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        vmovdqu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ymmword ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">384</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ymm0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        vmovdqu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ymmword ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">416</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ymm0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        vmovdqu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ymmword ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">448</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ymm0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        vmovdqu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ymmword ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">480</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ymm0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        vmovdqu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ymmword ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">512</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ymm0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        vmovdqu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ymmword ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">544</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ymm0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        vmovdqu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ymmword ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">576</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ymm0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        vmovdqu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ymmword ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">608</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ymm0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        add</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     rax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">640</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        cmp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     rax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rcx</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        jne</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     .LBB0_1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     rax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">qword</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rsp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">16</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     rdx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">qword</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rsp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">24</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        add</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     rax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">69</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        adc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     rdx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        add</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     rsp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">160000</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        vzeroupper</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        ret</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>去掉所有<code>println</code>后的汇编生成如上所示(大家可以在godbolt上自己尝试)，以我蹩脚的汇编水平来看，貌似没有任何数组拷贝的发生，也就是说：<br> 如同量子的不可观测性，我们的<code>move</code>也这么傲娇？我们用println观测，它就傲娇去复制，不观测时，就老老实实转移所有权？WTF!</p><p>事情感觉进入了僵局，下一步该如何办？</p><h2 id="栈和堆的不同move行为" tabindex="-1"><a class="header-anchor" href="#栈和堆的不同move行为"><span>栈和堆的不同move行为</span></a></h2><p>我突然灵光一现，想到一个问题，之前的所有权转移其实可以分为两类：<strong>栈上数据的复制和堆上数据的转移</strong>，这也是非常符合直觉的，例如<code>i32</code>这种类型实现了<code>Copy</code>特征，可以存储在栈上，因此它就是复制行为，而<code>String</code>类型是引用存储在栈上，底层数据存储在堆上，因此转移所有权时只需要复制一下引用即可。</p><p>那问题来了，我们的<code>LargeArray</code>存在哪里？这也许就是一个破局点！</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LargeArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">i128</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结构体是一个复合类型，它内部字段的数据存在哪里，就大致决定了它存在哪里。而该结构体里面的<code>a</code>字段是一个数组，而不是动态数组<code>Vec</code>，从<a href="https://course.rs/basic/compound-type/array.html#%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84" target="_blank" rel="noopener noreferrer">数组</a>章节可知：数组是存储在栈上的数据结构！</p><p>再想想，栈上的数据在<code>move</code>的时候，是要从一个栈复制到另外一个栈的，那是不是内存地址就变了？！因此，就能完美解释，为什么使用<code>println</code>时，数组的地址会变化了，是因为栈上的数组发生了复制。</p><p>但是问题还有，为什么不使用<code>println</code>，数组地址就不变？要解释清楚这个问题，先从编译器优化讲起。</p><h2 id="编译器对move的优化" tabindex="-1"><a class="header-anchor" href="#编译器对move的优化"><span>编译器对move的优化</span></a></h2><p>从根本上来说，<code>move</code>就意味着拷贝复制，只不过看是浅拷贝还是深拷贝，对于堆上的数据来说，浅拷贝只复制引用，而栈上的数据则是整个复制。</p><p>但是在实际场景中，由于编译器的复杂实现，它能优化的场景远比我们想象中更多，例如对于<code>move</code>过程中的复制，编译器有可能帮你优化掉，在没有<code>println</code>的代码中，该<code>move</code>过程就被Rust编译器优化了。</p><p>但是这种编译器优化非常复杂，而且随着Rust的版本更新在不停变化，因此几乎没有人能说清楚这里面的门门道道，但是有一点可以知道：<strong><code>move</code>确实存在被优化的可能性，最终避免了复制的发生</strong>.</p><p>那么<code>println</code>没有被优化的原因也呼之欲出了: 它阻止了编译器对<code>move</code>的优化。</p><h2 id="println阻止了优化" tabindex="-1"><a class="header-anchor" href="#println阻止了优化"><span>println阻止了优化</span></a></h2><p>编译器优化的一个基本准则就是：中间过程没有其它代码在使用，则可以尝试消除这些中间过程。</p><p>回头来看看<code>println</code>:</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{:?}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, &amp;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">mut</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.a[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">mut</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> i128</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>它需要打印数组在各个点的内存地址，假如编译器优化了复制，那这些中间状态的内存地址是不是就丢失了？对于这种可能会导致状态丢失的情况，编译器是不可能进行优化的，因此<code>move</code>时的栈上数组复制就顺理成章的发生了, 还是2次。</p><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h2><p>那么，在实践中遇到这种情况怎么办？</p><h4 id="mut-self" tabindex="-1"><a class="header-anchor" href="#mut-self"><span>&amp;mut self</span></a></h4><p>其实办法也很多，首当其冲的就是使用<code>&amp;mut self</code>进行可变借用，而不是转移进来所有权，再转移出去。</p><h4 id="box分配到堆上" tabindex="-1"><a class="header-anchor" href="#box分配到堆上"><span>Box分配到堆上</span></a></h4><p>如果你确实需要依赖所有权的转移来实现某个功能(例如链式方法调用:<code>x.a().b()...</code>)，那么就需要使用<code>Box</code>把该数组分配在堆上，而不是栈上：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LargeArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Box</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;[</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">i128</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">10000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]&gt;,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">impl</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> LargeArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">    #[inline(always)]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> transfer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">mut</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{:?}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, &amp;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">mut</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.a[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">mut</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> i128</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //do some stuff to alter it</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.a[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 23</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.a[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 24</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //return the same object</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> mut</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> f</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> LargeArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Box</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">i128</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] )};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{:?}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, &amp;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">mut</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.a[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">mut</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> i128</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> mut</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> f2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">transfer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{:?}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, &amp;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">mut</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> f2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.a[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">mut</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> i128</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>0x138008010</span></span>
<span class="line"><span>0x138008010</span></span>
<span class="line"><span>0x138008010</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完美符合了我们对堆上数据的预期，hooray!</p><h4 id="神鬼莫测的编译器优化" tabindex="-1"><a class="header-anchor" href="#神鬼莫测的编译器优化"><span>神鬼莫测的编译器优化</span></a></h4><p>当然，你也可以选择相信编译器的优化，虽然很难识它真面目，同时它的行为也神鬼莫测，但是总归是在之前的例子中证明了，它确实可以，不是嘛？ = , =</p>`,51)]))}const e=i(h,[["render",k],["__file","deep-into-move.html.vue"]]),d=JSON.parse('{"path":"/profiling/performance/deep-into-move.html","title":"Rust所有权转移时发生了奇怪的深拷贝","lang":"zh-CN","frontmatter":{"description":"Rust所有权转移时发生了奇怪的深拷贝 深拷贝可以说是Rust性能优化的禁忌之词，但是在最不该发生深拷贝的地方却发生了, 本文带领大家来深入分析下原因。 在所有权章节中，我们详细介绍过所有权转移(move), 里面提到过一个重点：当类型实现Copy特征时，不会转移所有权，而是直接对值进行拷贝： 这里的x是数值类型，因此实现了Copy特征，当赋值给y时，...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/profiling/performance/deep-into-move.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"Rust所有权转移时发生了奇怪的深拷贝"}],["meta",{"property":"og:description","content":"Rust所有权转移时发生了奇怪的深拷贝 深拷贝可以说是Rust性能优化的禁忌之词，但是在最不该发生深拷贝的地方却发生了, 本文带领大家来深入分析下原因。 在所有权章节中，我们详细介绍过所有权转移(move), 里面提到过一个重点：当类型实现Copy特征时，不会转移所有权，而是直接对值进行拷贝： 这里的x是数值类型，因此实现了Copy特征，当赋值给y时，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust所有权转移时发生了奇怪的深拷贝\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{},"readingTime":{"minutes":7.91,"words":2372},"filePathRelative":"profiling/performance/deep-into-move.md","excerpt":"\\n<p>深拷贝可以说是Rust性能优化的禁忌之词，但是在最不该发生深拷贝的地方却发生了, 本文带领大家来深入分析下原因。</p>\\n<p>在所有权章节中，我们详细介绍过<a href=\\"https://course.rs/basic/ownership/ownership.html#%E8%BD%AC%E7%A7%BB%E6%89%80%E6%9C%89%E6%9D%83\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">所有权转移(move)</a>, 里面提到过一个重点：当类型实现<code>Copy</code>特征时，不会转移所有权，而是直接对值进行拷贝：</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"profiling/performance/deep-into-move.md","value":{"title":"deep-into-move","path":"profiling/performance/deep-into-move.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"profiling/performance/deep-into-move.md"}]}}}');export{e as comp,d as data};
