import{_ as t,e as s,f as a,o as r}from"./app-C_xW6TWK.js";const n={};function o(i,e){return r(),s("div",null,e[0]||(e[0]=[a('<h1 id="枚举-enums" tabindex="-1"><a class="header-anchor" href="#枚举-enums"><span>枚举（enums）</span></a></h1><p>Rust 有一种叫做“枚举”的类型，这种类型列举出了某种集合中所有可能的值。<br> 枚举是许多语言共有的一个功能，但它的作用在每种语言中都有所不同。<br> 如 F#、OCaml 和 Haskell 之类的函数式语言中的代数数据类型（algebraic data types）和 Rust 的枚举很相似。<br> Rust 的“模式匹配”功能与枚举结合起非常强大，利用它我们很容易就能针对枚举的不同类型运行不同的代码。</p><h2 id="更多信息" tabindex="-1"><a class="header-anchor" href="#更多信息"><span>更多信息</span></a></h2><ul><li><a href="https://doc.rust-lang.org/book/ch06-00-enums.html" target="_blank" rel="noopener noreferrer">Enums</a></li><li><a href="https://doc.rust-lang.org/book/ch18-03-pattern-syntax.html" target="_blank" rel="noopener noreferrer">Pattern syntax</a></li></ul>',4)]))}const c=t(n,[["render",o],["__file","index.html.vue"]]),u=JSON.parse('{"path":"/assets/rustlings-zh/exercises/enums/","title":"枚举（enums）","lang":"zh-CN","frontmatter":{"description":"枚举（enums） Rust 有一种叫做“枚举”的类型，这种类型列举出了某种集合中所有可能的值。 枚举是许多语言共有的一个功能，但它的作用在每种语言中都有所不同。 如 F#、OCaml 和 Haskell 之类的函数式语言中的代数数据类型（algebraic data types）和 Rust 的枚举很相似。 Rust 的“模式匹配”功能与枚举结合起非...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/assets/rustlings-zh/exercises/enums/"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"枚举（enums）"}],["meta",{"property":"og:description","content":"枚举（enums） Rust 有一种叫做“枚举”的类型，这种类型列举出了某种集合中所有可能的值。 枚举是许多语言共有的一个功能，但它的作用在每种语言中都有所不同。 如 F#、OCaml 和 Haskell 之类的函数式语言中的代数数据类型（algebraic data types）和 Rust 的枚举很相似。 Rust 的“模式匹配”功能与枚举结合起非..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-20T14:07:43.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-20T14:07:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"枚举（enums）\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-20T14:07:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{"createdTime":1745158063000,"updatedTime":1745158063000,"contributors":[{"name":"Linc","username":"Linc","email":"762699299@qq.com","commits":1,"url":"https://github.com/Linc"}]},"readingTime":{"minutes":0.52,"words":157},"filePathRelative":"assets/rustlings-zh/exercises/enums/README.md","localizedDate":"2025年4月20日","excerpt":"\\n<p>Rust 有一种叫做“枚举”的类型，这种类型列举出了某种集合中所有可能的值。<br>\\n枚举是许多语言共有的一个功能，但它的作用在每种语言中都有所不同。<br>\\n如 F#、OCaml 和 Haskell 之类的函数式语言中的代数数据类型（algebraic data types）和 Rust 的枚举很相似。<br>\\nRust 的“模式匹配”功能与枚举结合起非常强大，利用它我们很容易就能针对枚举的不同类型运行不同的代码。</p>\\n<h2>更多信息</h2>\\n<ul>\\n<li><a href=\\"https://doc.rust-lang.org/book/ch06-00-enums.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Enums</a></li>\\n<li><a href=\\"https://doc.rust-lang.org/book/ch18-03-pattern-syntax.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Pattern syntax</a></li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"assets/rustlings-zh/exercises/enums/README.md","value":{"title":"exercises/","path":"assets/rustlings-zh/exercises/enums/README.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{c as comp,u as data};
