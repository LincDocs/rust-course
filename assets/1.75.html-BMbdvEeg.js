import{_ as t,e as r,k as o,o as n}from"./app-DpsuSTEZ.js";const a={};function i(s,e){return n(),r("div",null,e[0]||(e[0]=[o('<h1 id="rust-新版解读-1-75-async-trait-和-rpitit" tabindex="-1">Rust 新版解读 | 1.75 | async trait 和 RPITIT</h1><blockquote><p>Rust 1.75 官方 release doc: <a href="https://blog.rust-lang.org/2023/12/28/Rust-1.75.0.html" target="_blank" rel="noopener noreferrer">Announcing Rust 1.75.0 | Rust Blog</a></p></blockquote><p>通过 <a href="https://www.rust-lang.org/tools/install" target="_blank" rel="noopener noreferrer">rustup</a> 安装的同学可以使用以下命令升级到 1.75 版本:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rustup</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stable</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="在-traits-里使用-async-fn-和-impl-trait-形式的返回值" tabindex="-1">在 traits 里使用 <code>async fn</code> 和 <code>impl Trait</code> 形式的返回值</h2><p>之前的<a href="https://blog.rust-lang.org/2023/12/21/async-fn-rpit-in-traits.html" target="_blank" rel="noopener noreferrer">文章</a>里也提到了，Rust 1.75 将支持在 traits 里使用 <code>async fn</code> 和 <code>impl Trait</code> 形式的返回值。不过如同前文所说这个版本还是有一些限制。</p><p>译者注：实践上来说，即使不考虑兼容低版本的rustc，目前也还是需要使用主流的 async-trait 三方库来写出简洁灵活的 async traits。不过相信官方团队最终肯定会都跟进吸纳这些实用的功能的。</p><h2 id="指针字节偏移api" tabindex="-1">指针字节偏移API</h2><p>裸指针（<code>*const T</code>和 <code>*mut T</code>）以前主要用作操作某个具体的类型为T的对象。例如，<code>&lt;* const T&gt;::add(1)</code> 会将大小是 <code>size_of::&lt;T&gt;()</code> 的字节数添加到指针指向的地址上。在某些情况下，使用字节偏移更方便，这些新API避免了调用者需要先将指针转换为 <code>*const u8</code> / <code>*mut u8</code> 的情况。</p><ul><li><a href="https://doc.rust-lang.org/stable/core/primitive.pointer.html#method.byte_add" target="_blank" rel="noopener noreferrer"><code>pointer::byte_add</code></a></li><li><a href="https://doc.rust-lang.org/stable/core/primitive.pointer.html#method.byte_offset" target="_blank" rel="noopener noreferrer"><code>pointer::byte_offset</code></a></li><li><a href="https://doc.rust-lang.org/stable/core/primitive.pointer.html#method.byte_offset_from" target="_blank" rel="noopener noreferrer"><code>pointer::byte_offset_from</code></a></li><li><a href="https://doc.rust-lang.org/stable/core/primitive.pointer.html#method.byte_sub" target="_blank" rel="noopener noreferrer"><code>pointer::byte_sub</code></a></li><li><a href="https://doc.rust-lang.org/stable/core/primitive.pointer.html#method.wrapping_byte_add" target="_blank" rel="noopener noreferrer"><code>pointer::wrapping_byte_add</code></a></li><li><a href="https://doc.rust-lang.org/stable/core/primitive.pointer.html#method.wrapping_byte_offset" target="_blank" rel="noopener noreferrer"><code>pointer::wrapping_byte_offset</code></a></li><li><a href="https://doc.rust-lang.org/stable/core/primitive.pointer.html#method.wrapping_byte_sub" target="_blank" rel="noopener noreferrer"><code>pointer::wrapping_byte_sub</code></a></li></ul><h2 id="rustc-的代码布局优化" tabindex="-1">rustc 的代码布局优化</h2><p>Rust编译器的的速度一直在优化，当前新版本应用了<a href="https://github.com/llvm/llvm-project/blob/main/bolt/README.md" target="_blank" rel="noopener noreferrer">LLVM - BOLT</a>到二进制发布包，使得我们的基准测试用时时间改善了2%。这个工具优化了librustc_driver.so库的布局，能更好地利用缓存。</p><p>我们现在也用 <code>-Ccodegen-units=1</code> 来构建rustc，这为LLVM提供了更多的优化机会。这个优化使得我们的基准测试平均用时又提高了1.5%。</p><p>这些优化暂时仅限于x86_64-unknown-linux-gnu编译器，但我们预计后续会扩展到更多平台。</p><h2 id="others" tabindex="-1">Others</h2><p>其它更新细节，和稳定的API列表，参考<a href="https://blog.rust-lang.org/2023/12/28/Rust-1.75.0.html#stabilized-apis" target="_blank" rel="noopener noreferrer">原Blog</a></p>',16)]))}const p=t(a,[["render",i],["__file","1.75.html.vue"]]),c=JSON.parse('{"path":"/appendix/rust-versions/1.75.html","title":"Rust 新版解读 | 1.75 | async trait 和 RPITIT","lang":"zh-CN","frontmatter":{"description":"Rust 新版解读 | 1.75 | async trait 和 RPITIT Rust 1.75 官方 release doc: Announcing Rust 1.75.0 | Rust Blog 通过 rustup 安装的同学可以使用以下命令升级到 1.75 版本: 在 traits 里使用 async fn 和 impl Trait 形式的返回...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/appendix/rust-versions/1.75.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"Rust 新版解读 | 1.75 | async trait 和 RPITIT"}],["meta",{"property":"og:description","content":"Rust 新版解读 | 1.75 | async trait 和 RPITIT Rust 1.75 官方 release doc: Announcing Rust 1.75.0 | Rust Blog 通过 rustup 安装的同学可以使用以下命令升级到 1.75 版本: 在 traits 里使用 async fn 和 impl Trait 形式的返回..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust 新版解读 | 1.75 | async trait 和 RPITIT\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"git":{},"readingTime":{"minutes":1.76,"words":528},"filePathRelative":"appendix/rust-versions/1.75.md","excerpt":"\\n<blockquote>\\n<p>Rust 1.75 官方 release doc: <a href=\\"https://blog.rust-lang.org/2023/12/28/Rust-1.75.0.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Announcing Rust 1.75.0 | Rust Blog</a></p>\\n</blockquote>\\n<p>通过 <a href=\\"https://www.rust-lang.org/tools/install\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">rustup</a> 安装的同学可以使用以下命令升级到 1.75 版本:</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"appendix/rust-versions/1.75.md","value":{"title":"1.75","path":"appendix/rust-versions/1.75.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"appendix/rust-versions/1.75.md"}]}}}');export{p as comp,c as data};
