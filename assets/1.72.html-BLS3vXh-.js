import{_ as n,e as s,k as t,o as a}from"./app-CzZ5JNlE.js";const r={};function i(l,e){return a(),s("div",null,e[0]||(e[0]=[t(`<h1 id="rust-新版解读-1-72-feature启用提示" tabindex="-1"><a class="header-anchor" href="#rust-新版解读-1-72-feature启用提示"><span>Rust 新版解读 | 1.72 | feature启用提示</span></a></h1><blockquote><p>Rust 1.72 官方 release doc: <a href="https://blog.rust-lang.org/2023/08/24/Rust-1.72.0.html" target="_blank" rel="noopener noreferrer">Announcing Rust 1.72.0 | Rust Blog</a></p></blockquote><p>通过 <a href="https://www.rust-lang.org/tools/install" target="_blank" rel="noopener noreferrer">rustup</a> 安装的同学可以使用以下命令升级到 1.72 版本:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rustup</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stable</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="警告可能有用的-cfg-禁用项" tabindex="-1"><a class="header-anchor" href="#警告可能有用的-cfg-禁用项"><span>警告可能有用的 <code>cfg</code> 禁用项</span></a></h2><p>一直以来都支持的通过 <code>cfg</code> 条件编译部分代码，例如在开启特定 feature 时的函数，或者针对特定平台的逻辑。之前编译器会直接无视掉这些代码，现在会记录这些符号名称和对应的 <code>cfg</code> 条件，因此可以警告你正在调用一个特定 feature 下的函数，需要启用 feature：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>   Compiling my-project v0.1.0 (/tmp/my-project)</span></span>
<span class="line"><span>error[E0432]: unresolved import \`rustix::io_uring\`</span></span>
<span class="line"><span>   --&gt; src/main.rs:1:5</span></span>
<span class="line"><span>    |</span></span>
<span class="line"><span>1   | use rustix::io_uring;</span></span>
<span class="line"><span>    |     ^^^^^^^^^^^^^^^^ no \`io_uring\` in the root</span></span>
<span class="line"><span>    |</span></span>
<span class="line"><span>note: found an item that was configured out</span></span>
<span class="line"><span>   --&gt; /home/username/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustix-0.38.8/src/lib.rs:213:9</span></span>
<span class="line"><span>    |</span></span>
<span class="line"><span>213 | pub mod io_uring;</span></span>
<span class="line"><span>    |         ^^^^^^^^</span></span>
<span class="line"><span>    = note: the item is gated behind the \`io_uring\` feature</span></span>
<span class="line"><span></span></span>
<span class="line"><span>For more information about this error, try \`rustc --explain E0432\`.</span></span>
<span class="line"><span>error: could not compile \`my-project\` (bin &quot;my-project&quot;) due to previous error</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="不受限制的常量计算时间" tabindex="-1"><a class="header-anchor" href="#不受限制的常量计算时间"><span>不受限制的常量计算时间</span></a></h2><p>之前为了避免用户自定义的常量在编译期间进行估算时，陷入死循环或占用无限制的时间，Rust 之前会限制用作常量计算的语句数目。然而一些特殊的有创造性的 Rust 代码还是会超过这个限制，进而产生编译错误；更糟糕的情况是，是否达到限制的是会随着用户调用库的不同而变化的。</p><p>现在，可以在编译时执行无限制的常量计算。而为了避免长时间编译没有反馈，编译器会在编译时代码运行一段时间后发出一条消息，并在每次翻倍的一段时间后重复该消息。默认情况下，编译器还将在捕获无限循环的大量步骤后报错提示 <code>const_eval_long_run</code> ，但可以用 <code>allow(const_eval_long_run)</code> 允许特别长的常量计算。</p><h2 id="clippy-lints-上升到-rustc" tabindex="-1"><a class="header-anchor" href="#clippy-lints-上升到-rustc"><span>Clippy lints 上升到 rustc</span></a></h2><p>几个原本由 Clippy 提供的 lints，提升到 rustc 里：</p><ul><li><a href="https://rust-lang.github.io/rust-clippy/rust-1.71.0/index.html#undropped_manually_drops" target="_blank" rel="noopener noreferrer"><code>clippy::undropped_manually_drops</code></a> =&gt; <a href="https://doc.rust-lang.org/1.72.0/rustc/lints/listing/deny-by-default.html#undropped-manually-drops" target="_blank" rel="noopener noreferrer"><code>undropped-manually-drops</code></a> (deny) <ul><li>无作用的 <code>ManullyDrop</code></li></ul></li><li><a href="https://rust-lang.github.io/rust-clippy/rust-1.71.0/index.html#invalid_utf8_in_unchecked" target="_blank" rel="noopener noreferrer"><code>clippy::invalid_utf8_in_unchecked</code></a> =&gt; <a href="https://doc.rust-lang.org/1.72.0/rustc/lints/listing/deny-by-default.html#invalid-from-utf8-unchecked" target="_blank" rel="noopener noreferrer"><code>invalid_from_utf8_unchecked</code></a> (deny) 或 <a href="https://doc.rust-lang.org/1.72.0/rustc/lints/listing/warn-by-default.html#invalid-from-utf8" target="_blank" rel="noopener noreferrer"><code>invalid_from_utf8</code></a> (warn) <ul><li>检查调用 <code>std::str::from_utf8_unchecked</code> 和 <code>std::str::from_utf8_unchecked_mut</code> 转换不合法的 UTF-8 字面量，这会违反了 safety 前提，导致未定义行为</li><li>检查 <code>std::str::from_utf8</code> 和 <code>std::str::from_utf8_mut</code> 转换不合法的 UTF-8 字面量，这会永远返回错误。</li></ul></li><li><a href="https://rust-lang.github.io/rust-clippy/rust-1.71.0/index.html#cmp_nan" target="_blank" rel="noopener noreferrer"><code>clippy::cmp_nan</code></a> =&gt; <a href="https://doc.rust-lang.org/1.72.0/rustc/lints/listing/warn-by-default.html#invalid-nan-comparisons" target="_blank" rel="noopener noreferrer"><code>invalid_nan_comparisons</code></a> (warn) <ul><li>检查使用 <code>f32::NAN</code> 或者 <code>f64::NAN</code> 参与比较，<code>NAN</code> 在比较时无任何意义，即使与自己比较也是无意义行为，建议使用 <code>is_nan()</code> 方法</li></ul></li><li><a href="https://rust-lang.github.io/rust-clippy/rust-1.71.0/index.html#cast_ref_to_mut" target="_blank" rel="noopener noreferrer"><code>clippy::cast_ref_to_mut</code></a> =&gt; <a href="https://doc.rust-lang.org/1.72.0/rustc/lints/listing/allowed-by-default.html#invalid-reference-casting" target="_blank" rel="noopener noreferrer"><code>invalid_reference_casting</code></a> (allow) <ul><li>检查不使用内部可变性的从 <code>&amp;T</code> 到 <code>&amp;mut T</code> 的转换，这会导致未定义行为。当前这个lint本身还有些问题，所以是 <code>allow</code> 级别，预计会在 1.73 版本修正后变为默认 <code>deny</code></li></ul></li></ul><h2 id="未来对-windows-的支持" tabindex="-1"><a class="header-anchor" href="#未来对-windows-的支持"><span>未来对 Windows 的支持</span></a></h2><p>未来的 release 版本里会放弃对 win10 以前的系统的官方支持，Rust 1.75 将成为最后一个支持 windows 7,8,8.1的版本，2024 年 2 月起的 rust 1.76 将仅支持 win10 及后续版本 （ target : tier-1 ）。详情见提案 <a href="https://github.com/rust-lang/compiler-team/issues/651" target="_blank" rel="noopener noreferrer">MCP 651</a></p><h2 id="others" tabindex="-1"><a class="header-anchor" href="#others"><span>Others</span></a></h2><p>其它更新细节，和稳定的API列表，参考<a href="https://blog.rust-lang.org/2023/08/24/Rust-1.72.0.html#stabilized-apis" target="_blank" rel="noopener noreferrer">原Blog</a></p>`,17)]))}const p=n(r,[["render",i],["__file","1.72.html.vue"]]),d=JSON.parse('{"path":"/appendix/rust-versions/1.72.html","title":"Rust 新版解读 | 1.72 | feature启用提示","lang":"zh-CN","frontmatter":{"description":"Rust 新版解读 | 1.72 | feature启用提示 Rust 1.72 官方 release doc: Announcing Rust 1.72.0 | Rust Blog 通过 rustup 安装的同学可以使用以下命令升级到 1.72 版本: 警告可能有用的 cfg 禁用项 一直以来都支持的通过 cfg 条件编译部分代码，例如在开启特定 f...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/appendix/rust-versions/1.72.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"Rust 新版解读 | 1.72 | feature启用提示"}],["meta",{"property":"og:description","content":"Rust 新版解读 | 1.72 | feature启用提示 Rust 1.72 官方 release doc: Announcing Rust 1.72.0 | Rust Blog 通过 rustup 安装的同学可以使用以下命令升级到 1.72 版本: 警告可能有用的 cfg 禁用项 一直以来都支持的通过 cfg 条件编译部分代码，例如在开启特定 f..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust 新版解读 | 1.72 | feature启用提示\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{},"readingTime":{"minutes":2.9,"words":871},"filePathRelative":"appendix/rust-versions/1.72.md","excerpt":"\\n<blockquote>\\n<p>Rust 1.72 官方 release doc: <a href=\\"https://blog.rust-lang.org/2023/08/24/Rust-1.72.0.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Announcing Rust 1.72.0 | Rust Blog</a></p>\\n</blockquote>\\n<p>通过 <a href=\\"https://www.rust-lang.org/tools/install\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">rustup</a> 安装的同学可以使用以下命令升级到 1.72 版本:</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"appendix/rust-versions/1.72.md","value":{"title":"1.72","path":"appendix/rust-versions/1.72.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"appendix/rust-versions/1.72.md"}]}}}');export{p as comp,d as data};
