import{_ as i,e as a,k as e,o as n}from"./app-Ca5AIWu9.js";const t={};function l(h,s){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="rust-新版解读-1-70-oncecell-isterminal" tabindex="-1"><a class="header-anchor" href="#rust-新版解读-1-70-oncecell-isterminal"><span>Rust 新版解读 | 1.70 | <code>OnceCell</code> &amp;&amp; <code>IsTerminal</code></span></a></h1><blockquote><p>Rust 1.70 官方 release doc: <a href="https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html" target="_blank" rel="noopener noreferrer">Announcing Rust 1.70.0 | Rust Blog</a></p></blockquote><p>通过 <a href="https://www.rust-lang.org/tools/install" target="_blank" rel="noopener noreferrer">rustup</a> 安装的同学可以使用以下命令升级到 1.70 版本:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rustup</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stable</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="crates-io-默认使用稀疏注册协议-sparse-protocol" tabindex="-1"><a class="header-anchor" href="#crates-io-默认使用稀疏注册协议-sparse-protocol"><span>crates.io 默认使用稀疏注册协议 （sparse protocol）</span></a></h2><p>在 Rust 1.68.0 版本里稳定但需要手动配置来启用的特性，在这个版本中作为默认值了。如今在拉取 crates.io 索引信息时，应该能够观察到大幅性能提升。</p><p>注意当用户处在有防火墙限制的网络环境下时，需要确保能够访问 <code>https://index.crates.io</code> 来使用该协议。如果因为某些原因需要继续使用原先由 Github 托管的 git 索引，可以配置 <code>registries.crates-io.protocol</code> 来实现。</p><p>需要注意，两种访问方式依赖的本地缓存路径是不同的，所以更换访问方式会导致依赖被重新下载。当完全切换到稀疏注册协议后，或许你想要清理存储在 <code>$CARGO_HOME/registry/*/github.com-*</code> 的旧依赖项</p><h2 id="oncecell-和-oncelock" tabindex="-1"><a class="header-anchor" href="#oncecell-和-oncelock"><span><code>OnceCell</code> 和 <code>OnceLock</code></span></a></h2><p>稳定了 <code>OnceCell</code> 和多线程安全版本 <code>OnceLock</code> 两种共享数据类型，它们都能让数据不需要立刻初始化的同时保证仅初始化一次。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">use</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">sync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">OnceLock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">static</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> WINNER</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">OnceLock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&amp;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> OnceLock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> winner</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">spawn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">||</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> WINNER</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;thread&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yield_now</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// give them a chance...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        WINNER</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get_or_init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">||</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;main&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{winner} wins!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在之前需要使用 <code>lazy_static</code> 或者 <code>once_cell</code> 来实现这种效果，如今标准库里从 <code>once_cell</code> 的 <code>unsync</code> 和 <code>sync</code> 模块吸收了这些基础组件。未来可能还会有更多方法被稳定下来，比如存储初始化函数的 <code>LazyCell</code> 和 <code>LazyLock</code> 类型。不过当前这第一步应该能够覆盖许多使用场景了。</p><h2 id="isterminal" tabindex="-1"><a class="header-anchor" href="#isterminal"><span><code>IsTerminal</code></span></a></h2><p>新稳定的 Trait，包含 <code>is_terminal</code> 一个方法，判断给定的文件描述符或者句柄是否代表一个终端/TTY。标准化了之前第三方crates如 <code>atty</code> <code>is-terminal</code> 实现的功能。一个常见的使用场景是，判断程序是通过脚本执行的还是交互模式执行的，以此在交互模式下实现一些诸如彩色输出、完整TUI的功能。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">use</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">io</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::{stdout, </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">IsTerminal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> use_color</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> stdout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">is_terminal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // if so, add color codes to program output...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="调试信息级别的文本化" tabindex="-1"><a class="header-anchor" href="#调试信息级别的文本化"><span>调试信息级别的文本化</span></a></h2><p>之前 <code>-Cdebuginfo</code> 编译选项仅支持数字 0,1,2 来表示逐渐增多的 debug 调试信息。（Cargo 默认在dev和test配置里是 2，在release和bench配置里是 0）</p><p>如今这些级别可以被文本代表：&quot;none&quot; (0), &quot;limited&quot; (1), and &quot;full&quot; (2), 还有两个新级别：&quot;line-directives-only&quot; and &quot;line-tables-only&quot;</p><p>之前 Cargo 和 rustc 的文档都把级别 1 叫做 &quot;line-tables-only&quot;，但是级别 1 实际上比这种场景包含的调试信息更多。新的 &quot;line-tables-only&quot; 仅保留的文件名和行号信息的最少调试信息量，或许会在未来成为 <code>-Cdebuginfo=1</code> 。另外一个 &quot;line-directives-only&quot; 是为 NVPTX 场景准备的，不推荐使用。</p><p>注意这些文本化的选项还无法在 <code>Cargo.toml</code> 里使用，预计会在下一个 1.71版本里实现。</p><h2 id="others" tabindex="-1"><a class="header-anchor" href="#others"><span>Others</span></a></h2><p>其它更新细节，和稳定的API列表，参考<a href="https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html#stabilized-apis" target="_blank" rel="noopener noreferrer">原Blog</a></p><p>注：可以看到常用的 <code>Option</code> <code>Result</code> 新增了一些方法：</p><ul><li><code>Option::is_some_and</code><ul><li><code>pub fn is_some_and(self, f: impl FnOnce(T) -&gt; bool) -&gt; bool</code></li></ul></li><li><code>Result::is_ok_and</code><ul><li><code>pub fn is_ok_and(self, f: impl FnOnce(T) -&gt; bool) -&gt; bool</code></li></ul></li><li><code>Result::is_err_and</code><ul><li><code>pub fn is_err_and(self, f: impl FnOnce(E) -&gt; bool) -&gt; bool</code></li></ul></li></ul><p>平时使用时可以试试。</p>`,25)]))}const r=i(t,[["render",l],["__file","1.70.html.vue"]]),k=JSON.parse('{"path":"/appendix/rust-versions/1.70.html","title":"Rust 新版解读 | 1.70 | OnceCell && IsTerminal","lang":"zh-CN","frontmatter":{"description":"Rust 新版解读 | 1.70 | OnceCell && IsTerminal Rust 1.70 官方 release doc: Announcing Rust 1.70.0 | Rust Blog 通过 rustup 安装的同学可以使用以下命令升级到 1.70 版本: crates.io 默认使用稀疏注册协议 （sparse protocol）...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/appendix/rust-versions/1.70.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"Rust 新版解读 | 1.70 | OnceCell && IsTerminal"}],["meta",{"property":"og:description","content":"Rust 新版解读 | 1.70 | OnceCell && IsTerminal Rust 1.70 官方 release doc: Announcing Rust 1.70.0 | Rust Blog 通过 rustup 安装的同学可以使用以下命令升级到 1.70 版本: crates.io 默认使用稀疏注册协议 （sparse protocol）..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust 新版解读 | 1.70 | OnceCell && IsTerminal\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{},"readingTime":{"minutes":2.92,"words":876},"filePathRelative":"appendix/rust-versions/1.70.md","excerpt":"\\n<blockquote>\\n<p>Rust 1.70 官方 release doc: <a href=\\"https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Announcing Rust 1.70.0 | Rust Blog</a></p>\\n</blockquote>\\n<p>通过 <a href=\\"https://www.rust-lang.org/tools/install\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">rustup</a> 安装的同学可以使用以下命令升级到 1.70 版本:</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"appendix/rust-versions/1.70.md","value":{"title":"1.70","path":"appendix/rust-versions/1.70.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"appendix/rust-versions/1.70.md"}]}}}');export{r as comp,k as data};
