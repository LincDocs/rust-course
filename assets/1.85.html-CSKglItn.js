import{_ as i,e as a,k as e,o as n}from"./app-CbLkK8_H.js";const t={};function l(r,s){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="rust-新版解读-1-85-rust-2024-稳定版、async-闭包" tabindex="-1"><a class="header-anchor" href="#rust-新版解读-1-85-rust-2024-稳定版、async-闭包"><span>Rust 新版解读 | 1.85 | Rust 2024 稳定版、<code>async</code> 闭包</span></a></h1><blockquote><p>Rust 1.85 官方 release doc: <a href="https://blog.rust-lang.org/2025/02/20/Rust-1.85.0.html" target="_blank" rel="noopener noreferrer">Announcing Rust 1.85.0 | Rust Blog</a></p></blockquote><p>通过 <a href="https://www.rust-lang.org/tools/install" target="_blank" rel="noopener noreferrer">rustup</a> 安装的同学可以使用以下命令升级到 1.85 版本:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rustup</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stable</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="rust-2024" tabindex="-1"><a class="header-anchor" href="#rust-2024"><span>Rust 2024</span></a></h2><p>我们很高兴地宣布，Rust 2024 版现已稳定！<br> 大的新版本也是一种用于选择可能带来向后兼容性风险的更改的机制。有关如何实现此目标的详细信息以及迁移的详细说明，请参阅<a href="https://doc.rust-lang.org/edition-guide/editions/index.html" target="_blank" rel="noopener noreferrer">版本指南</a>。</p><p><a href="https://doc.rust-lang.org/edition-guide/rust-2024/index.html" target="_blank" rel="noopener noreferrer">版本指南</a>里包含了每个更改的详细信息，这里有一份简要总结：</p><ul><li>语言 <ul><li><a href="https://doc.rust-lang.org/edition-guide/rust-2024/rpit-lifetime-capture.html" target="_blank" rel="noopener noreferrer">RPIT 生命周期捕获规则</a> — 当 <code>use&lt;..&gt;</code> 不存在时，更改 <code>impl Trait</code> 类型对参数的默认捕获。</li><li><a href="https://doc.rust-lang.org/edition-guide/rust-2024/temporary-if-let-scope.html" target="_blank" rel="noopener noreferrer"><code>if let</code> 临时作用域</a> — 更改 <code>if let</code> 表达式的临时作用域。</li><li><a href="https://doc.rust-lang.org/edition-guide/rust-2024/temporary-tail-expr-scope.html" target="_blank" rel="noopener noreferrer">尾表达式临时作用域</a> — 更改块中尾表达式的临时作用域。</li><li><a href="https://doc.rust-lang.org/edition-guide/rust-2024/match-ergonomics.html" target="_blank" rel="noopener noreferrer">预留模式匹配的人性化改进</a> — 禁止某些模式组合以避免混淆并为未来的改进留出空间。</li><li><a href="https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-extern.html" target="_blank" rel="noopener noreferrer">不安全的 <code>extern</code> 块</a> — <code>extern</code> 块现在需要 <code>unsafe</code> 关键字。</li><li><a href="https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-attributes.html" target="_blank" rel="noopener noreferrer">不安全属性</a> — <code>export_name</code>、<code>link_section</code> 和 <code>no_mangle</code> 属性现在必须标记为 <code>unsafe</code>。</li><li><a href="https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html" target="_blank" rel="noopener noreferrer"><code>unsafe_op_in_unsafe_fn</code> 警告</a> — <a href="https://doc.rust-lang.org/rustc/lints/listing/allowed-by-default.html#unsafe-op-in-unsafe-fn" target="_blank" rel="noopener noreferrer"><code>unsafe_op_in_unsafe_fn</code></a> lint 现在默认警告，要求在 <code>unsafe</code> 函数中显式使用 <code>unsafe {}</code> 块。</li><li><a href="https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html" target="_blank" rel="noopener noreferrer">禁止引用 <code>static mut</code></a> — 对 <code>static mut</code> 项的引用现在会生成默认拒绝的错误。</li><li><a href="https://doc.rust-lang.org/edition-guide/rust-2024/never-type-fallback.html" target="_blank" rel="noopener noreferrer">Never 类型 fallback 更改</a> — 更改了 never 类型 <code>!</code> 的强制转换方式，并将 <a href="https://doc.rust-lang.org/rustc/lints/listing/warn-by-default.html#never-type-fallback-flowing-into-unsafe" target="_blank" rel="noopener noreferrer"><code>never_type_fallback_flowing_into_unsafe</code></a> lint 级别更改为“拒绝”。</li><li><a href="https://doc.rust-lang.org/edition-guide/rust-2024/macro-fragment-specifiers.html" target="_blank" rel="noopener noreferrer">宏片段说明符</a> — <code>macro_rules!</code> 宏中的 <code>expr</code> 宏片段说明符现在也匹配 <code>const</code> 和 <code>_</code> 表达式。</li><li><a href="https://doc.rust-lang.org/edition-guide/rust-2024/missing-macro-fragment-specifiers.html" target="_blank" rel="noopener noreferrer">缺失的宏片段说明符</a> — <a href="https://doc.rust-lang.org/rustc/lints/listing/deny-by-default.html#missing-fragment-specifier" target="_blank" rel="noopener noreferrer"><code>missing_fragment_specifier</code></a> lint 现在是一个错误，拒绝没有片段说明符类型的宏元变量。</li><li><a href="https://doc.rust-lang.org/edition-guide/rust-2024/gen-keyword.html" target="_blank" rel="noopener noreferrer"><code>gen</code> 关键字</a> — 保留 <code>gen</code> 关键字，以便将来添加生成器块。</li><li><a href="https://doc.rust-lang.org/edition-guide/rust-2024/reserved-syntax.html" target="_blank" rel="noopener noreferrer">保留语法</a> — 保留 <code>#&quot;foo&quot;#</code> 风格的字符串和 <code>##</code> 标记，以便将来更改如何解析受保护的字符串字面量。</li></ul></li><li>标准库 <ul><li><a href="https://doc.rust-lang.org/edition-guide/rust-2024/prelude.html" target="_blank" rel="noopener noreferrer">prelude 的更改</a> — 将 <code>Future</code> 和 <code>IntoFuture</code> 添加到 prelude 中。</li><li><a href="https://doc.rust-lang.org/edition-guide/rust-2024/intoiterator-box-slice.html" target="_blank" rel="noopener noreferrer">为 <code>Box&lt;[T]&gt;</code> 添加 <code>IntoIterator</code></a> — 更改了迭代器与 <code>Box&lt;[T]&gt;</code> 的工作方式。</li><li><a href="https://doc.rust-lang.org/edition-guide/rust-2024/newly-unsafe-functions.html" target="_blank" rel="noopener noreferrer">新不安全的函数</a> — <code>std::env::set_var</code>、<code>std::env::remove_var</code> 和 <code>std::os::unix::process::CommandExt::before_exec</code> 现在是不安全的函数。</li></ul></li><li>Cargo <ul><li><a href="https://doc.rust-lang.org/edition-guide/rust-2024/cargo-resolver.html" target="_blank" rel="noopener noreferrer">Cargo: Rust 版本感知解析器</a> — 更改默认依赖解析器行为以考虑 <code>rust-version</code> 字段。</li><li><a href="https://doc.rust-lang.org/edition-guide/rust-2024/cargo-table-key-names.html" target="_blank" rel="noopener noreferrer">Cargo: 表和键名一致性</a> — 删除了一些过时的 <code>Cargo.toml</code> 键。</li><li><a href="https://doc.rust-lang.org/edition-guide/rust-2024/cargo-inherited-default-features.html" target="_blank" rel="noopener noreferrer">Cargo: 报错错误使用默认特性开关的继承情况</a> — 更改了 <code>default-features = false</code> 与继承的工作区依赖项的工作方式。</li></ul></li><li>Rustdoc <ul><li><a href="https://doc.rust-lang.org/edition-guide/rust-2024/rustdoc-doctests.html" target="_blank" rel="noopener noreferrer">Rustdoc 组合测试</a> — 文档测试现在组合成一个可执行文件，显著提高了性能。</li><li><a href="https://doc.rust-lang.org/edition-guide/rust-2024/rustdoc-nested-includes.html" target="_blank" rel="noopener noreferrer">Rustdoc 嵌套 <code>include!</code> 更改</a> — 更改了嵌套 <code>include!</code> 文件的相对路径行为。</li></ul></li><li>Rustfmt <ul><li><a href="https://doc.rust-lang.org/edition-guide/rust-2024/rustfmt-style-edition.html" target="_blank" rel="noopener noreferrer">Rustfmt: 样式版本</a> — 引入了“样式版本”的概念，允许你分开控制格式化版本与 Rust 版本。</li><li><a href="https://doc.rust-lang.org/edition-guide/rust-2024/rustfmt-formatting-fixes.html" target="_blank" rel="noopener noreferrer">Rustfmt: 格式化修复</a> — 大量修复了各种情况的格式化问题。</li><li><a href="https://doc.rust-lang.org/edition-guide/rust-2024/rustfmt-raw-identifier-sorting.html" target="_blank" rel="noopener noreferrer">Rustfmt: 原始标识符排序</a> — 更改了诸如 <code>r#async</code> 带有 <code>r#</code> 标识符的排序方式。</li><li><a href="https://doc.rust-lang.org/edition-guide/rust-2024/rustfmt-version-sorting.html" target="_blank" rel="noopener noreferrer">Rustfmt: 带数字的排序</a> — 更改了包含整数的标识符的排序方式。</li></ul></li></ul><h3 id="迁移到-2024" tabindex="-1"><a class="header-anchor" href="#迁移到-2024"><span>迁移到 2024</span></a></h3><p>指南包含了所有新功能的迁移说明，以及<a href="https://doc.rust-lang.org/edition-guide/editions/transitioning-an-existing-project-to-a-new-edition.html" target="_blank" rel="noopener noreferrer">将现有项目迁移到新版本</a>的一般说明。<br> 在许多情况下，<code>cargo fix</code> 可以自动完成必要的更改。你甚至可能会发现，2024 版不需要对你的代码进行任何更改！</p><p>请注意，通过 <code>cargo fix</code> 进行的自动修复非常保守，以避免更改代码的语义。在许多情况下，你可能希望保持代码不变并使用 Rust 2024 的新语义；例如，继续使用 <code>expr</code> 宏匹配器，并忽略条件表达式的转换，因为你希望使用新的 2024 版 drop 顺序语义。<code>cargo fix</code> 的结果不应被视为建议，而只是保持行为的保守转换。</p><h2 id="async-闭包" tabindex="-1"><a class="header-anchor" href="#async-闭包"><span><code>async</code> 闭包</span></a></h2><p>Rust 现在支持异步闭包，如 <code>async || {}</code>，它在调用时返回 future。这类似于 <code>async fn</code>，它也可以从本地环境中捕获值，就像普通闭包和函数之间的区别一样。标准库 prelude 中还提供了 3 个类似的 trait：<code>AsyncFn</code>、<code>AsyncFnMut</code> 和 <code>AsyncFnOnce</code>。</p><p>在某些情况下，你可以通过普通闭包和异步块来近似实现这一点，例如 <code>|| async {}</code>。然而，这种内部块返回的 future 无法从闭包捕获中借用，但 <code>async</code> 闭包可以做到这一点：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> mut</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> vec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Vec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> vec!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> closure</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> async</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    vec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">push</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ready</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)).</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">await</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，使用 <code>Fn</code> trait 返回 <code>Future</code> 时，无法正确表达函数签名，但你可以使用 <code>AsyncFn</code> trait 来编写：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">use</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> core</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">future</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Future</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Fut</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">impl</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&#39;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Fn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&amp;&#39;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> u8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Fut</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">    Fut</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Future</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Output</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ()&gt;,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{ </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">todo!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> f2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">impl</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&#39;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AsyncFn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&amp;&#39;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> u8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{ </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">todo!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    async</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> g</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: &amp;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">u8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">todo!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">g</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">await</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //~^ ERROR 类型不匹配</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //~| ERROR 一个类型比另一个更通用</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    f2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">g</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">await</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 没问题！</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，<code>async</code> 闭包为这两个问题提供了一流的解决方案！有关更多详细信息，请参阅 <a href="https://rust-lang.github.io/rfcs/3668-async-closures.html" target="_blank" rel="noopener noreferrer">RFC 3668</a> 和<a href="https://github.com/rust-lang/rust/pull/132706" target="_blank" rel="noopener noreferrer">稳定报告</a>。</p><h2 id="从诊断中隐藏-trait-实现" tabindex="-1"><a class="header-anchor" href="#从诊断中隐藏-trait-实现"><span>从诊断中隐藏 trait 实现</span></a></h2><p>新的 <code>#[diagnostic::do_not_recommend]</code> 属性是给编译器的一个提示，不要将注释的 trait 实现显示为诊断消息的一部分。对于库作者来说，这是一种防止编译器提出可能无益或误导的建议的方式。例如：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pub</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> trait</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pub</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> trait</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Bar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">impl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Bar</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> for</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> _object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: &amp;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">dyn</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> Bar</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">MyType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>error[E0277]: 未满足 trait 绑定 \`MyType: Bar\`</span></span>
<span class="line"><span> --&gt; src/main.rs:9:29</span></span>
<span class="line"><span>  |</span></span>
<span class="line"><span>9 |     let _object: &amp;dyn Bar = &amp;MyType;</span></span>
<span class="line"><span>  |                             ^^^^ trait \`Foo\` 未为 \`MyType\` 实现</span></span>
<span class="line"><span>  |</span></span>
<span class="line"><span>note: 需要 \`MyType\` 实现 \`Bar\`</span></span>
<span class="line"><span> --&gt; src/main.rs:4:14</span></span>
<span class="line"><span>  |</span></span>
<span class="line"><span>4 | impl&lt;T: Foo&gt; Bar for T {}</span></span>
<span class="line"><span>  |         ---  ^^^     ^</span></span>
<span class="line"><span>  |         |</span></span>
<span class="line"><span>  |         在此处引入的未满足的 trait 绑定</span></span>
<span class="line"><span>  = note: 需要将 \`&amp;MyType\` 转换为 \`&amp;dyn Bar\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于某些 API，实现 <code>Foo</code> 并通过该泛型实现间接获得 <code>Bar</code> 可能是有意义的。对于其他 API，可能期望大多数用户直接实现 <code>Bar</code>，因此 <code>Foo</code> 建议是一个误导。在这种情况下，添加诊断提示将更改错误消息如下：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">#[diagnostic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">do_not_recommend]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">impl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Bar</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> for</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>error[E0277]: 未满足 trait 绑定 \`MyType: Bar\`</span></span>
<span class="line"><span>  --&gt; src/main.rs:10:29</span></span>
<span class="line"><span>   |</span></span>
<span class="line"><span>10 |     let _object: &amp;dyn Bar = &amp;MyType;</span></span>
<span class="line"><span>   |                             ^^^^ trait \`Bar\` 未为 \`MyType\` 实现</span></span>
<span class="line"><span>   |</span></span>
<span class="line"><span>   = note: 需要将 \`&amp;MyType\` 转换为 \`&amp;dyn Bar\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有关原始动机，请参阅 <a href="https://rust-lang.github.io/rfcs/2397-do-not-recommend.html" target="_blank" rel="noopener noreferrer">RFC 2397</a>，以及当前的<a href="https://doc.rust-lang.org/reference/attributes/diagnostics.html#the-diagnosticdo_not_recommend-attribute" target="_blank" rel="noopener noreferrer">参考</a>以获取更多详细信息。</p><h2 id="元组的-fromiterator-和-extend" tabindex="-1"><a class="header-anchor" href="#元组的-fromiterator-和-extend"><span>元组的 <code>FromIterator</code> 和 <code>Extend</code></span></a></h2><p>早期版本的 Rust 为 <code>(T, U)</code> 元组对的迭代器实现了便利的 trait，使其行为类似于 <code>Iterator::unzip</code>，其中 <code>Extend</code> 在 1.56 版中实现，<code>FromIterator</code> 在 1.79 版中实现。这些现在已<em>扩展</em>到更多的元组长度，从单例 <code>(T,)</code> 到 12 个元素长的 <code>(T1, T2, .., T11, T12)</code>。例如，你现在可以使用 <code>collect()</code> 一次性分发到多个集合中：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">use</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">collections</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::{</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">LinkedList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">VecDeque</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">squares</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cubes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tesseracts</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">): (</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Vec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;, </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">VecDeque</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;, </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">LinkedList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">i32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">..</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">collect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{squares:?}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{cubes:?}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{tesseracts:?}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span>
<span class="line"><span>[0, 1, 8, 27, 64, 125, 216, 343, 512, 729]</span></span>
<span class="line"><span>[0, 1, 16, 81, 256, 625, 1296, 2401, 4096, 6561]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="std-env-home-dir-的更新" tabindex="-1"><a class="header-anchor" href="#std-env-home-dir-的更新"><span><code>std::env::home_dir()</code> 的更新</span></a></h2><p><code>std::env::home_dir()</code> 已被弃用多年，因为如果设置了 <code>HOME</code> 环境变量（这不是 Windows 上的标准配置），它可能会在某些 Windows 配置中给出令人惊讶的结果。我们之前避免更改其行为，因为担心与依赖此非标准配置的代码的兼容性。鉴于该函数已被弃用很长时间，我们现在将其行为更新为错误修复，后续版本将取消对该函数的弃用。</p><h2 id="others" tabindex="-1"><a class="header-anchor" href="#others"><span>Others</span></a></h2><p>其它更新细节，和稳定的 API 列表，参考<a href="https://blog.rust-lang.org/2025/02/20/Rust-1.85.0.html#stabilized-apis" target="_blank" rel="noopener noreferrer">原Blog</a></p>`,34)]))}const p=i(t,[["render",l],["__file","1.85.html.vue"]]),d=JSON.parse('{"path":"/appendix/rust-versions/1.85.html","title":"Rust 新版解读 | 1.85 | Rust 2024 稳定版、async 闭包","lang":"zh-CN","frontmatter":{"description":"Rust 新版解读 | 1.85 | Rust 2024 稳定版、async 闭包 Rust 1.85 官方 release doc: Announcing Rust 1.85.0 | Rust Blog 通过 rustup 安装的同学可以使用以下命令升级到 1.85 版本: Rust 2024 我们很高兴地宣布，Rust 2024 版现已稳定！ 大的...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/appendix/rust-versions/1.85.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"Rust 新版解读 | 1.85 | Rust 2024 稳定版、async 闭包"}],["meta",{"property":"og:description","content":"Rust 新版解读 | 1.85 | Rust 2024 稳定版、async 闭包 Rust 1.85 官方 release doc: Announcing Rust 1.85.0 | Rust Blog 通过 rustup 安装的同学可以使用以下命令升级到 1.85 版本: Rust 2024 我们很高兴地宣布，Rust 2024 版现已稳定！ 大的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust 新版解读 | 1.85 | Rust 2024 稳定版、async 闭包\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{},"readingTime":{"minutes":7.28,"words":2183},"filePathRelative":"appendix/rust-versions/1.85.md","excerpt":"\\n<blockquote>\\n<p>Rust 1.85 官方 release doc: <a href=\\"https://blog.rust-lang.org/2025/02/20/Rust-1.85.0.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Announcing Rust 1.85.0 | Rust Blog</a></p>\\n</blockquote>\\n<p>通过 <a href=\\"https://www.rust-lang.org/tools/install\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">rustup</a> 安装的同学可以使用以下命令升级到 1.85 版本:</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"appendix/rust-versions/1.85.md","value":{"title":"1.85","path":"appendix/rust-versions/1.85.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"appendix/rust-versions/1.85.md"}]}}}');export{p as comp,d as data};
