import{_ as s,e as a,k as e,o as n}from"./app-D8-td6D_.js";const h={};function l(t,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="依赖覆盖" tabindex="-1"><a class="header-anchor" href="#依赖覆盖"><span>依赖覆盖</span></a></h1><p>依赖覆盖对于本地开发来说，是很常见的，大部分原因都是我们希望在某个包发布到 <code>crates.io</code> 之前使用它，例如：</p><ul><li>你正在同时开发一个包和一个项目，而后者依赖于前者，你希望能在该项目中对正在开发的包进行测试</li><li>你引入的一个依赖包在 <code>master</code> 分支发布了新的代码，恰好修复了某个 bug，因此你希望能单独对该分支进行下测试</li><li>你即将发布一个包的新版本，为了确保新版本正常工作，你需要对其进行集成测试</li><li>你为项目的某个依赖包提了一个 PR 并解决了一个重要 bug，在等待合并到 <code>master</code> 分支，但是时间不等人，因此你决定先使用自己修改的版本，等未来合并后，再继续使用官方版本</li></ul><p>下面我们来具体看看类似的问题该如何解决。</p><blockquote><p>上一章节中我们讲了如果通过<a href="https://course.rs/cargo/reference/specify-deps/intro.html#%E5%A4%9A%E5%BC%95%E7%94%A8%E6%96%B9%E5%BC%8F%E6%B7%B7%E5%90%88" target="_blank" rel="noopener noreferrer">多种引用方式</a>来引入一个包，其实这也是一种依赖覆盖。</p></blockquote><h2 id="测试-bugfix-版本" tabindex="-1"><a class="header-anchor" href="#测试-bugfix-版本"><span>测试 bugfix 版本</span></a></h2><p>假设我们有一个项目正在使用 <a href="https://crates.io/crates/uuid" target="_blank" rel="noopener noreferrer"><code>uuid</code></a> 依赖包，但是却不幸地发现了一个 bug，由于这个 bug 影响了使用，没办法等到官方提交新版本，因此还是自己修复为好。</p><p>我们项目的 <code>Cargo.toml</code> 内容如下：</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;my-library&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.1.0&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uuid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.8.2&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了修复 <code>bug</code>，首先需要将 <code>uuid</code> 的源码克隆到本地，笔者是克隆到和项目同级的目录下:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/uuid-rs/uuid</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>下面，修改项目的 <code>Cargo.toml</code> 添加以下内容以引入本地克隆的版本:</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">patch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">crates-io</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uuid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;../uuid&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们使用自己修改过的 <code>patch</code> 来覆盖来自 <code>crates.io</code> 的版本，由于克隆下来的 <code>uuid</code> 目录和我们的项目同级，因此通过相对路径 &quot;../uuid&quot; 即可定位到。</p><p>在成功为 <code>uuid</code> 打了本地补丁后，现在尝试在项目下运行 <code>cargo build</code>，但是却报错了，而且报错内容有一些看不太懂：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Updating</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> crates.io</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> index</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">warning:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Patch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">uuid</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v1.0.0-alpha.1 (/Users/sunfei/development/rust/demos/uuid)\`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> was</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> not</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> used</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> in</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> crate</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> graph.</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Check</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> that</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> patched</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> package</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> version</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> and</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> available</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> features</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> are</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> compatible</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">with</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dependency</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> requirements.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> If</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> patch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> has</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> different</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> version</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> from</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">what</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> is</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> locked</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> in</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Cargo.lock</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update\`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> use</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> new</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">version.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> This</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> may</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> also</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> occur</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> with</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> an</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> optional</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dependency</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> that</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> is</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> not</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> enabled.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体原因比较复杂，但是仔细观察，会发现克隆下来的 <code>uuid</code> 的版本是 <code>v1.0.0-alpha.1</code> (在 <code>&quot;../uuid/Cargo.toml&quot;</code> 中可以查看)，然后我们本地引入的 <code>uuid</code> 版本是 <code>0.8.2</code>，根据之前讲过的 <code>crates.io</code> 的<a href="https://course.rs/cargo/reference/specify-deps/intro.html#%E4%BB%8E-cratesio-%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96%E5%8C%85" target="_blank" rel="noopener noreferrer">版本规则</a>，这两者是不兼容的，<code>0.8.2</code> 只能升级到 <code>0.8.z</code>，例如 <code>0.8.3</code>。</p><p>既然如此，我们先将 &quot;../uuid/Cargo.toml&quot; 中的 <code>version = &quot;1.0.0-alpha.1&quot;</code> 修改为 <code>version = &quot;0.8.3&quot;</code> ，然后看看结果先:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Updating</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> crates.io</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> index</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   Compiling</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> uuid</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v0.8.3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (/Users/sunfei/development/rust/demos/uuid)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大家注意到最后一行了吗？我们成功使用本地的 <code>0.8.3</code> 版本的 <code>uuid</code> 作为最新的依赖，因此也侧面证明了，补丁 <code>patch</code> 的版本也必须遵循相应的版本兼容规则！</p><p>如果修改后还是有问题，大家可以试试以下命令，指定版本进行更新:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">%</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> uuid</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --precise</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.8.3</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Updating</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> crates.io</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> index</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Updating</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> uuid</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v0.8.3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (/Users/sunfei/development/rust/demos/uuid) -&gt; v0.8.3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修复 bug 后，我们可以提交 pr 给 <code>uuid</code>，一旦 pr 被合并到了 <code>master</code> 分支，你可以直接通过以下方式来使用补丁:</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">patch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">crates-io</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uuid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;https://github.com/uuid-rs/uuid&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>等未来新的内容更新到 <code>crates.io</code> 后，大家就可以移除这个补丁，直接更新 <code>[dependencies]</code> 中的 <code>uuid</code> 版本即可！</p><h2 id="使用未发布的小版本" tabindex="-1"><a class="header-anchor" href="#使用未发布的小版本"><span>使用未发布的小版本</span></a></h2><p>还是 <code>uuid</code> 包，这次假设我们要为它新增一个特性，同时我们已经修改完毕，在本地测试过，并提交了相应的 pr，下面一起来看看该如何在它发布到 <code>crates.io</code> 之前继续使用。</p><p>再做一个假设，对于 <code>uuid</code> 来说，目前 <code>crates.io</code> 上的版本是 <code>1.0.0</code>，在我们提交了 pr 并合并到 <code>master</code> 分支后，<code>master</code> 上的版本变成了 <code>1.0.1</code>，这意味着未来 <code>crates.io</code> 上的版本也将变成 <code>1.0.1</code>。</p><p>为了使用新加的特性，同时当该包在未来发布到 <code>crates.io</code> 后，我们可以自动使用 <code>crates.io</code> 上的新版本，而无需再使用 <code>patch</code> 补丁，可以这样修改 <code>Cargo.toml</code>：</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;my-library&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.1.0&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uuid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1.0.1&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">patch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">crates-io</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uuid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;https://github.com/uuid-rs/uuid&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，我们将 <code>[dependencies]</code> 中的 <code>uuid</code> 版本提前修改为 <code>1.0.1</code>，由于该版本在 <code>crates.io</code> 尚未发布，因此 <code>patch</code> 版本会被使用。</p><p>现在，我们的项目是基于 <code>patch</code> 版本的 <code>uuid</code> 来构建，也就是从 <code>gihtub</code> 的 <code>master</code> 分支中拉取最新的 <code>commit</code> 来构建。一旦未来 <code>crates.io</code> 上有了 <code>1.0.1</code> 版本，那项目就会继续基于 <code>crates.io</code> 来构建，此时，<code>patch</code> 就可以删除了。</p><h4 id="间接使用-patch" tabindex="-1"><a class="header-anchor" href="#间接使用-patch"><span>间接使用 <code>patch</code></span></a></h4><p>现在假设项目 <code>A</code> 的依赖是 <code>B</code> 和 <code>uuid</code>，而 <code>B</code> 的依赖也是 <code>uuid</code>，此时我们可以让 <code>A</code> 和 <code>B</code> 都使用来自 <code>GitHub</code> 的 <code>patch</code> 版本，配置如下:</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;my-binary&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.1.0&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">my-library</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;https://example.com/git/my-library&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uuid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1.0.1&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">patch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">crates-io</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uuid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;https://github.com/uuid-rs/uuid&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上所示，<code>patch</code> 不仅仅对于 <code>my-binary</code> 项目有用，对于 <code>my-binary</code> 的依赖 <code>my-library</code> 来说，一样可以间接生效。</p><h4 id="非-crates-io-的-patch" tabindex="-1"><a class="header-anchor" href="#非-crates-io-的-patch"><span>非 crates.io 的 patch</span></a></h4><p>若我们想要覆盖的依赖并不是来自 <code>crates.io</code> ，就需要对 <code>[patch]</code> 做一些修改。例如依赖是 <code>git</code> 仓库，然后使用本地路径来覆盖它:</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">patch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;https://github</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">com/your/repository&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">my-library</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;../my-library/path&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>easy，轻松搞定!</p><h2 id="使用未发布的大版本" tabindex="-1"><a class="header-anchor" href="#使用未发布的大版本"><span>使用未发布的大版本</span></a></h2><p>现在假设我们要发布一个大版本 <code>2.0.0</code>，与之前类似，可以将 <code>Cargo.toml</code> 修改如下:</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uuid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;2.0&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">patch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">crates-io</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uuid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://github.com/uuid-rs/uuid&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">branch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;2.0.0&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时 <code>2.0</code> 版本在 <code>crates.io</code> 上还不存在，因此我们使用了 <code>patch</code> 版本且指定了 <code>branch = &quot;2.0.0&quot;</code>。</p><h4 id="间接使用-patch-1" tabindex="-1"><a class="header-anchor" href="#间接使用-patch-1"><span>间接使用 <code>patch</code></span></a></h4><p>这里需要注意，<strong>与之前的小版本不同，大版本的 <code>patch</code> 不会发生间接的传递！</strong>，例如：</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;my-binary&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.1.0&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">my-library</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;https://example.com/git/my-library&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uuid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1.0&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">patch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">crates-io</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uuid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;https://github.com/uuid-rs/uuid&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">branch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;2.0.0&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上配置中, <code>my-binary</code> 将继续使用 <code>1.x.y</code> 系列的版本，而 <code>my-library</code> 将使用最新的 <code>2.0.0</code> patch。</p><p>原因是，大版本更新往往会带来破坏性的功能，Rust 为了让我们平稳的升级，采用了滚动的方式：在依赖图中逐步推进更新，而不是一次性全部更新。</p><h2 id="多版本-patch" tabindex="-1"><a class="header-anchor" href="#多版本-patch"><span>多版本[patch]</span></a></h2><p>在之前章节，我们介绍过如何使用 <code>package key</code> 来<a href="https://course.rs/cargo/reference/specify-deps/intro.html#%E5%9C%A8-cargotoml-%E4%B8%AD%E9%87%8D%E5%91%BD%E5%90%8D%E4%BE%9D%E8%B5%96" target="_blank" rel="noopener noreferrer">重命名依赖包</a>，现在来看看如何使用它同时引入多个 <code>patch</code>。</p><p>假设，我们对 <code>serde</code> 有两个新的 <code>patch</code> 需求:</p><ul><li><code>serde</code> 官方解决了一个 <code>bug</code> 但是还没发布到 <code>crates.io</code>，我们想直接从 <code>git</code> 仓库的最新 <code>commit</code> 拉取版本 <code>1.*</code></li><li>我们自己为 <code>serde</code> 添加了新的功能，命名为 <code>2.0.0</code> 版本，并将该版本上传到自己的 <code>git</code> 仓库中</li></ul><p>为了满足这两个 <code>patch</code>，可以使用如下内容的 <code>Cargo.toml</code>：</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">patch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">crates-io</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">serde</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;https://github.com/serde-rs/serde&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">serde2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;https://github.com/example/serde&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;serde&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">branch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;v2&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一行说明，第一个 <code>patch</code> 从官方仓库 <code>main</code> 分支的最新 <code>commit</code> 拉取，而第二个则从我们自己的仓库拉取 <code>v2</code> 分支，同时将其重命名为 <code>serde2</code>。</p><p>这样，在代码中就可以分别通过 <code>serde</code> 和 <code>serde2</code> 引用不同版本的依赖库了。</p><h2 id="通过-path-来覆盖依赖" tabindex="-1"><a class="header-anchor" href="#通过-path-来覆盖依赖"><span>通过[path]来覆盖依赖</span></a></h2><p>有时我们只是临时性地对一个项目进行处理，因此并不想去修改它的 <code>Cargo.toml</code>。此时可以使用 <code>Cargo</code> 提供的路径覆盖方法: <strong>注意，这个方法限制较多，如果可以，还是要使用 [patch]</strong>。</p><p>与 <code>[patch]</code> 修改 <code>Cargo.toml</code> 不同，路径覆盖修改的是 <code>Cargo</code> 自身的<a href="https://course.rs/cargo/guide/cargo-cache.html#cargo-home" target="_blank" rel="noopener noreferrer">配置文件</a> <code>$Home/.cargo/config.toml</code>:</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">paths</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/path/to/uuid&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>paths</code> 数组中的元素是一个包含 <code>Cargo.toml</code> 的目录(依赖包)，在当前例子中，由于我们只有一个 <code>uuid</code>，因此只需要覆盖它即可。目标路径可以是相对的，也是绝对的，需要注意，如果是相对路径，那是相对包含 <code>.cargo</code> 的 <code>$Home</code> 来说的。</p><h2 id="不推荐的-replace" tabindex="-1"><a class="header-anchor" href="#不推荐的-replace"><span>不推荐的[replace]</span></a></h2><blockquote><p><code>[replace]</code> 已经被标记为 <code>deprecated</code>，并将在未来被移除，请使用 <code>[patch]</code> 替代</p></blockquote><p>虽然不建议使用，但是如果大家阅读其它项目时依然可能会碰到这种用法:</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">replace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">foo:0.1.0</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;https://github.com/example/foo&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">bar:1.0.2</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;my/local/bar&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>语法看上去还是很清晰的，<code>[replace]</code> 中的每一个 <code>key</code> 都是 <code>Package ID</code> 格式，通过这种写法可以在依赖图中任意挑选一个节点进行覆盖。</p>`,67)]))}const k=s(h,[["render",l],["__file","deps-overriding.html.vue"]]),p=JSON.parse('{"path":"/cargo/reference/deps-overriding.html","title":"依赖覆盖","lang":"zh-CN","frontmatter":{"description":"依赖覆盖 依赖覆盖对于本地开发来说，是很常见的，大部分原因都是我们希望在某个包发布到 crates.io 之前使用它，例如： 你正在同时开发一个包和一个项目，而后者依赖于前者，你希望能在该项目中对正在开发的包进行测试 你引入的一个依赖包在 master 分支发布了新的代码，恰好修复了某个 bug，因此你希望能单独对该分支进行下测试 你即将发布一个包的新...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/cargo/reference/deps-overriding.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"依赖覆盖"}],["meta",{"property":"og:description","content":"依赖覆盖 依赖覆盖对于本地开发来说，是很常见的，大部分原因都是我们希望在某个包发布到 crates.io 之前使用它，例如： 你正在同时开发一个包和一个项目，而后者依赖于前者，你希望能在该项目中对正在开发的包进行测试 你引入的一个依赖包在 master 分支发布了新的代码，恰好修复了某个 bug，因此你希望能单独对该分支进行下测试 你即将发布一个包的新..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"依赖覆盖\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{},"readingTime":{"minutes":7.35,"words":2206},"filePathRelative":"cargo/reference/deps-overriding.md","excerpt":"\\n<p>依赖覆盖对于本地开发来说，是很常见的，大部分原因都是我们希望在某个包发布到 <code>crates.io</code> 之前使用它，例如：</p>\\n<ul>\\n<li>你正在同时开发一个包和一个项目，而后者依赖于前者，你希望能在该项目中对正在开发的包进行测试</li>\\n<li>你引入的一个依赖包在 <code>master</code> 分支发布了新的代码，恰好修复了某个 bug，因此你希望能单独对该分支进行下测试</li>\\n<li>你即将发布一个包的新版本，为了确保新版本正常工作，你需要对其进行集成测试</li>\\n<li>你为项目的某个依赖包提了一个 PR 并解决了一个重要 bug，在等待合并到 <code>master</code> 分支，但是时间不等人，因此你决定先使用自己修改的版本，等未来合并后，再继续使用官方版本</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"cargo/reference/deps-overriding.md","value":{"title":"deps-overriding","path":"cargo/reference/deps-overriding.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"cargo/reference/deps-overriding.md"}]}}}');export{k as comp,p as data};
