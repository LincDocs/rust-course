import{_ as r,e as i,g as e,o}from"./app-BSEs7fAb.js";const a={};function n(s,t){return o(),i("div",null,t[0]||(t[0]=[e("h1",{id:"糟糕的提前优化",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#糟糕的提前优化"},[e("span",null,"糟糕的提前优化")])],-1),e("h2",{id:"函数调用",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#函数调用"},[e("span",null,"函数调用")])],-1),e("p",null,"由于Rust的编译器和LLVM很强大，因此就算你使用了多层函数调用去完成一件事(嵌套函数调用往往出于设计上的考虑)，依然不会有性能上的影响，因为最终生成的机器码会消除这些多余的函数调用。",-1),e("p",null,"总之用Rust时，你不必操心多余的函数调用，只要写合理的代码，然后Rust会帮助你运行的更快!",-1)]))}const p=r(a,[["render",n],["__file","early-optimise.html.vue"]]),l=JSON.parse('{"path":"/src/profiling/performance/early-optimise.html","title":"糟糕的提前优化","lang":"zh-CN","frontmatter":{"description":"糟糕的提前优化 函数调用 由于Rust的编译器和LLVM很强大，因此就算你使用了多层函数调用去完成一件事(嵌套函数调用往往出于设计上的考虑)，依然不会有性能上的影响，因为最终生成的机器码会消除这些多余的函数调用。 总之用Rust时，你不必操心多余的函数调用，只要写合理的代码，然后Rust会帮助你运行的更快!","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/src/profiling/performance/early-optimise.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"糟糕的提前优化"}],["meta",{"property":"og:description","content":"糟糕的提前优化 函数调用 由于Rust的编译器和LLVM很强大，因此就算你使用了多层函数调用去完成一件事(嵌套函数调用往往出于设计上的考虑)，依然不会有性能上的影响，因为最终生成的机器码会消除这些多余的函数调用。 总之用Rust时，你不必操心多余的函数调用，只要写合理的代码，然后Rust会帮助你运行的更快!"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-20T14:07:43.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-20T14:07:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"糟糕的提前优化\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-20T14:07:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{"createdTime":1745158063000,"updatedTime":1745158063000,"contributors":[{"name":"Linc","username":"Linc","email":"762699299@qq.com","commits":1,"url":"https://github.com/Linc"}]},"readingTime":{"minutes":0.43,"words":129},"filePathRelative":"src/profiling/performance/early-optimise.md","localizedDate":"2025年4月20日","excerpt":"\\n<h2>函数调用</h2>\\n<p>由于Rust的编译器和LLVM很强大，因此就算你使用了多层函数调用去完成一件事(嵌套函数调用往往出于设计上的考虑)，依然不会有性能上的影响，因为最终生成的机器码会消除这些多余的函数调用。</p>\\n<p>总之用Rust时，你不必操心多余的函数调用，只要写合理的代码，然后Rust会帮助你运行的更快!</p>\\n","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"src/SUMMARY.html"}],"localMap":{"nodes":[{"id":"src/profiling/performance/early-optimise.md","value":{"title":"early-optimise","path":"src/profiling/performance/early-optimise.md","outlink":[],"backlink":["src/SUMMARY.md"]}},{"id":"src/SUMMARY.md","value":{"title":"SUMMARY","path":"src/SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"src/SUMMARY.md","target":"src/profiling/performance/early-optimise.md"}]}}}');export{p as comp,l as data};
