import{_ as i,e as a,k as t,o as e}from"./app-DpsuSTEZ.js";const n={};function l(h,s){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="rust-新版解读-1-76-abi-兼容性更新" tabindex="-1">Rust 新版解读 | 1.76 | ABI 兼容性更新</h1><blockquote><p>Rust 1.76 官方 release doc: <a href="https://blog.rust-lang.org/2024/02/08/Rust-1.76.0.html" target="_blank" rel="noopener noreferrer">Announcing Rust 1.76.0 | Rust Blog</a></p></blockquote><p>通过 <a href="https://www.rust-lang.org/tools/install" target="_blank" rel="noopener noreferrer">rustup</a> 安装的同学可以使用以下命令升级到 1.76 版本:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rustup</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stable</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2024 新年好！</p><h2 id="abi-兼容性更新" tabindex="-1">ABI 兼容性更新</h2><p>函数指针文档中新的 <a href="https://doc.rust-lang.org/stable/std/primitive.fn.html#abi-compatibility" target="_blank" rel="noopener noreferrer">ABI 兼容性部分</a>描述了函数签名与 ABI 兼容的含义，并包括一份当前 Rust 中参数和返回值类型符合 ABI 兼容的列表。在大多数情况下，本文档不会添加任何新的保证，仅描述现有的兼容性状态。</p><p>当前保证了 <code>char</code> 和 <code>u32</code> 是 ABI 兼容的。它们始终具有相同的大小和对齐方式，也被认为是完全等效的。</p><h2 id="通过引用获取类型名称描述" tabindex="-1">通过引用获取类型名称描述</h2><p>出于调试目的，自 Rust 1.38 起，<code>any::type_name::&lt;T&gt;()</code> 可用于获取类型 <code>T</code> 的字符串描述，但这需要显式写明类型。而写清楚类型并不总是那么容易，特别是对于像闭包这样的不可命名类型或不透明的返回类型。新的 <code>any::type_name_of_val(&amp;T)</code> 允许使用任何对象的引用，来获取对应类型的描述性名称。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> get_iter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">impl</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> Iterator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Item</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> i32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">into_iter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> iter</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> get_iter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> iter_name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">type_name_of_val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">iter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">i32</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> iter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;The sum of the \`{iter_name}\` is {sum}.&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码将会打印出</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>The sum of the \`core::array::iter::IntoIter&lt;i32, 3&gt;\` is 6.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="others" tabindex="-1">Others</h2><p>其它更新细节，和稳定的API列表，参考<a href="https://blog.rust-lang.org/2024/02/08/Rust-1.76.0.html#stabilized-apis" target="_blank" rel="noopener noreferrer">原Blog</a></p>`,15)]))}const p=i(n,[["render",l],["__file","1.76.html.vue"]]),k=JSON.parse('{"path":"/appendix/rust-versions/1.76.html","title":"Rust 新版解读 | 1.76 | ABI 兼容性更新","lang":"zh-CN","frontmatter":{"description":"Rust 新版解读 | 1.76 | ABI 兼容性更新 Rust 1.76 官方 release doc: Announcing Rust 1.76.0 | Rust Blog 通过 rustup 安装的同学可以使用以下命令升级到 1.76 版本: 2024 新年好！ ABI 兼容性更新 函数指针文档中新的 ABI 兼容性部分描述了函数签名与 ABI...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/appendix/rust-versions/1.76.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"Rust 新版解读 | 1.76 | ABI 兼容性更新"}],["meta",{"property":"og:description","content":"Rust 新版解读 | 1.76 | ABI 兼容性更新 Rust 1.76 官方 release doc: Announcing Rust 1.76.0 | Rust Blog 通过 rustup 安装的同学可以使用以下命令升级到 1.76 版本: 2024 新年好！ ABI 兼容性更新 函数指针文档中新的 ABI 兼容性部分描述了函数签名与 ABI..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust 新版解读 | 1.76 | ABI 兼容性更新\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"git":{},"readingTime":{"minutes":1.31,"words":394},"filePathRelative":"appendix/rust-versions/1.76.md","excerpt":"\\n<blockquote>\\n<p>Rust 1.76 官方 release doc: <a href=\\"https://blog.rust-lang.org/2024/02/08/Rust-1.76.0.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Announcing Rust 1.76.0 | Rust Blog</a></p>\\n</blockquote>\\n<p>通过 <a href=\\"https://www.rust-lang.org/tools/install\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">rustup</a> 安装的同学可以使用以下命令升级到 1.76 版本:</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"appendix/rust-versions/1.76.md","value":{"title":"1.76","path":"appendix/rust-versions/1.76.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"appendix/rust-versions/1.76.md"}]}}}');export{p as comp,k as data};
