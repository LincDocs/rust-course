import{_ as i,e,f as a,o as t}from"./app-BSEs7fAb.js";const n={};function r(l,s){return t(),e("div",null,s[0]||(s[0]=[a(`<h1 id="rust-新版解读-1-68-crates-index-优化" tabindex="-1"><a class="header-anchor" href="#rust-新版解读-1-68-crates-index-优化"><span>Rust 新版解读 | 1.68 | crates index 优化</span></a></h1><blockquote><p>Rust 1.68 官方 release doc: <a href="https://blog.rust-lang.org/2023/03/09/Rust-1.68.0.html" target="_blank" rel="noopener noreferrer">Announcing Rust 1.68.0 | Rust Blog</a></p></blockquote><p>通过 <a href="https://www.rust-lang.org/tools/install" target="_blank" rel="noopener noreferrer">rustup</a> 安装的同学可以使用以下命令升级到 1.68 版本:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rustup</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stable</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="cargo-稀疏注册协议-sparse-protocol" tabindex="-1"><a class="header-anchor" href="#cargo-稀疏注册协议-sparse-protocol"><span>Cargo 稀疏注册协议 （sparse protocol）</span></a></h2><p>Cargo的“稀疏”注册协议已经稳定，它是用来读取注册在 crates.io 上的 crates 的索引的基础设施。以前的 git 协议（目前仍然是默认协议）会克隆一个包括所有 crates 的索引的仓库，但这已经开始遇到扩展限制问题，在更新该仓库时会出现明显的延迟。新协议应在访问 crates.io 时提供显着的性能提升，因为它只会下载有关实际用到的 crates 的索引。</p><p>要使用新的协议，需要设置环境变量 <code>CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse</code> ，或者编辑 <code>.cargo/config.toml</code> 文件添加：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[registries.crates-io]</span></span>
<span class="line"><span>protocol = &quot;sparse&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>稀疏注册协议目前计划于 1.70.0 版本成为默认的协议。更多细节可以看官方博客的 <a href="https://blog.rust-lang.org/inside-rust/2023/01/30/cargo-sparse-protocol.html" target="_blank" rel="noopener noreferrer">announcement</a>， <a href="https://rust-lang.github.io/rfcs/2789-sparse-index.html" target="_blank" rel="noopener noreferrer">RFC 2789</a>， 当前 Cargo Book 的 <a href="https://doc.rust-lang.org/stable/cargo/reference/registry-index.html#sparse-protocol" target="_blank" rel="noopener noreferrer">文档</a></p><h2 id="局部-pin-构造" tabindex="-1"><a class="header-anchor" href="#局部-pin-构造"><span>局部 <code>Pin</code> 构造</span></a></h2><p>新增的 <code>pin!</code> 宏能够用 <code>T</code> 构造一个 <code>Pin&lt;&amp;mut T&gt;</code> ，从而匿名捕获在局部状态内。这通常叫做 堆栈固定（stack-pinning），同时这个堆栈也可以被 <code>async fn</code> 或者 代码块 来捕获住。这个宏和一些 crates 里提供的（比如 <code>tokio::pin!</code>）很像，但是标准库可以利用 <code>Pin</code> 的内部结构和 临时生命周期拓展(<a href="https://doc.rust-lang.org/stable/reference/destructors.html#temporary-lifetime-extension" target="_blank" rel="noopener noreferrer">Temporary lifetime extension</a>)来实现出更像表达式的宏。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/// Runs a future to completion.</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> block_on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">F</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Future</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">future</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">F</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">F</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Output</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> waker_that_unparks_thread</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> todo!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> mut</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cx</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> Context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">from_waker</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">waker_that_unparks_thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Pin the future so it can be polled.</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> mut</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> pinned_future</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> pin!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">future</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    loop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        match</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> pinned_future</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">as_mut</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">poll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&amp;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">mut</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">            Poll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Pending</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">park</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">            Poll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Ready</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) =&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，原来的 <code>future</code> 将被移动到一个临时的局部区域，由新的 <code>pinned_future</code> 引用，类型为 <code>Pin&lt;&amp;mut F&gt;</code>，并且该 pin 受制于正常的借用检查器以确保它不会超过局部作用域。</p><h2 id="alloc-默认错误处理" tabindex="-1"><a class="header-anchor" href="#alloc-默认错误处理"><span><code>alloc</code> 默认错误处理</span></a></h2><p>当 Rust 内存分配失败时，类似于 <code>Box::new</code> 和 <code>Vec::push</code> 的 API 无法反映出这个错误，从而采取了一些不同的措施。当使用 <code>std</code> 时，程序会打印 <code>stderr</code> 然后中止。从 Rust 1.68.0 开始，包含 <code>std</code> 的二进制程序仍然会继续这样，而不保护 <code>std</code> 只包含 <code>alloc</code> 的二进制程序会对内存分配错误调用 <code>panic!</code>，如果需要可以再进一步通过 <code>#[panic_handler]</code> 来调整其行为。</p><p>未来，<code>std</code> 也可能会改成这样。</p><h2 id="others" tabindex="-1"><a class="header-anchor" href="#others"><span>Others</span></a></h2><p>其它更新细节，和稳定的API列表，参考<a href="https://blog.rust-lang.org/2023/03/09/Rust-1.68.0.html#stabilized-apis" target="_blank" rel="noopener noreferrer">原Blog</a></p>`,18)]))}const p=i(n,[["render",r],["__file","1.68.html.vue"]]),k=JSON.parse('{"path":"/src/appendix/rust-versions/1.68.html","title":"Rust 新版解读 | 1.68 | crates index 优化","lang":"zh-CN","frontmatter":{"description":"Rust 新版解读 | 1.68 | crates index 优化 Rust 1.68 官方 release doc: Announcing Rust 1.68.0 | Rust Blog 通过 rustup 安装的同学可以使用以下命令升级到 1.68 版本: Cargo 稀疏注册协议 （sparse protocol） Cargo的“稀疏”注册协议...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/src/appendix/rust-versions/1.68.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"Rust 新版解读 | 1.68 | crates index 优化"}],["meta",{"property":"og:description","content":"Rust 新版解读 | 1.68 | crates index 优化 Rust 1.68 官方 release doc: Announcing Rust 1.68.0 | Rust Blog 通过 rustup 安装的同学可以使用以下命令升级到 1.68 版本: Cargo 稀疏注册协议 （sparse protocol） Cargo的“稀疏”注册协议..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-20T14:07:43.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-20T14:07:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust 新版解读 | 1.68 | crates index 优化\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-20T14:07:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{"createdTime":1745158063000,"updatedTime":1745158063000,"contributors":[{"name":"Linc","username":"Linc","email":"762699299@qq.com","commits":1,"url":"https://github.com/Linc"}]},"readingTime":{"minutes":2.3,"words":689},"filePathRelative":"src/appendix/rust-versions/1.68.md","localizedDate":"2025年4月20日","excerpt":"\\n<blockquote>\\n<p>Rust 1.68 官方 release doc: <a href=\\"https://blog.rust-lang.org/2023/03/09/Rust-1.68.0.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Announcing Rust 1.68.0 | Rust Blog</a></p>\\n</blockquote>\\n<p>通过 <a href=\\"https://www.rust-lang.org/tools/install\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">rustup</a> 安装的同学可以使用以下命令升级到 1.68 版本:</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"src/SUMMARY.html"}],"localMap":{"nodes":[{"id":"src/appendix/rust-versions/1.68.md","value":{"title":"1.68","path":"src/appendix/rust-versions/1.68.md","outlink":[],"backlink":["src/SUMMARY.md"]}},{"id":"src/SUMMARY.md","value":{"title":"SUMMARY","path":"src/SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"src/SUMMARY.md","target":"src/appendix/rust-versions/1.68.md"}]}}}');export{p as comp,k as data};
