import{_ as i,e as a,f as n,o as e}from"./app-C_xW6TWK.js";const t={};function l(h,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="rust-新版解读-1-82-超大更新" tabindex="-1"><a class="header-anchor" href="#rust-新版解读-1-82-超大更新"><span>Rust 新版解读 | 1.82 | 超大更新</span></a></h1><blockquote><p>Rust 1.82 官方 release doc: <a href="https://blog.rust-lang.org/2024/09/05/Rust-1.82.0.html" target="_blank" rel="noopener noreferrer">Announcing Rust 1.82.0 | Rust Blog</a></p></blockquote><p>通过 <a href="https://www.rust-lang.org/tools/install" target="_blank" rel="noopener noreferrer">rustup</a> 安装的同学可以使用以下命令升级到 1.82 版本:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rustup</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stable</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="cargo-info-命令" tabindex="-1"><a class="header-anchor" href="#cargo-info-命令"><span><code>cargo info</code> 命令</span></a></h2><p>Cargo 现在有一个 <a href="https://doc.rust-lang.org/nightly/cargo/commands/cargo-info.html" target="_blank" rel="noopener noreferrer"><code>info</code> 子命令</a>，用于显示注册表中包的信息，满足了<a href="https://github.com/rust-lang/cargo/issues/948" target="_blank" rel="noopener noreferrer">长期以来的请求</a>，距离其十周年纪念日仅差一点！多年来，已经编写了许多类似的第三方扩展，这个实现最初是作为 <a href="https://crates.io/crates/cargo-information" target="_blank" rel="noopener noreferrer">cargo-information</a> 开发的，现合并到 Cargo 本身中。</p><p>例如，以下是你可能会看到的 <code>cargo info cc</code> 的输出：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cc #build-dependencies</span></span>
<span class="line"><span>A build-time dependency for Cargo build scripts to assist in invoking the native</span></span>
<span class="line"><span>C compiler to compile native C code into a static archive to be linked into Rust</span></span>
<span class="line"><span>code.</span></span>
<span class="line"><span>version: 1.1.23 (latest 1.1.30)</span></span>
<span class="line"><span>license: MIT OR Apache-2.0</span></span>
<span class="line"><span>rust-version: 1.63</span></span>
<span class="line"><span>documentation: https://docs.rs/cc</span></span>
<span class="line"><span>homepage: https://github.com/rust-lang/cc-rs</span></span>
<span class="line"><span>repository: https://github.com/rust-lang/cc-rs</span></span>
<span class="line"><span>crates.io: https://crates.io/crates/cc/1.1.23</span></span>
<span class="line"><span>features:</span></span>
<span class="line"><span>  jobserver = []</span></span>
<span class="line"><span>  parallel  = [dep:libc, dep:jobserver]</span></span>
<span class="line"><span>note: to see how you depend on cc, run \`cargo tree --invert --package cc@1.1.23\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，<code>cargo info</code> 描述本地 <code>Cargo.lock</code> 中的包版本（如果有的话）。如你所见，它还会指示是否有更新的版本，<code>cargo info cc@1.1.30</code> 将报告该版本的信息。</p><h2 id="apple-相关编译目标支持等级提升" tabindex="-1"><a class="header-anchor" href="#apple-相关编译目标支持等级提升"><span>Apple 相关编译目标支持等级提升</span></a></h2><h3 id="macos-on-64-bit-arm-现在是-tier-1" tabindex="-1"><a class="header-anchor" href="#macos-on-64-bit-arm-现在是-tier-1"><span>macOS on 64-bit ARM 现在是 Tier 1</span></a></h3><p>适用于 macOS 的 64 位 ARM（M1 系列或更高版本的 Apple Silicon CPU）的 Rust 目标 <code>aarch64-apple-darwin</code> 现在是一个 Tier 1 目标，表明我们对它的工作状态有最高的保证。正如 <a href="https://doc.rust-lang.org/stable/rustc/platform-support.html" target="_blank" rel="noopener noreferrer">平台支持</a> 页面所述，Rust 仓库中的每个更改在合并之前必须在每个 Tier 1 目标上通过完整的测试。此前 <code>darwin</code> 在 Rust 1.49 中作为 Tier 2 引入，使其在 <code>rustup</code> 中可用。这一新的里程碑使 <code>aarch64-apple-darwin</code> 目标与 64 位 ARM Linux 以及 X86 macOS、Linux 和 Windows 目标处于同等地位。</p><h3 id="mac-catalyst-目标现在是-tier-2" tabindex="-1"><a class="header-anchor" href="#mac-catalyst-目标现在是-tier-2"><span>Mac Catalyst 目标现在是 Tier 2</span></a></h3><p><a href="https://developer.apple.com/mac-catalyst/" target="_blank" rel="noopener noreferrer">Mac Catalyst</a> 是苹果的一项技术，允许在 Mac 上原生运行 iOS 应用程序。这对于测试特定于 iOS 的代码特别有用，因为 <code>cargo test --target=aarch64-apple-ios-macabi --target=x86_64-apple-ios-macabi</code> 基本上可以直接工作（与通常的 iOS 目标相比，后者需要在外部工具打包后才能在原生设备或模拟器上运行）。</p><p><a href="https://doc.rust-lang.org/nightly/rustc/platform-support/apple-ios-macabi.html" target="_blank" rel="noopener noreferrer">这些目标</a> 现在是 Tier 2，可以通过 <code>rustup target add aarch64-apple-ios-macabi x86_64-apple-ios-macabi</code> 下载，现在是更新你的 CI 管道以测试你的代码是否也能在类似 iOS 的环境中运行的好时机。</p><h2 id="精确捕获-use-语法" tabindex="-1"><a class="header-anchor" href="#精确捕获-use-语法"><span>精确捕获 <code>use&lt;..&gt;</code> 语法</span></a></h2><p>Rust 现在支持在某些 <code>impl Trait</code> 边界中使用 <code>use&lt;..&gt;</code> 语法来控制哪些泛型生命周期参数被捕获。</p><p>Rust 中的 <code>Return-position impl Trait</code>（RPIT）类型会<em>捕获</em>某些泛型参数。捕获一个泛型参数允许该参数在隐藏类型中使用。这反过来会影响借用检查。</p><p>在 Rust 2021 及更早版本中，生命周期参数在裸函数和固有 impl 的函数和方法中的不透明类型中不会被捕获，除非这些生命周期参数在语法上被提及。例如，这是一个错误：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//@ edition: 2021</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: &amp;()) -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">impl</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> Sized</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>error[E0700]: hidden type for \`impl Sized\` captures lifetime that does not appear in bounds</span></span>
<span class="line"><span> --&gt; src/main.rs:1:30</span></span>
<span class="line"><span>  |</span></span>
<span class="line"><span>1 | fn f(x: &amp;()) -&gt; impl Sized { x }</span></span>
<span class="line"><span>  |         ---     ----------   ^</span></span>
<span class="line"><span>  |         |       |</span></span>
<span class="line"><span>  |         |       opaque type defined here</span></span>
<span class="line"><span>  |         hidden type \`&amp;()\` captures the anonymous lifetime defined here</span></span>
<span class="line"><span>  |</span></span>
<span class="line"><span>help: add a \`use&lt;...&gt;\` bound to explicitly capture \`&#39;_\`</span></span>
<span class="line"><span>  |</span></span>
<span class="line"><span>1 | fn f(x: &amp;()) -&gt; impl Sized + use&lt;&#39;_&gt; { x }</span></span>
<span class="line"><span>  |                            +++++++++</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过新的 <code>use&lt;..&gt;</code> 语法，我们可以按照错误提示修复这个问题，如下所示：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: &amp;()) -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">impl</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> Sized</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">use</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&#39;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>以前，正确修复这类错误需要定义一个虚拟特征，通常称为 <code>Captures</code>，并按如下方式使用它：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">trait</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Captures</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: ?</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Sized</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; {}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">impl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: ?</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Sized</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">U</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: ?</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Sized</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Captures</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> U</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: &amp;()) -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">impl</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> Sized</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Captures</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&amp;&#39;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ()&gt; { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这被称为 <a href="https://github.com/rust-lang/rfcs/blob/master/text/3498-lifetime-capture-rules-2024.md#the-captures-trick" target="_blank" rel="noopener noreferrer">&quot;the <code>Captures</code> trick&quot;</a>，它有点复杂和微妙。现在不再需要了。<br> 还有一种不太正确但更方便的修复方法，通常称为 <a href="https://github.com/rust-lang/rfcs/blob/master/text/3498-lifetime-capture-rules-2024.md#the-outlives-trick" target="_blank" rel="noopener noreferrer">&quot;the outlives trick&quot;</a>。编译器甚至以前建议这样做。这个技巧看起来像这样：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: &amp;()) -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">impl</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> Sized</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + &#39;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在这个简单的情况下，这个技巧在细微的原因上与 <code>+ use&lt;&#39;_&gt;</code> 完全等价，原因在 <a href="https://github.com/rust-lang/rfcs/blob/master/text/3498-lifetime-capture-rules-2024.md" target="_blank" rel="noopener noreferrer">RFC 3498</a> 中有解释。然而，在实际情况下，这会过度约束返回的不透明类型的边界。比如如下代码里：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&#39;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">cx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(&amp;&#39;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">cx</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> u8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&#39;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">cx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, &#39;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    cx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&#39;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">cx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: &amp;&#39;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> u8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">impl</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> Iterator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Item</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;&#39;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> u8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; + &#39;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">cx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    core</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">iter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">once_with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">move</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        eprintln!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;LOG: {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        x</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    })</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//~^ ERROR lifetime may not live long enough</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们不能移除 <code>+ &#39;cx</code>，因为生命周期被用于隐藏类型中，因此必须被捕获。我们也不能添加 <code>&#39;a: &#39;cx</code>的约束，因为这些生命周期实际上并不相关，并且通常情况下 <code>&#39;a</code> 不会比 <code>&#39;cx</code> 更长。然而，如果我们改为写 <code>+ use&lt;&#39;cx, &#39;a&gt;</code>，这将有效并具有正确的约束。</p><p>有一些限制正在稳定化。<code>use&lt;..&gt;</code> 语法目前不能出现在特征或特征实现中，并且必须列出所有在作用域内的泛型类型和常量参数。我们希望随着时间的推移解除这些限制。</p><p>请注意，在 Rust 2024 中，上面的例子将“直接工作”，而不需要 <code>use&lt;..&gt;</code> 语法（或任何技巧）。这是因为在新版本中，不透明类型将自动捕获所有在作用域内的生命周期参数。这是一个更好的默认设置，我们已经看到了很多关于这如何清理代码的证据。在 Rust 2024 中，<code>use&lt;..&gt;</code> 语法将作为一种重要的方式来选择退出该默认设置。</p><p>有关 <code>use&lt;..&gt;</code> 语法、捕获以及这如何应用于 Rust 2024 的更多详细信息，请参阅版本指南中的 <a href="https://doc.rust-lang.org/nightly/edition-guide/rust-2024/rpit-lifetime-capture.html" target="_blank" rel="noopener noreferrer">&quot;RPIT lifetime capture rules&quot;</a> 章节。有关整体方向的详细信息，请参阅我们最近的博客文章 <a href="%5B2024-09-05-impl-trait-capture-rules.md%5D(https://blog.rust-lang.org/2024/09/05/impl-trait-capture-rules.html)">&quot;Changes to <code>impl Trait</code> in Rust 2024&quot;</a>。</p><h2 id="创建原始指针的原生语法" tabindex="-1"><a class="header-anchor" href="#创建原始指针的原生语法"><span>创建原始指针的原生语法</span></a></h2><p>不安全代码有时必须处理可能悬空、未对齐或不指向有效数据的指针。这种情况常见于 <code>repr(packed)</code> 结构体。在这种情况下，避免创建引用非常重要，因为这会导致未定义行为。这意味着通常的 <code>&amp;</code> 和 <code>&amp;mut</code> 操作符不能使用，因为它们会创建引用——即使引用立即被转换为原始指针，也无法避免未定义行为。</p><p>多年来，宏 <code>std::ptr::addr_of!</code> 和 <code>std::ptr::addr_of_mut!</code> 一直服务于这个目的。现在是为这个操作提供适当原生语法的时候了：<code>addr_of!(expr)</code> 变成了 <code>&amp;raw const expr</code>，而 <code>addr_of_mut!(expr)</code> 变成了 <code>&amp;raw mut expr</code>。例如：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">#[repr(packed)]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Packed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    not_aligned_field</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">i32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> p</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> Packed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">not_aligned_field</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1_82</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // This would be undefined behavior!</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // It is rejected by the compiler.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // let ptr = &amp;p.not_aligned_field as *const i32;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // This is the old way of creating a pointer.</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ptr</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">ptr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addr_of!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.not_aligned_field);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // This is the new way.</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ptr</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">raw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.not_aligned_field;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Accessing the pointer has not changed.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Note that \`val = *ptr\` would be undefined behavior because</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // the pointer is not aligned!</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> val</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> unsafe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ptr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">read_unaligned</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原生语法更加清晰地将表达式解释为<a href="https://www.ralfj.de/blog/2024/08/14/places.html" target="_blank" rel="noopener noreferrer">位置表达式(place expressions)</a>。它还避免了在提到创建指针的操作时使用“取地址”的术语。指针<a href="https://rust-lang.github.io/rfcs/3559-rust-has-provenance.html" target="_blank" rel="noopener noreferrer">不仅仅是地址</a>，因此 Rust 正在摆脱诸如“取地址”之类的<strong>强化了指针和地址之间的错误等价关系</strong>术语。</p><h2 id="unsafe-extern-里的-safe-部分" tabindex="-1"><a class="header-anchor" href="#unsafe-extern-里的-safe-部分"><span><code>unsafe extern</code> 里的 <code>safe</code> 部分</span></a></h2><p>Rust 代码可以使用来自外部代码的函数和静态变量。这些外部项的类型签名在 <code>extern</code> 块中提供。历史上，<code>extern</code> 块中的所有项在调用时都是不安全的，但我们不需要在 <code>extern</code> 块本身上写 <code>unsafe</code>。</p><p>然而，如果 <code>extern</code> 块中的签名不正确，那么使用该项将导致未定义行为。这是编写 <code>extern</code> 块的人的错误，还是使用该项的人的错误？</p><p>我们决定，编写 <code>extern</code> 块的人有责任确保其中包含的所有签名都是正确的，因此我们现在允许编写 <code>unsafe extern</code>：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">unsafe</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extern</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    pub</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> safe</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> TAU</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">f64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    pub</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> safe</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sqrt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">f64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">f64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    pub</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> unsafe</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> strlen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: *</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> u8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">usize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样做的一个好处是，<code>unsafe extern</code> 块中的项可以被标记为安全的调用。在上面的例子中，我们可以在不使用 <code>unsafe</code> 的情况下调用 <code>sqrt</code> 或读取 <code>TAU</code>。没有标记为 <code>safe</code> 或 <code>unsafe</code> 的项会被保守地认为是 <code>unsafe</code>。</p><p>在未来的版本中，我们将通过 lint 鼓励使用 <code>unsafe extern</code>。从 Rust 2024开始，使用 <code>unsafe extern</code> 将是必需的。</p><p>有关更多详细信息，请参阅<a href="https://github.com/rust-lang/rfcs/blob/master/text/3484-unsafe-extern-blocks.md" target="_blank" rel="noopener noreferrer">RFC 3484</a>和版本指南中的<a href="https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-extern.html" target="_blank" rel="noopener noreferrer">&quot;Unsafe extern blocks&quot;</a>章节。</p><h3 id="不安全的属性" tabindex="-1"><a class="header-anchor" href="#不安全的属性"><span>不安全的属性</span></a></h3><p>一些 Rust 属性，例如<a href="https://doc.rust-lang.org/reference/abi.html#the-no_mangle-attribute" target="_blank" rel="noopener noreferrer"><code>no_mangle</code></a>，可以在没有 <code>unsafe</code> 块的情况下<a href="https://github.com/rust-lang/rust/issues/28179" target="_blank" rel="noopener noreferrer">导致未定义行为</a>。如果是常规代码，我们会要求它们放在 <code>unsafe {}</code>块中，但到目前为止，属性还没有类似的语法。为了反映这些属性可以破坏 Rust 的安全保证，它们现在被认为是“不安全”的，应该写成如下形式：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">#[</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">unsafe</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">(no_mangle)]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pub</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> my_global_function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() { }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>属性的旧形式（不带 <code>unsafe</code>）目前仍然被接受，但未来可能会被 lint 警告，并且在 Rust 2024中将成为错误。</p><p>这会影响以下属性：</p><ul><li><code>no_mangle</code></li><li><code>link_section</code></li><li><code>export_name</code></li></ul><p>有关更多详细信息，请参阅版本指南中的<a href="https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-attributes.html" target="_blank" rel="noopener noreferrer">&quot;Unsafe attributes&quot;</a>章节。</p><h2 id="省略模式匹配中的空类型" tabindex="-1"><a class="header-anchor" href="#省略模式匹配中的空类型"><span>省略模式匹配中的空类型</span></a></h2><p>现在可以省略通过值匹配空（即无法实例化的）类型的模式：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">use</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">convert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Infallible</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pub</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> unwrap_without_panic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Infallible</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;) -&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Ok</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// the \`Err\` case does not need to appear</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    x</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这适用于空类型，例如没有变体的 <code>enum Void {}</code>，或者具有可见空字段且没有 <code>#[non_exhaustive]</code> 属性的结构体和枚举。它在与 <code>!</code> 类型结合使用时也特别有用，尽管该类型目前仍不稳定。</p><p>仍然有一些情况下必须编写空模式。由于未初始化值和 unsafe 代码的原因，如果通过引用、指针或联合字段访问空类型，则不允许省略模式：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pub</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> unwrap_ref_without_panic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: &amp;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Infallible</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;) -&gt; &amp;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    match</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Ok</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) =&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 由于引用，此分支不能省略</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">infallible</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) =&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">infallible</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {},</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了避免干扰希望支持多个 Rust 版本的 crate，尽管可以删除，但带有空模式的 <code>match</code> 分支尚未报告为“不可达代码”警告。</p><h2 id="浮点数-nan-语义与-const" tabindex="-1"><a class="header-anchor" href="#浮点数-nan-语义与-const"><span>浮点数 NaN 语义与 <code>const</code></span></a></h2><p>对浮点数值（类型为 <code>f32</code> 和 <code>f64</code>）的操作以其微妙性而闻名。原因之一是存在“NaN 值”：这是“不是一个数字(not a number)”的缩写，用于表示例如 <code>0.0 / 0.0</code> 的结果。NaN 值的微妙之处在于存在多个可能的 NaN 值：NaN 值有一个符号，可以通过 <code>f.is_sign_positive()</code> 检查，它还有一个可以通过 <code>f.to_bits()</code> 提取的“有效载荷”——然而，这两者都被 <code>==</code> 完全忽略（在 NaN 上总是返回 <code>false</code>）。尽管在硬件架构之间标准化浮点操作的行为取得了非常成功的努力，但何时 NaN 是正数或负数以及其确切有效载荷的细节在不同架构之间有所不同。更复杂的是，Rust 及其 LLVM 后端在保证数值结果不变的情况下对浮点操作进行优化，但这些优化可以改变产生的 NaN 值。例如，<code>f * 1.0</code> 可能会优化为 <code>f</code>。然而，如果 <code>f</code> 是 NaN，这可能会改变结果的确切位模式！</p><p>在这个版本中，Rust 标准化了一套 NaN 值的行为规则。这套规则并不是完全确定的，这意味着像 <code>(0.0 / 0.0).is_sign_positive()</code> 这样的操作结果可能会根据硬件架构、优化级别和周围代码的不同而有所不同。旨在完全可移植的代码应避免使用 <code>to_bits</code>，并应使用 <code>f.signum() == 1.0</code> 而不是 <code>f.is_sign_positive()</code>。然而，这些规则经过精心选择，仍然允许在 Rust 代码中实现高级数据表示技术，如 <em>NaN boxing</em>。有关确切规则的更多细节，请查看我们的<a href="https://doc.rust-lang.org/std/primitive.f32.html#nan-bit-patterns" target="_blank" rel="noopener noreferrer">文档</a>。</p><p>随着 NaN 值的语义确定，此版本还允许在 <code>const fn</code> 中使用浮点数操作。由于上述原因，像 <code>(0.0 / 0.0).is_sign_positive()</code> 这样的操作在编译时和运行时可能会产生不同的结果；这不是一个错误，代码不能依赖 <code>const fn</code> 总是产生完全相同的结果。</p><h2 id="常量作为汇编立即数" tabindex="-1"><a class="header-anchor" href="#常量作为汇编立即数"><span>常量作为汇编立即数</span></a></h2><p><code>const</code> 汇编操作数现在提供了一种使用整数作为立即数的方法，而无需先将它们存储在寄存器中。例如，我们手动实现一个 <a href="https://man7.org/linux/man-pages/man2/write.2.html" target="_blank" rel="noopener noreferrer"><code>write</code></a> 系统调用：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> WRITE_SYSCALL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">c_int</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0x01</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 系统调用 1 是 \`write\`</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> STDOUT_HANDLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">c_int</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0x01</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// \`stdout\` 的文件句柄是 1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> MSG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: &amp;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello, world!</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> written</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">usize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 签名: \`ssize_t write(int fd, const void buf[], size_t count)\`</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">unsafe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    core</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">arch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">asm!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;mov rax, {SYSCALL} // rax 保存系统调用号&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;mov rdi, {OUTPUT}  // rdi 是 \`fd\` (第一个参数)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;mov rdx, {LEN}     // rdx 是 \`count\` (第三个参数)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;syscall            // 调用系统调用&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;mov {written}, rax // 保存返回值&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        SYSCALL</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> WRITE_SYSCALL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        OUTPUT</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> STDOUT_HANDLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        LEN</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> MSG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;rsi&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">MSG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">as_ptr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// rsi 是 \`buf *\` (第二个参数)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        written</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">written</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    );</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">assert_eq!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">written</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">MSG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出:</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Hello, world!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=0cf8e21335b38011b49156c6c65929bc" target="_blank" rel="noopener noreferrer">Playground 链接</a>.</p><p>在上面的代码中，<code>LEN = const MSG.len()</code> 这样的语句将格式说明符 <code>LEN</code> 填充为一个立即数，其值为 <code>MSG.len()</code>。这可以在生成的汇编代码中看到（值为 <code>14</code>）：</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">lea</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     rsi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rip</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + .L__unnamed_3]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     rax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">1</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # rax 保存系统调用号</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     rdi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">1</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # rdi 是 \`fd\` (第一个参数)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     rdx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">14</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   # rdx 是 \`count\` (第三个参数)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">syscall</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 调用系统调用</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     rax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rax</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 保存返回值</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多详情请参见 <a href="https://doc.rust-lang.org/reference/inline-assembly.html" target="_blank" rel="noopener noreferrer">参考文档</a>。</p><h2 id="安全地访问不安全的-static" tabindex="-1"><a class="header-anchor" href="#安全地访问不安全的-static"><span>安全地访问不安全的 <code>static</code></span></a></h2><p>现在允许以下代码：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> mut</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> STATIC_MUT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Type</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> Type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">extern</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;C&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    static</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> EXTERN_STATIC</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> static_mut_ptr</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">raw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> mut</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> STATIC_MUT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> extern_static_ptr</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">raw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> EXTERN_STATIC</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在表达式上下文中，<code>STATIC_MUT</code> 和 <code>EXTERN_STATIC</code> 是 <a href="https://doc.rust-lang.org/reference/expressions.html#place-expressions-and-value-expressions" target="_blank" rel="noopener noreferrer">位置表达式</a>。以前，编译器的安全检查不知道原始引用操作符实际上并不影响操作数的位置，将其视为可能对指针进行读或写。然而，实际上它只是创建了一个指针，并没有不安全的行为。</p><p>放宽这一限制可能会导致一些不安全的块现在被报告为未使用，如果你拒绝 <code>unused_unsafe</code> 提示，但它们现在只在旧版本中才有用。如果你想支持多个版本的 Rust，可以在这些不安全的块上添加 <code>#[allow(unused_unsafe)]</code> 注解，如下例所示：</p><div class="language-diff line-numbers-mode" data-highlighter="shiki" data-ext="diff" data-title="diff" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> static mut STATIC_MUT: Type = Type::new();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fn main() {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">+    #[allow(unused_unsafe)]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     let static_mut_ptr = unsafe { std::ptr::addr_of_mut!(STATIC_MUT) };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>未来的 Rust 版本预计会将此功能推广到其他在此位置安全的表达式，而不仅仅是静态变量。</p><h2 id="others" tabindex="-1"><a class="header-anchor" href="#others"><span>Others</span></a></h2><p>其它更新细节，和稳定的 API 列表，参考<a href="https://blog.rust-lang.org/2024/10/17/Rust-1.82.0.html#stabilized-apis" target="_blank" rel="noopener noreferrer">原Blog</a></p>`,82)]))}const k=i(t,[["render",l],["__file","1.82.html.vue"]]),r=JSON.parse('{"path":"/src/appendix/rust-versions/1.82.html","title":"Rust 新版解读 | 1.82 | 超大更新","lang":"zh-CN","frontmatter":{"description":"Rust 新版解读 | 1.82 | 超大更新 Rust 1.82 官方 release doc: Announcing Rust 1.82.0 | Rust Blog 通过 rustup 安装的同学可以使用以下命令升级到 1.82 版本: cargo info 命令 Cargo 现在有一个 info 子命令，用于显示注册表中包的信息，满足了长期以来的...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/src/appendix/rust-versions/1.82.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"Rust 新版解读 | 1.82 | 超大更新"}],["meta",{"property":"og:description","content":"Rust 新版解读 | 1.82 | 超大更新 Rust 1.82 官方 release doc: Announcing Rust 1.82.0 | Rust Blog 通过 rustup 安装的同学可以使用以下命令升级到 1.82 版本: cargo info 命令 Cargo 现在有一个 info 子命令，用于显示注册表中包的信息，满足了长期以来的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-20T14:07:43.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-20T14:07:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust 新版解读 | 1.82 | 超大更新\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-20T14:07:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{"createdTime":1745158063000,"updatedTime":1745158063000,"contributors":[{"name":"Linc","username":"Linc","email":"762699299@qq.com","commits":1,"url":"https://github.com/Linc"}]},"readingTime":{"minutes":12.92,"words":3876},"filePathRelative":"src/appendix/rust-versions/1.82.md","localizedDate":"2025年4月20日","excerpt":"\\n<blockquote>\\n<p>Rust 1.82 官方 release doc: <a href=\\"https://blog.rust-lang.org/2024/09/05/Rust-1.82.0.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Announcing Rust 1.82.0 | Rust Blog</a></p>\\n</blockquote>\\n<p>通过 <a href=\\"https://www.rust-lang.org/tools/install\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">rustup</a> 安装的同学可以使用以下命令升级到 1.82 版本:</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"src/SUMMARY.html"}],"localMap":{"nodes":[{"id":"src/appendix/rust-versions/1.82.md","value":{"title":"1.82","path":"src/appendix/rust-versions/1.82.md","outlink":[],"backlink":["src/SUMMARY.md"]}},{"id":"src/SUMMARY.md","value":{"title":"SUMMARY","path":"src/SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"src/SUMMARY.md","target":"src/appendix/rust-versions/1.82.md"}]}}}');export{k as comp,r as data};
