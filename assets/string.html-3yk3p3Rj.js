import{_ as i,e as t,k as e,o as a}from"./app-EdzFxLY3.js";const n={};function r(l,s){return a(),t("div",null,s[0]||(s[0]=[e(`<h1 id="疯狂字符串" tabindex="-1"><a class="header-anchor" href="#疯狂字符串"><span>疯狂字符串</span></a></h1><p>字符串让人疯狂，这句话用在 Rust 中一点都不夸张，不信？那你能否清晰的说出 <code>String</code>、<code>str</code>、<code>&amp;str</code>、<code>&amp;String</code>、<code>Box&lt;str&gt;</code> 或 <code>Box&lt;&amp;str&gt;</code> 的区别？</p><p>Rust 语言的类型可以大致分为两种：基本类型和标准库类型，前者是由语言特性直接提供的，而后者是在标准库中定义。即将登场的 <code>str</code> 类型就是唯一定义在语言特性中的字符串。</p><blockquote><p>在继续之前，大家需要先了解字符串的<a href="https://course.rs/basic/compound-type/string-slice.html" target="_blank" rel="noopener noreferrer">基本知识</a>，本文主要在于概念对比，而不是字符串讲解</p></blockquote><h2 id="str" tabindex="-1"><a class="header-anchor" href="#str"><span>str</span></a></h2><p>如上所述，<code>str</code> 是唯一定义在 Rust 语言特性中的字符串，但是也是我们几乎不会用到的字符串类型，为何？</p><p>原因在于 <code>str</code> 字符串它是 <a href="https://course.rs/advance/into-types/sized.html#%E5%8A%A8%E6%80%81%E5%A4%A7%E5%B0%8F%E7%B1%BB%E5%9E%8B-dst" target="_blank" rel="noopener noreferrer"><code>DST</code> 动态大小类型</a>，这意味着编译器无法在编译期知道 <code>str</code> 类型的大小，只有到了运行期才能动态获知，这对于强类型、强安全的 Rust 语言来说是不可接受的。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;banana&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面代码创建一个 <code>str</code> 类型的字符串，看起来很正常，但是编译就会报错：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">error[E0277]:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> size</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> for</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> values</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> of</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">str</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> cannot</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> be</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> known</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> at</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> compilation</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> time</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> --</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">src/main.rs:4:9</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  |</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> |     </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">let</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> string:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> str</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;banana&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  |         </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">^^^^^^</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> doesn&#39;t have a size known at compile-time</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果追求更深层的原因，我们可以总结如下：<strong>所有的切片都是动态类型，它们都无法直接被使用，而 <code>str</code> 就是字符串切片，<code>[u8]</code> 是数组切片。</strong></p><p>同时还是 String 和 &amp;str 的底层数据类型。 由于 str 是动态</p><p><code>str</code> 类型是硬编码进可执行文件，也无法被修改，但是 <code>String</code> 则是一个可增长、可改变且具有所有权的 UTF-8 编码字符串，<strong>当 Rust 用户提到字符串时，往往指的就是 <code>String</code> 类型和 <code>&amp;str</code> 字符串切片类型，这两个类型都是 UTF-8 编码</strong>。</p><p>除了 <code>String</code> 类型的字符串，Rust 的标准库还提供了其他类型的字符串，例如 <code>OsString</code>， <code>OsStr</code>， <code>CsString</code> 和<code> CsStr</code> 等，注意到这些名字都以 <code>String</code> 或者 <code>Str</code> 结尾了吗？它们分别对应的是具有所有权和被借用的变量。</p><p><strong>未完待续</strong></p><p>https://pic1.zhimg.com/80/v2-177bce575bfaf289ae12d677689a26f4_1440w.png<br> https://pic2.zhimg.com/80/v2-697ad53cb502ccec4b2e98c40975344f_1440w.png</p><p>https://medium.com/@alisomay/strings-in-rust-28c08a2d3130</p>`,17)]))}const h=i(n,[["render",r],["__file","string.html.vue"]]),p=JSON.parse('{"path":"/difficulties/string.html","title":"疯狂字符串","lang":"zh-CN","frontmatter":{"description":"疯狂字符串 字符串让人疯狂，这句话用在 Rust 中一点都不夸张，不信？那你能否清晰的说出 String、str、&str、&String、Box<str> 或 Box<&str> 的区别？ Rust 语言的类型可以大致分为两种：基本类型和标准库类型，前者是由语言特性直接提供的，而后者是在标准库中定义。即将登场的 str 类型就是唯一定义在语言特性中的...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/difficulties/string.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"疯狂字符串"}],["meta",{"property":"og:description","content":"疯狂字符串 字符串让人疯狂，这句话用在 Rust 中一点都不夸张，不信？那你能否清晰的说出 String、str、&str、&String、Box<str> 或 Box<&str> 的区别？ Rust 语言的类型可以大致分为两种：基本类型和标准库类型，前者是由语言特性直接提供的，而后者是在标准库中定义。即将登场的 str 类型就是唯一定义在语言特性中的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"疯狂字符串\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.99,"words":598},"filePathRelative":"difficulties/string.md","excerpt":"\\n<p>字符串让人疯狂，这句话用在 Rust 中一点都不夸张，不信？那你能否清晰的说出 <code>String</code>、<code>str</code>、<code>&amp;str</code>、<code>&amp;String</code>、<code>Box&lt;str&gt;</code> 或 <code>Box&lt;&amp;str&gt;</code> 的区别？</p>\\n<p>Rust 语言的类型可以大致分为两种：基本类型和标准库类型，前者是由语言特性直接提供的，而后者是在标准库中定义。即将登场的 <code>str</code> 类型就是唯一定义在语言特性中的字符串。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"difficulties/string.md","value":{"title":"string","path":"difficulties/string.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"difficulties/string.md"}]}}}');export{h as comp,p as data};
