import{_ as e,e as t,k as c,o as a}from"./app-Ca5AIWu9.js";const r={};function n(i,o){return a(),t("div",null,o[0]||(o[0]=[c('<h1 id="tokio-概览" tabindex="-1"><a class="header-anchor" href="#tokio-概览"><span>tokio 概览</span></a></h1><p>对于 Async Rust，最最重要的莫过于底层的异步运行时，它提供了执行器、任务调度、异步 API 等核心服务。简单来说，使用 Rust 提供的 <code>async/await</code> 特性编写的异步代码要运行起来，就必须依赖于异步运行时，否则这些代码将毫无用处。</p><h2 id="异步运行时" tabindex="-1"><a class="header-anchor" href="#异步运行时"><span>异步运行时</span></a></h2><p>Rust 语言本身只提供了异步编程所需的基本特性，例如 <code>async/await</code> 关键字，标准库中的 <code>Future</code> 特征，官方提供的 <code>futures</code> 实用库，这些特性单独使用没有任何用处，因此我们需要一个运行时来将这些特性实现的代码运行起来。</p><p>异步运行时是由 Rust 社区提供的，它们的核心是一个 <code>reactor</code> 和一个或多个 <code>executor</code>(执行器):</p><ul><li><code>reactor</code> 用于提供外部事件的订阅机制，例如 <code>I/O</code> 、进程间通信、定时器等</li><li><code>executor</code> 在上一章我们有过深入介绍，它用于调度和执行相应的任务( <code>Future</code> )</li></ul><p>目前最受欢迎的几个运行时有:</p><ul><li><a href="https://github.com/tokio-rs/tokio" target="_blank" rel="noopener noreferrer"><code>tokio</code></a>，目前最受欢迎的异步运行时，功能强大，还提供了异步所需的各种工具(例如 tracing )、网络协议框架(例如 HTTP，gRPC )等等</li><li><a href="https://github.com/async-rs/async-std" target="_blank" rel="noopener noreferrer"><code>async-std</code></a>，最大的优点就是跟标准库兼容性较强</li><li><a href="https://github.com/smol-rs/smol" target="_blank" rel="noopener noreferrer"><code>smol</code></a>, 一个小巧的异步运行时</li></ul><p>但是，大浪淘沙，留下的才是金子，随着时间的流逝，<code>tokio</code>越来越亮眼，无论是性能、功能还是社区、文档，它在各个方面都异常优秀，时至今日，可以说已成为事实上的标准。</p><h4 id="异步运行时的兼容性" tabindex="-1"><a class="header-anchor" href="#异步运行时的兼容性"><span>异步运行时的兼容性</span></a></h4><p>为何选择异步运行时这么重要？不仅仅是它们在功能、性能上存在区别，更重要的是当你选择了一个，往往就无法切换到另外一个，除非异步代码很少。</p><p>使用异步运行时，往往伴随着对它相关的生态系统的深入使用，因此耦合性会越来越强，直至最后你很难切换到另一个运行时，例如 <code>tokio</code> 和 <code>async-std</code> ，就存在这种问题。</p><p>如果你实在有这种需求，可以考虑使用 <a href="https://github.com/smol-rs/async-compat" target="_blank" rel="noopener noreferrer"><code>async-compat</code></a>，该包提供了一个中间层，用于兼容 <code>tokio</code> 和其它运行时。</p><h4 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h4><p>相信大家看到现在，心中应该有一个结论了。首先，运行时之间的不兼容性，让我们必须提前选择一个运行时，并且在未来坚持用下去，那这个运行时就应该是最优秀、最成熟的那个，<code>tokio</code> 几乎成了不二选择，当然 <code>tokio</code> 也有自己的问题：更难上手和运行时之间的兼容性。</p><p>如果你只用 <code>tokio</code> ，那兼容性自然不是问题，至于难以上手，Rust 这么难，我们都学到现在了，何况区区一个异步运行时，在本书的帮助下，这些都不再是问题：）</p><h2 id="tokio-简介" tabindex="-1"><a class="header-anchor" href="#tokio-简介"><span>tokio 简介</span></a></h2><p>tokio 是一个纸醉金迷之地，只要有钱就可以为所欲为，哦，抱歉，走错片场了。<code>tokio</code> 是 Rust 最优秀的异步运行时框架，它提供了写异步网络服务所需的几乎所有功能，不仅仅适用于大型服务器，还适用于小型嵌入式设备，它主要由以下组件构成：</p><ul><li>多线程版本的异步运行时，可以运行使用 <code>async/await</code> 编写的代码</li><li>标准库中阻塞 API 的异步版本，例如<code>thread::sleep</code>会阻塞当前线程，<code>tokio</code>中就提供了相应的异步实现版本</li><li>构建异步编程所需的生态，甚至还提供了 <a href="https://github.com/tokio-rs/tracing" target="_blank" rel="noopener noreferrer"><code>tracing</code></a> 用于日志和分布式追踪， 提供 <a href="https://github.com/tokio-rs/console" target="_blank" rel="noopener noreferrer"><code>console</code></a> 用于 Debug 异步编程</li></ul><h3 id="优势" tabindex="-1"><a class="header-anchor" href="#优势"><span>优势</span></a></h3><p>下面一起来看看使用 <code>tokio</code> 能给你提供哪些优势。</p><p><strong>高性能</strong></p><p>因为快所以快，前者是 Rust 快，后者是 <code>tokio</code> 快。 <code>tokio</code> 在编写时充分利用了 Rust 提供的各种零成本抽象和高性能特性，而且贯彻了 Rust 的牛逼思想：如果你选择手写代码，那么最好的结果就是跟 <code>tokio</code> 一样快！</p><p>以下是一张官方提供的性能参考图，大致能体现出 <code>tokio</code> 的性能之恐怖:<br><img alt="tokio performance" src="https://pica.zhimg.com/80/v2-5f5ca10550ec936427c2919191331ae8_1440w.png" class="center"></p><p><strong>高可靠</strong></p><p>Rust 语言的安全可靠性顺理成章的影响了 <code>tokio</code> 的可靠性，曾经有一个调查给出了令人乍舌的<a href="https://www.zdnet.com/article/microsoft-70-percent-of-all-security-bugs-are-memory-safety-issues/" target="_blank" rel="noopener noreferrer">结论</a>：软件系统 70%的高危漏洞都是由内存不安全性导致的。</p><p>在 Rust 提供的安全性之外，<code>tokio</code> 还致力于提供一致性的行为表现：无论你何时运行系统，它的预期表现和性能都是一致的，例如不会出现莫名其妙的请求延迟或响应时间大幅增加。</p><p><strong>简单易用</strong></p><p>通过 Rust 提供的 <code>async/await</code> 特性，编写异步程序的复杂性相比当初已经大幅降低，同时 <code>tokio</code> 还为我们提供了丰富的生态，进一步大幅降低了其复杂性。</p><p>同时 <code>tokio</code> 遵循了标准库的命名规则，让熟悉标准库的用户可以很快习惯于 <code>tokio</code> 的语法，再借助于 Rust 强大的类型系统，用户可以轻松地编写和交付正确的代码。</p><p><strong>使用灵活性</strong></p><p><code>tokio</code> 支持你灵活的定制自己想要的运行时，例如你可以选择多线程 + 任务盗取模式的复杂运行时，也可以选择单线程的轻量级运行时。总之，几乎你的每一种需求在 <code>tokio</code> 中都能寻找到支持(画外音：强大的灵活性需要一定的复杂性来换取，并不是免费的午餐)。</p><h3 id="劣势" tabindex="-1"><a class="header-anchor" href="#劣势"><span>劣势</span></a></h3><p>虽然 <code>tokio</code> 对于大多数需要并发的项目都是非常适合的，但是确实有一些场景它并不适合使用:</p><ul><li><strong>并行运行 CPU 密集型的任务</strong>。<code>tokio</code> 非常适合于 IO 密集型任务，这些 IO 任务的绝大多数时间都用于阻塞等待 IO 的结果，而不是刷刷刷的单烤 CPU。如果你的应用是 CPU 密集型(例如并行计算)，建议使用 <a href="https://github.com/rayon-rs/rayon" target="_blank" rel="noopener noreferrer"><code>rayon</code></a>，当然，对于其中的 IO 任务部分，你依然可以混用 <code>tokio</code></li><li><strong>读取大量的文件</strong>。读取文件的瓶颈主要在于操作系统，因为 OS 没有提供异步文件读取接口，大量的并发并不会提升文件读取的并行性能，反而可能会造成不可忽视的性能损耗，因此建议使用线程(或线程池)的方式</li><li><strong>发送少量 HTTP 请求</strong>。<code>tokio</code> 的优势是给予你并发处理大量任务的能力，对于这种轻量级 HTTP 请求场景，<code>tokio</code> 除了增加你的代码复杂性，并无法带来什么额外的优势。因此，对于这种场景，你可以使用 <a href="https://github.com/seanmonstar/reqwest" target="_blank" rel="noopener noreferrer"><code>reqwest</code></a> 库，它会更加简单易用。</li></ul><blockquote><p>若大家使用 tokio，那 CPU 密集的任务尤其需要用线程的方式去处理，例如使用 <code>spawn_blocking</code> 创建一个阻塞的线程去完成相应 CPU 密集任务。</p><p>原因是：tokio 是协作式的调度器，如果某个 CPU 密集的异步任务是通过 tokio 创建的，那理论上来说，该异步任务需要跟其它的异步任务交错执行，最终大家都得到了执行，皆大欢喜。但实际情况是，CPU 密集的任务很可能会一直霸着着 CPU，此时 tokio 的调度方式决定了该任务会一直被执行，这意味着，其它的异步任务无法得到执行的机会，最终这些任务都会因为得不到资源而饿死。</p><p>而使用 <code>spawn_blocking</code> 后，会创建一个单独的 OS 线程，该线程并不会被 tokio 所调度( 被 OS 所调度 )，因此它所执行的 CPU 密集任务也不会导致 tokio 调度的那些异步任务被饿死</p></blockquote><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>离开第三方开源社区提供的异步运行时， <code>async/await</code> 什么都不是，甚至还不如一堆破铜烂铁，除非你选择根据自己的需求手撸一个。</p><p>而 <code>tokio</code> 就是那颗皇冠上的夜明珠，也是值得我们投入时间去深入学习的开源库，它的设计原理和代码实现都异常优秀，在之后的章节中，我们将对其进行深入学习和剖析，敬请期待。</p>',39)]))}const s=e(r,[["render",n],["__file","overview.html.vue"]]),p=JSON.parse('{"path":"/advance-practice/overview.html","title":"tokio 概览","lang":"zh-CN","frontmatter":{"description":"tokio 概览 对于 Async Rust，最最重要的莫过于底层的异步运行时，它提供了执行器、任务调度、异步 API 等核心服务。简单来说，使用 Rust 提供的 async/await 特性编写的异步代码要运行起来，就必须依赖于异步运行时，否则这些代码将毫无用处。 异步运行时 Rust 语言本身只提供了异步编程所需的基本特性，例如 async/aw...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/advance-practice/overview.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"tokio 概览"}],["meta",{"property":"og:description","content":"tokio 概览 对于 Async Rust，最最重要的莫过于底层的异步运行时，它提供了执行器、任务调度、异步 API 等核心服务。简单来说，使用 Rust 提供的 async/await 特性编写的异步代码要运行起来，就必须依赖于异步运行时，否则这些代码将毫无用处。 异步运行时 Rust 语言本身只提供了异步编程所需的基本特性，例如 async/aw..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"tokio 概览\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{},"readingTime":{"minutes":7.32,"words":2195},"filePathRelative":"advance-practice/overview.md","excerpt":"\\n<p>对于 Async Rust，最最重要的莫过于底层的异步运行时，它提供了执行器、任务调度、异步 API 等核心服务。简单来说，使用 Rust 提供的 <code>async/await</code> 特性编写的异步代码要运行起来，就必须依赖于异步运行时，否则这些代码将毫无用处。</p>\\n<h2>异步运行时</h2>\\n<p>Rust 语言本身只提供了异步编程所需的基本特性，例如 <code>async/await</code> 关键字，标准库中的 <code>Future</code> 特征，官方提供的 <code>futures</code> 实用库，这些特性单独使用没有任何用处，因此我们需要一个运行时来将这些特性实现的代码运行起来。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"advance-practice/overview.md","value":{"title":"overview","path":"advance-practice/overview.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"advance-practice/overview.md"}]}}}');export{s as comp,p as data};
