import{_ as s,e as a,f as e,o as n}from"./app-BSEs7fAb.js";const l={};function t(h,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="添加依赖" tabindex="-1"><a class="header-anchor" href="#添加依赖"><span>添加依赖</span></a></h1><p><a href="https://crates.io" target="_blank" rel="noopener noreferrer"><code>crates.io</code></a> 是 Rust 社区维护的中心化注册服务，用户可以在其中寻找和下载所需的包。对于 <code>cargo</code> 来说，默认就是从这里下载依赖。</p><p>下面我们来添加一个 <code>time</code> 依赖包，若你的 <code>Cargo.toml</code> 文件中没有 <code>[dependencies]</code> 部分，就手动添加一个，并添加目标包名和版本号:</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.1.12&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到我们指定了 <code>time</code> 包的版本号 &quot;0.1.12&quot;，关于版本号，实际上还有其它的指定方式，具体参见<a href="https://course.rs/cargo/reference/specify-deps.html" target="_blank" rel="noopener noreferrer">指定依赖项</a>章节。</p><p>如果想继续添加 <code>regexp</code> 包，只需在 <code>time</code> 包后面添加即可 :</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello_world&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.1.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">edition</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;2021&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.1.12&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">regex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.1.41&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，再通过运行 <code>cargo build</code> 来重新构建，首先 <code>Cargo</code> 会获取新的依赖以及依赖的依赖, 接着对它们进行编译并更新 <code>Cargo.lock</code>:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      Updating</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> crates.io</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> index</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   Downloading</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> memchr</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v0.1.5</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   Downloading</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> libc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v0.1.10</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   Downloading</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> regex-syntax</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v0.2.1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   Downloading</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> memchr</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v0.1.5</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   Downloading</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> aho-corasick</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v0.3.0</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   Downloading</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> regex</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v0.1.41</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     Compiling</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> memchr</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v0.1.5</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     Compiling</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> libc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v0.1.10</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     Compiling</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> regex-syntax</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v0.2.1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     Compiling</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> memchr</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v0.1.5</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     Compiling</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> aho-corasick</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v0.3.0</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     Compiling</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> regex</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v0.1.41</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     Compiling</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello_world</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v0.1.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (file:///path/to/package/hello_world)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>Cargo.lock</code> 中包含了我们项目使用的所有依赖的准确版本信息。这个非常重要，未来就算 <code>regexp</code> 的作者升级了该包，我们依然会下载 <code>Cargo.lock</code> 中的版本，而不是最新的版本，只有这样，才能保证项目依赖包不会莫名其妙的因为更新升级导致无法编译。 当然，你还可以使用 <code>cargo update</code> 来手动更新包的版本。</p><p>此时，就可以在 <code>src/main.rs</code> 中使用新引入的 <code>regexp</code> 包:</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">use</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> regex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Regex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> re</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> Regex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">r&quot;^\\d{4}-\\d{2}-\\d{2}$&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">unwrap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Did our date match? {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">re</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">is_match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;2014-01-01&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后输出:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   Running</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">target/hello_world</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Did</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> our</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> date</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> match?</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14)]))}const k=s(l,[["render",t],["__file","dependencies.html.vue"]]),d=JSON.parse('{"path":"/src/cargo/guide/dependencies.html","title":"添加依赖","lang":"zh-CN","frontmatter":{"description":"添加依赖 crates.io 是 Rust 社区维护的中心化注册服务，用户可以在其中寻找和下载所需的包。对于 cargo 来说，默认就是从这里下载依赖。 下面我们来添加一个 time 依赖包，若你的 Cargo.toml 文件中没有 [dependencies] 部分，就手动添加一个，并添加目标包名和版本号: 可以看到我们指定了 time 包的版本号 ...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/src/cargo/guide/dependencies.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"添加依赖"}],["meta",{"property":"og:description","content":"添加依赖 crates.io 是 Rust 社区维护的中心化注册服务，用户可以在其中寻找和下载所需的包。对于 cargo 来说，默认就是从这里下载依赖。 下面我们来添加一个 time 依赖包，若你的 Cargo.toml 文件中没有 [dependencies] 部分，就手动添加一个，并添加目标包名和版本号: 可以看到我们指定了 time 包的版本号 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-20T14:07:43.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-20T14:07:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"添加依赖\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-20T14:07:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{"createdTime":1745158063000,"updatedTime":1745158063000,"contributors":[{"name":"Linc","username":"Linc","email":"762699299@qq.com","commits":1,"url":"https://github.com/Linc"}]},"readingTime":{"minutes":1.49,"words":447},"filePathRelative":"src/cargo/guide/dependencies.md","localizedDate":"2025年4月20日","excerpt":"\\n<p><a href=\\"https://crates.io\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>crates.io</code></a> 是 Rust 社区维护的中心化注册服务，用户可以在其中寻找和下载所需的包。对于 <code>cargo</code> 来说，默认就是从这里下载依赖。</p>\\n<p>下面我们来添加一个 <code>time</code> 依赖包，若你的 <code>Cargo.toml</code> 文件中没有 <code>[dependencies]</code> 部分，就手动添加一个，并添加目标包名和版本号:</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"src/SUMMARY.html"}],"localMap":{"nodes":[{"id":"src/cargo/guide/dependencies.md","value":{"title":"dependencies","path":"src/cargo/guide/dependencies.md","outlink":[],"backlink":["src/SUMMARY.md"]}},{"id":"src/SUMMARY.md","value":{"title":"SUMMARY","path":"src/SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"src/SUMMARY.md","target":"src/cargo/guide/dependencies.md"}]}}}');export{k as comp,d as data};
