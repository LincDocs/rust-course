import{_ as i,e as a,k as e,o as n}from"./app-D8oqi0-Y.js";const t={};function l(h,s){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="cargo-target" tabindex="-1"><a class="header-anchor" href="#cargo-target"><span>Cargo Target</span></a></h1><p><strong>Cargo 项目中包含有一些对象，它们包含的源代码文件可以被编译成相应的包，这些对象被称之为 Cargo Target</strong>。例如<a href="https://course.rs/cargo/guide/package-layout.html" target="_blank" rel="noopener noreferrer">之前章节</a>提到的库对象 <code>Library</code> 、二进制对象 <code>Binary</code>、示例对象 <code>Examples</code>、测试对象 <code>Tests</code> 和 基准性能对象 <code>Benches</code> 都是 Cargo Target。</p><p>本章节我们一起来看看该如何在 <code>Cargo.toml</code> 清单中配置这些对象，当然，大部分时候都无需手动配置，因为默认的配置通常由项目目录的布局自动推断出来。</p><h2 id="对象介绍" tabindex="-1"><a class="header-anchor" href="#对象介绍"><span>对象介绍</span></a></h2><p>在开始讲解如何配置对象前，我们先来看看这些对象究竟是什么，估计还有些同学对此有些迷糊 😃</p><h4 id="库对象-library" tabindex="-1"><a class="header-anchor" href="#库对象-library"><span>库对象(Library)</span></a></h4><p>库对象用于定义一个库，该库可以被其它的库或者可执行文件所链接。<strong>该对象包含的默认文件名是 <code>src/lib.rs</code>，且默认情况下，库对象的名称<a href="https://course.rs/basic/crate-module/crate.html#package" target="_blank" rel="noopener noreferrer">跟项目名是一致的</a></strong>，</p><p>一个工程只能有一个库对象，因此也只能有一个 <code>src/lib.rs</code> 文件，以下是一种自定义配置:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 一个简单的例子：在 Cargo.toml 中定制化库对象</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[lib]</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">crate-type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;cdylib&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bench</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="二进制对象-binaries" tabindex="-1"><a class="header-anchor" href="#二进制对象-binaries"><span>二进制对象(Binaries)</span></a></h4><p>二进制对象在被编译后可以生成可执行的文件，默认的文件名是 <code>src/main.rs</code>，二进制对象的名称跟项目名也是相同的。</p><p>大家应该还记得，一个项目拥有多个二进制文件，因此一个项目可以拥有多个二进制对象。当拥有多个对象时，对象的文件默认会被放在 <code>src/bin/</code> 目录下。</p><p>二进制对象可以使用库对象提供的公共 API，也可以通过 <code>[dependencies]</code> 来引入外部的依赖库。</p><p>我们可以使用 <code>cargo run --bin &lt;bin-name&gt;</code> 的方式来运行指定的二进制对象，以下是二进制对象的配置示例：</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Example of customizing binaries in Cargo.toml.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;cool-tool&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">bench</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;frobnicator&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">required-features</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;frobnicate&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="示例对象-examples" tabindex="-1"><a class="header-anchor" href="#示例对象-examples"><span>示例对象(Examples)</span></a></h4><p>示例对象的文件在根目录下的 <code>examples</code> 目录中。既然是示例，自然是使用项目中的库对象的功能进行演示。示例对象编译后的文件会存储在 <code>target/debug/examples</code> 目录下。</p><p>如上所示，示例对象可以使用库对象的公共 API，也可以通过 <code>[dependencies]</code> 来引入外部的依赖库。</p><p>默认情况下，示例对象都是可执行的二进制文件( 带有 <code>fn main()</code> 函数入口)，毕竟例子是用来测试和演示我们的库对象，是用来运行的。而你完全可以将示例对象改成库的类型:</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">example</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;foo&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">crate-type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;staticlib&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想要指定运行某个示例对象，可以使用 <code>cargo run --example &lt;example-name&gt;</code> 命令。如果是库类型的示例对象，则可以使用 <code>cargo build --example &lt;example-name&gt;</code> 进行构建。</p><p>与此类似，还可以使用 <code>cargo install --example &lt;example-name&gt;</code> 来将示例对象编译出的可执行文件安装到默认的目录中，将该目录添加到 <code>$PATH</code> 环境变量中，就可以直接全局运行安装的可执行文件。</p><p>最后，<code>cargo test</code> 命令默认会对示例对象进行编译，以防止示例代码因为长久没运行，导致严重过期以至于无法运行。</p><h4 id="测试对象-tests" tabindex="-1"><a class="header-anchor" href="#测试对象-tests"><span>测试对象(Tests)</span></a></h4><p>测试对象的文件位于根目录下的 <code>tests</code> 目录中，如果大家还有印象的话，就知道该目录是<a href="https://course.rs/test/unit-integration-test.html#%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95" target="_blank" rel="noopener noreferrer">集成测试</a>所使用的。</p><p>当运行 <code>cargo test</code> 时，里面的每个文件都会被编译成独立的包，然后被执行。</p><p>测试对象可以使用库对象提供的公共 API，也可以通过 <code>[dependencies]</code> 来引入外部的依赖库。</p><h4 id="基准性能对象-benches" tabindex="-1"><a class="header-anchor" href="#基准性能对象-benches"><span>基准性能对象(Benches)</span></a></h4><p>该对象的文件位于 <code>benches</code> 目录下，可以通过 <code>cargo bench</code> 命令来运行，关于基准测试，可以通过<a href="https://course.rs/test/benchmark.html" target="_blank" rel="noopener noreferrer">这篇文章</a>了解更多。</p><h2 id="配置一个对象" tabindex="-1"><a class="header-anchor" href="#配置一个对象"><span>配置一个对象</span></a></h2><p>我们可以通过 <code>Cargo.toml</code> 中的 <code>[lib]</code>、<code>[[bin]]</code>、<code>[[example]]</code>、<code>[[test]]</code> 和 <code>[[bench]]</code> 部分对以上对象进行配置。</p><blockquote><p>大家可能会疑惑 <code>[lib]</code> 和 <code>[[bin]]</code> 的写法为何不一致，原因是这种语法是 <code>TOML</code> 提供的<a href="https://toml.io/en/v1.0.0-rc.3#array-of-tables" target="_blank" rel="noopener noreferrer">数组特性</a>， <code>[[bin]]</code> 这种写法意味着我们可以在 Cargo.toml 中创建多个 <code>[[bin]]</code> ，每一个对应一个二进制文件</p><p>上文提到过，我们只能指定一个库对象，因此这里只能使用 <code>[lib]</code> 形式</p></blockquote><p>由于它们的配置内容都是相似的，因此我们以 <code>[lib]</code> 为例来说明相应的配置项:</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lib</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;foo&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">           # 对象名称: 库对象、\`src/main.rs\` 二进制对象的名称默认是项目名</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;src/lib.rs&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 对象的源文件路径</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            # 能否被测试，默认是 true</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">doctest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         # 文档测试是否开启，默认是 true</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">bench</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">           # 基准测试是否开启</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">doc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">             # 文档功能是否开启</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">plugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         # 是否可以用于编译器插件(deprecated).</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">proc-macro</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     # 是否是过程宏类型的库</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">harness</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         # 是否使用libtest harness : https://doc.rust-lang.org/stable/rustc/tests/index.html</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">edition</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;2015&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">       # 对象使用的 Rust Edition</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">crate-type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;lib&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 生成的包类型</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">required-features</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [] </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 构建对象所需的 Cargo Features (N/A for lib).</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="name" tabindex="-1"><a class="header-anchor" href="#name"><span>name</span></a></h4><p>对于库对象和默认的二进制对象( <code>src/main.rs </code>)，默认的名称是项目的名称( <code>package.name</code> )。</p><p>对于其它类型的对象，默认是目录或文件名。</p><p>除了 <code>[lib]</code> 外，<code>name</code> 字段对于其他对象都是必须的。</p><h4 id="proc-macro" tabindex="-1"><a class="header-anchor" href="#proc-macro"><span>proc-macro</span></a></h4><p>该字段的使用方式在<a href="https://course.rs/advance/macro.html#%E5%AE%9A%E4%B9%89%E8%BF%87%E7%A8%8B%E5%AE%8F" target="_blank" rel="noopener noreferrer">过程宏章节</a>有详细的介绍。</p><h4 id="edition" tabindex="-1"><a class="header-anchor" href="#edition"><span>edition</span></a></h4><p>对使用的 Rust Edition 版本进行设置。</p><p>如果没有设置，则默认使用 <code>[package]</code> 中配置的 <code>package.edition</code>，通常来说，这个字段不应该被单独设置，只有在一些特殊场景中才可能用到：例如将一个大型项目逐步升级为新的 edition 版本。</p><h4 id="crate-type" tabindex="-1"><a class="header-anchor" href="#crate-type"><span>crate-type</span></a></h4><p>该字段定义了对象生成的<a href="https://doc.rust-lang.org/stable/reference/linkage.html" target="_blank" rel="noopener noreferrer">包类型</a>。它是一个数组，因此为同一个对象指定多个包类型。</p><p>需要注意的是，只有库对象和示例对象可以被指定，因为其他的二进制、测试和基准测试对象只能是 <code>bin</code> 这个包类型。</p><p>默认的包类型如下:</p><table><thead><tr><th>对象</th><th>包类型</th></tr></thead><tbody><tr><td>正常的库对象</td><td>&quot;lib&quot;</td></tr><tr><td>过程宏的库对象</td><td>&quot;proc-macro&quot;</td></tr><tr><td>示例对象</td><td>&quot;bin&quot;</td></tr></tbody></table><p>可用的选项包括 <code>bin</code>、<code>lib</code>、<code>rlib</code>、<code>dylib</code>、<code>cdylib</code>、<code>staticlib</code> 和 <code>proc-macro</code> ，如果大家想了解更多，可以看下官方的<a href="https://doc.rust-lang.org/stable/reference/linkage.html" target="_blank" rel="noopener noreferrer">参考手册</a>。</p><h4 id="required-features" tabindex="-1"><a class="header-anchor" href="#required-features"><span>required-features</span></a></h4><p>该字段用于指定在构建对象时所需的 <a href="https://course.rs/cargo/reference/features.html" target="_blank" rel="noopener noreferrer"><code>features</code></a> 列表。</p><p>该字段只对 <code>[[bin]]</code>、 <code>[[bench]]</code>、 <code>[[test]]</code> 和 <code>[[example]]</code> 有效，对于 <code>[lib]</code> 没有任何效果。</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">features</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ...</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">postgres</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = []</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">sqlite</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = []</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tools</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = []</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;my-pg-tool&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">required-features</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;postgres&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;tools&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象自动发现" tabindex="-1"><a class="header-anchor" href="#对象自动发现"><span>对象自动发现</span></a></h2><p>默认情况下，<code>Cargo</code> 会基于项目的<a href="https://course.rs/cargo/guide/package-layout.html" target="_blank" rel="noopener noreferrer">目录文件布局</a>自动发现和确定对象，而之前的配置项则允许我们对其进行手动的配置修改(若项目布局跟标准的不一样时)。</p><p>而这种自动发现对象的设定可以通过以下配置来禁用:</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ...</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">autobins</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">autoexamples</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">autotests</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">autobenches</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只有在特定场景下才应该禁用自动对象发现。例如，你有一个模块想要命名为 <code>bin</code>，目录结构如下:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Cargo.toml</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">└──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> src</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> lib.rs</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    └──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bin</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        └──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mod.rs</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这在默认情况下会导致问题，因为 <code>Cargo</code> 会使用 <code>src/bin</code> 作为存放二进制对象的地方。</p><p>为了阻止这一点，可以设置 <code>autobins = false</code> :</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">├── Cargo.toml</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">└── src</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">    ├── lib.rs</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">    └── bin</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        └── mod.rs</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,62)]))}const d=i(t,[["render",l],["__file","cargo-target.html.vue"]]),p=JSON.parse('{"path":"/cargo/reference/cargo-target.html","title":"Cargo Target","lang":"zh-CN","frontmatter":{"description":"Cargo Target Cargo 项目中包含有一些对象，它们包含的源代码文件可以被编译成相应的包，这些对象被称之为 Cargo Target。例如之前章节提到的库对象 Library 、二进制对象 Binary、示例对象 Examples、测试对象 Tests 和 基准性能对象 Benches 都是 Cargo Target。 本章节我们一起来看看...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/cargo/reference/cargo-target.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"Cargo Target"}],["meta",{"property":"og:description","content":"Cargo Target Cargo 项目中包含有一些对象，它们包含的源代码文件可以被编译成相应的包，这些对象被称之为 Cargo Target。例如之前章节提到的库对象 Library 、二进制对象 Binary、示例对象 Examples、测试对象 Tests 和 基准性能对象 Benches 都是 Cargo Target。 本章节我们一起来看看..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Cargo Target\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{},"readingTime":{"minutes":6.44,"words":1932},"filePathRelative":"cargo/reference/cargo-target.md","excerpt":"\\n<p><strong>Cargo 项目中包含有一些对象，它们包含的源代码文件可以被编译成相应的包，这些对象被称之为 Cargo Target</strong>。例如<a href=\\"https://course.rs/cargo/guide/package-layout.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">之前章节</a>提到的库对象 <code>Library</code> 、二进制对象 <code>Binary</code>、示例对象 <code>Examples</code>、测试对象 <code>Tests</code> 和 基准性能对象 <code>Benches</code> 都是 Cargo Target。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"cargo/reference/cargo-target.md","value":{"title":"cargo-target","path":"cargo/reference/cargo-target.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"cargo/reference/cargo-target.md"}]}}}');export{d as comp,p as data};
