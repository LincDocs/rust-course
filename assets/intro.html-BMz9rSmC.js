import{_ as s,e as i,k as a,o as t}from"./app-D8oqi0-Y.js";const n={};function r(l,e){return t(),i("div",null,e[0]||(e[0]=[a(`<h1 id="条件编译-features" tabindex="-1"><a class="header-anchor" href="#条件编译-features"><span>条件编译 Features</span></a></h1><p><code>Cargo Feature</code> 是非常强大的机制，可以为大家提供<a href="https://doc.rust-lang.org/stable/reference/conditional-compilation.html" target="_blank" rel="noopener noreferrer">条件编译</a>和可选依赖的高级特性。</p><h2 id="features" tabindex="-1"><a class="header-anchor" href="#features"><span>[features]</span></a></h2><p><code>Feature</code> 可以通过 <code>Cargo.toml</code> 中的 <code>[features]</code> 部分来定义：其中每个 <code>feature</code> 通过列表的方式指定了它所能启用的其他 <code>feature</code> 或可选依赖。</p><p>假设我们有一个 2D 图像处理库，然后该库所支持的图片格式可以通过以下方式启用：</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">features</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 定义一个 feature : webp, 但它并没有启用其它 feature</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">webp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = []</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当定义了 <code>webp</code> 后，我们就可以在代码中通过 <a href="https://doc.rust-lang.org/stable/reference/conditional-compilation.html" target="_blank" rel="noopener noreferrer"><code>cfg</code> 表达式</a>来进行条件编译。例如项目中的 <code>lib.rs</code> 可以使用以下代码对 <code>webp</code> 模块进行条件引入:</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#[cfg(feature = &quot;webp&quot;)]</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">pub mod webp;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>#[cfg(feature = &quot;webp&quot;)]</code> 的含义是：只有在 <code>webp</code> feature 被定义后，以下的 <code>webp</code> 模块才能被引入进来。由于我们之前在 <code>[features]</code> 里定义了 <code>webp</code>，因此以上代码的 <code>webp</code> 模块会被成功引入。</p><p>在 <code>Cargo.toml</code> 中定义的 <code>feature</code> 会被 <code>Cargo</code> 通过命令行参数 <code>--cfg</code> 传给 <code>rustc</code>，最终由后者完成编译：例如，定义 &quot;hello&quot; 和 &quot;hi&quot; 两个 <code>feature</code>，等价于 <code>rustc --cfg &#39;feature=&quot;hello&quot;&#39; --cfg &#39;feature=&quot;hi&quot; ...&#39;</code>。若项目中的代码想要测试 <code>feature</code> 是否存在，可以使用 <a href="https://doc.rust-lang.org/stable/reference/conditional-compilation.html#the-cfg-attribute" target="_blank" rel="noopener noreferrer"><code>cfg</code> 属性</a>或 <a href="https://doc.rust-lang.org/stable/std/macro.cfg.html" target="_blank" rel="noopener noreferrer"><code>cfg</code> 宏</a>。</p><p>之前我们提到了一个 <code>feature</code> 还可以开启其他 <code>feature</code>，举个例子，例如 ICO 图片格式包含 BMP 和 PNG 格式，因此当 <code>ico</code> 被启用后，它还得确保启用 <code>bmp</code> 和 <code>png</code> ：</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">features</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">bmp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = []</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">png</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = []</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ico</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;bmp&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">webp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = []</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对此，我们可以理解为： <strong><code>bmp</code> 和 <code>png</code> 是开启 <code>ico</code> 的先决条件</strong>（注：开启 <code>ico</code>，会自动开启 <code>bmp</code>, <code>png</code>）。</p><p>Feature 名称可以包含来自 <a href="">Unicode XID standard</a> 定义的字母，允许使用 <code>_</code> 或 <code>0-9</code> 的数字作为起始字符，在起始字符后，还可以使用 <code>-</code>、<code>+</code> 或 <code>.</code> 。</p><p>但是我们<strong>还是推荐按照 crates.io 的方式来设置 Feature 名称</strong> : <code>crate.io</code> 要求名称只能由 ASCII 字母数字、<code>_</code>、<code>-</code> 或 <code>+</code> 组成。</p><h2 id="default-feature" tabindex="-1"><a class="header-anchor" href="#default-feature"><span>default feature</span></a></h2><p>默认情况下，所有的 <code>feature</code> 都会被自动禁用，可以通过 <code>default</code> 来启用它们：</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">features</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ico&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;webp&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">bmp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = []</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">png</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = []</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ico</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;bmp&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">webp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = []</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用如上配置的项目被构建时，<code>default</code> feature 首先会被启用，然后它接着启用了 <code>ico</code> 和 <code>webp</code> feature，当然我们还可以关闭 <code>default</code>：</p><ul><li><code>--no-default-features</code> 命令行参数可以禁用 <code>default</code> feature</li><li><code>default-features = false</code> 选项可以在依赖声明中指定</li></ul><blockquote><p>当你要去改变某个依赖库的 <code>default</code> 启用的 feature 列表时(例如觉得该库引入的 feature 过多，导致最终编译出的文件过大)，需要格外的小心，因为这可能会导致某些功能的缺失</p></blockquote><h2 id="可选依赖" tabindex="-1"><a class="header-anchor" href="#可选依赖"><span>可选依赖</span></a></h2><p>当依赖被标记为 &quot;可选 optional&quot; 时，意味着它默认不会被编译。假设我们的 2D 图片处理库需要用到一个外部的包来处理 GIF 图片：</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">gif</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.11.1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">optional</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这种可选依赖的写法会自动定义一个与依赖同名的 feature，也就是 <code>gif</code> feature</strong>，这样一来，当我们启用 <code>gif</code> feature 时，该依赖库也会被自动引入并启用：例如通过 <code>--features gif</code> 的方式启用 feature 。</p><blockquote><p>注意：目前来说，<code>[feature]</code> 中定义的 feature 还不能与已引入的依赖库同名。但是在 <code>nightly</code> 中已经提供了实验性的功能用于改变这一点: <a href="https://doc.rust-lang.org/stable/cargo/reference/unstable.html#namespaced-features" target="_blank" rel="noopener noreferrer">namespaced features</a></p></blockquote><p>当然，<strong>我们还可以通过显式定义 feature 的方式来启用这些可选依赖库</strong>，例如为了支持 AVIF 图片格式，我们需要引入两个依赖包，由于 <code>avif</code> 是通过 feature 引入的可选格式，因此它依赖的两个包也必须声明为可选的:</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ravif</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.6.3&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">optional</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rgb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.8.25&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">optional</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">features</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">avif</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ravif&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;rgb&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，<code>avif</code> feature 一旦被启用，那这两个依赖库也将自动被引入。</p><blockquote><p>注意：我们之前也讲过条件引入依赖的方法，那就是使用<a href="https://course.rs/cargo/reference/specify-deps.html#%E6%A0%B9%E6%8D%AE%E5%B9%B3%E5%8F%B0%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96" target="_blank" rel="noopener noreferrer">平台相关的依赖</a>，与基于 feature 的可选依赖不同，它们是基于特定平台的可选依赖</p></blockquote><h2 id="依赖库自身的-feature" tabindex="-1"><a class="header-anchor" href="#依赖库自身的-feature"><span>依赖库自身的 feature</span></a></h2><p>就像我们的项目可以定义 <code>feature</code> 一样，依赖库也可以定义它自己的 <code>feature</code>，也有需要启用的 <code>feature</code> 列表，当引入该依赖库时，我们可以通过以下方式为其启用相关的 <code>features</code> :</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">serde</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1.0.118&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">features</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;derive&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>以上配置为 <code>serde</code> 依赖开启了 <code>derive</code> feature，还可以通过 <code>default-features = false</code> 来禁用依赖库的 <code>default</code> feature :</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">flate2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1.0.3&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">default-features</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">features</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;zlib&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们禁用了 <code>flate2</code> 的 <code>default</code> feature，但又手动为它启用了 <code>zlib</code> feature。</p><blockquote><p>注意：这种方式未必能成功禁用 <code>default</code>，原因是可能会有其它依赖也引入了 <code>flate2</code>，并且没有对 <code>default</code> 进行禁用，那此时 <code>default</code> 依然会被启用。</p><p>查看下文的 <a href="#feature-%E5%90%8C%E4%B8%80%E5%8C%96">feature 同一化</a> 获取更多信息</p></blockquote><p>除此之外，还能通过下面的方式来间接开启依赖库的 feature :</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">jpeg-decoder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.1.20&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">default-features</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">features</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Enables parallel processing support by enabling the &quot;rayon&quot; feature of jpeg-decoder.</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">parallel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;jpeg-decoder/rayon&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上所示，我们定义了一个 <code>parallel</code> feature，同时为其启用了 <code>jpeg-decoder</code> 依赖的 <code>rayon</code> feature。</p><blockquote><p>注意: 上面的 &quot;package-name/feature-name&quot; 语法形式不仅会开启指定依赖的指定 feature，若该依赖是可选依赖，那还会自动将其引入</p><p>在 <code>nightly</code> 版本中，可以对这种行为进行禁用：<a href="%22package-name/feature-name%22">weak dependency features</a></p></blockquote><h2 id="通过命令行参数启用-feature" tabindex="-1"><a class="header-anchor" href="#通过命令行参数启用-feature"><span>通过命令行参数启用 feature</span></a></h2><p>以下的命令行参数可以启用指定的 <code>feature</code> :</p><ul><li><code>--features FEATURES</code>: 启用给出的 feature 列表，可以使用逗号或空格进行分隔，若你是在终端中使用，还需要加上双引号，例如 <code>--features &quot;foo bar&quot;</code>。 若在工作空间中构建多个 <code>package</code>，可以使用 <code>package-name/feature-name</code> 为特定的成员启用 features</li><li><code>--all-features</code>: 启用命令行上所选择的所有包的所有 features</li><li><code>--no-default-features</code>: 对选择的包禁用 <code>default</code> feature</li></ul><h2 id="feature-同一化" tabindex="-1"><a class="header-anchor" href="#feature-同一化"><span>feature 同一化</span></a></h2><p><code>feature</code> 只有在定义的包中才是唯一的，不同包之间的 <code>feature</code> 允许同名。因此，在一个包上启用 <code>feature</code> 不会导致另一个包的同名 <code>feature</code> 被误启用。</p><p><strong>当一个依赖被多个包所使用时，这些包对该依赖所设置的 <code>feature</code> 将被进行合并，这样才能确保该依赖只有一个拷贝存在，这个过程就被称之为同一化</strong>。大家可以查看<a href="https://doc.rust-lang.org/stable/cargo/reference/resolver.html#features" target="_blank" rel="noopener noreferrer">这里</a>了解下解析器如何对 feature 进行解析处理。</p><p>这里，我们使用 <code>winapi</code> 为例来说明这个过程。首先，<code>winapi</code> 使用了大量的 <code>features</code>；然后我们有两个包 <code>foo</code> 和 <code>bar</code> 分别使用了它的两个 features，那么在合并后，最终 <code>winapi</code> 将同时启四个 features :</p><img src="https://pic2.zhimg.com/80/v2-251973b0cc83f35cd6858bf21dd00ed6_1440w.png"><p>由于这种不可控性，我们需要让 <code>启用feature = 添加特性</code> 这个等式成立，换而言之，<strong>启用一个 feature 不应该导致某个功能被禁止</strong>。这样才能让多个包启用同一个依赖的不同 features。</p><p>例如，如果我们想可选的支持 <code>no_std</code> 环境(不使用标准库)，那么有两种做法：</p><ul><li>默认代码使用标准库的，当 <code>no_std</code> feature 启用时，禁用相关的标准库代码</li><li>默认代码使用非标准库的，当 <code>std</code> feature 启用时，才使用标准库的代码</li></ul><p>前者就是功能削减，与之相对，后者是功能添加，根据之前的内容，我们应该选择后者的做法：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">#![no_std]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">#[cfg(feature </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;std&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">)]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">extern</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> crate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">#[cfg(feature </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;std&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">)]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pub</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> function_that_requires_std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="彼此互斥的-feature" tabindex="-1"><a class="header-anchor" href="#彼此互斥的-feature"><span>彼此互斥的 feature</span></a></h4><p>某极少数情况下，features 之间可能会互相不兼容。我们应该避免这种设计，因为如果一旦这么设计了，那你可能需要修改依赖图的很多地方才能避免两个不兼容 feature 的同时启用。</p><p>如果实在没有办法，可以考虑增加一个编译错误来让报错更清晰:</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#[cfg(all(feature = &quot;foo&quot;, feature = &quot;bar&quot;))]</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">compile_error!(&quot;feature \\&quot;foo\\&quot; and feature \\&quot;bar\\&quot; cannot be enabled at the same time&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>当同时启用 <code>foo</code> 和 <code>bar</code> 时，编译器就会爆出一个更清晰的错误：feature <code>foo</code> 和 <code>bar</code> 无法同时启用。</p><p>总之，我们还是应该在设计上避免这种情况的发生，例如：</p><ul><li>将某个功能分割到多个包中</li><li>当冲突时，设置 feature 优先级，<a href="https://crates.io/crates/cfg-if" target="_blank" rel="noopener noreferrer">cfg-if</a> 包可以帮助我们写出更复杂的 <code>cfg</code> 表达式</li></ul><h4 id="检视已解析的-features" tabindex="-1"><a class="header-anchor" href="#检视已解析的-features"><span>检视已解析的 features</span></a></h4><p>在复杂的依赖图中，如果想要了解不同的 features 是如何被多个包多启用的，这是相当困难的。好在 <code>cargo tree</code> 命令提供了几个选项可以帮组我们更好的检视哪些 features 被启用了:</p><p><code>cargo tree -e features</code> ，该命令以依赖图的方式来展示已启用的 features，包含了每个依赖包所启用的特性：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tree</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> features</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">test_cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v0.1.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (/Users/sunfei/development/rust/demos/test_cargo)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">└──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> uuid</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> feature</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;default&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> uuid</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v0.8.2</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    └──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> uuid</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> feature</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;std&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        └──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> uuid</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v0.8.2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cargo tree -f &quot;{p} {f}&quot;</code> 命令会提供一个更加紧凑的视图：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tree</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;{p} {f}&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">test_cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v0.1.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (/Users/sunfei/development/rust/demos/test_cargo)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">└──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> uuid</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v0.8.2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> default,std</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cargo tree -e features -i foo</code>，该命令会显示 <code>features</code> 会如何&quot;流入&quot;指定的包 <code>foo</code> 中:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tree</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> features</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> uuid</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">uuid</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v0.8.2</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> uuid</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> feature</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;default&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   └──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test_cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v0.1.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (/Users/sunfei/development/rust/demos/test_cargo)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">       └──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test_cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> feature</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;default&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (command-line)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">└──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> uuid</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> feature</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;std&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    └──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> uuid</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> feature</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;default&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (*)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该命令在依赖图较为复杂时非常有用，使用它可以让你了解某个依赖包上开启了哪些 <code>features</code> 以及其中的原因。</p><p>大家可以查看官方的 <code>cargo tree</code> <a href="https://doc.rust-lang.org/stable/cargo/commands/cargo-tree.html" target="_blank" rel="noopener noreferrer">文档</a>获取更加详细的使用信息。</p><h2 id="feature-解析器-v2-版本" tabindex="-1"><a class="header-anchor" href="#feature-解析器-v2-版本"><span>Feature 解析器 V2 版本</span></a></h2><p>我们还能通过以下配置指定使用 V2 版本的解析器( <a href="https://doc.rust-lang.org/stable/cargo/reference/resolver.html#resolver-versions" target="_blank" rel="noopener noreferrer">resolver</a> ):</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;my-package&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">resolver</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;2&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>V2 版本的解析器可以在某些情况下避免 feature 同一化的发生，具体的情况在<a href="https://doc.rust-lang.org/stable/cargo/reference/resolver.html#feature-resolver-version-2" target="_blank" rel="noopener noreferrer">这里</a>有描述，下面做下简单的总结:</p><ul><li>为特定平台开启的 <code>features</code> 且此时并没有被构建，会被忽略</li><li><code>build-dependencies</code> 和 <code>proc-macros</code> 不再跟普通的依赖共享 <code>features</code></li><li><code>dev-dependencies</code> 的 <code>features</code> 不会被启用，除非正在构建的对象需要它们(例如测试对象、示例对象等)</li></ul><p>对于部分场景而言，feature 同一化确实是需要避免的，例如，一个构建依赖开启了 <code>std</code> feature，而同一个依赖又被用于 <code>no_std</code> 环境，很明显，开启 <code>std</code> 将导致错误的发生。</p><p>说完优点，我们再来看看 V2 的缺点，其中增加编译构建时间就是其中之一，原因是同一个依赖会被构建多次(每个都拥有不同的 feature 列表)。</p><blockquote><p>由于此部分内容可能只有极少数的用户需要，因此我们并没有对其进行扩展，如果大家希望了解更多关于 V2 的内容，可以查看<a href="https://doc.rust-lang.org/stable/cargo/reference/features.html#feature-resolver-version-2" target="_blank" rel="noopener noreferrer">官方文档</a></p></blockquote><h2 id="构建脚本" tabindex="-1"><a class="header-anchor" href="#构建脚本"><span>构建脚本</span></a></h2><p><a href="https://course.rs/cargo/reference/build-script/intro.html" target="_blank" rel="noopener noreferrer">构建脚本</a>可以通过 <code>CARGO_FEATURE_&lt;name&gt;</code> 环境变量获取启用的 <code>feature</code> 列表，其中 <code>&lt;name&gt;</code> 是 feature 的名称，该名称被转换成大全写字母，且 <code>-</code> 被转换为 <code>_</code>。</p><h2 id="required-features" tabindex="-1"><a class="header-anchor" href="#required-features"><span>required-features</span></a></h2><p>该字段可以用于禁用特定的 Cargo Target：当某个 feature 没有被启用时，查看<a href="https://course.rs/cargo/reference/cargo-target.html#required-features" target="_blank" rel="noopener noreferrer">这里</a>获取更多信息。</p><h2 id="semver-兼容性" tabindex="-1"><a class="header-anchor" href="#semver-兼容性"><span>SemVer 兼容性</span></a></h2><p>启用一个 feature 不应该引入一个不兼容 SemVer 的改变。例如，启用的 feature 不应该改变现有的 API，因为这会给用户造成不兼容的破坏性变更。 如果大家想知道哪些变化是兼容的，可以参见<a href="https://doc.rust-lang.org/stable/cargo/reference/semver.html" target="_blank" rel="noopener noreferrer">官方文档</a>。</p><p>总之，在新增/移除 feature 或可选依赖时，你需要小心，因此这些可能会造成向后不兼容性。更多信息参见<a href="https://doc.rust-lang.org/stable/cargo/reference/semver.html#cargo" target="_blank" rel="noopener noreferrer">这里</a>，简单总结如下：</p><ul><li>在发布 <code>minor</code> 版本时，以下通常是安全的: <ul><li><a href="https://doc.rust-lang.org/stable/cargo/reference/semver.html#cargo-feature-add" target="_blank" rel="noopener noreferrer">新增 feature</a> 或<a href="https://doc.rust-lang.org/stable/cargo/reference/semver.html#cargo-dep-add" target="_blank" rel="noopener noreferrer">可选依赖</a></li><li><a href="https://doc.rust-lang.org/stable/cargo/reference/semver.html#cargo-change-dep-feature" target="_blank" rel="noopener noreferrer">修改某个依赖的 features</a></li></ul></li><li>在发布 <code>minor</code> 版本时，以下操作应该避免： <ul><li><a href="https://doc.rust-lang.org/stable/cargo/reference/semver.html#cargo-feature-remove" target="_blank" rel="noopener noreferrer">移除 feature</a> 或<a href="https://doc.rust-lang.org/stable/cargo/reference/semver.html#cargo-remove-opt-dep" target="_blank" rel="noopener noreferrer">可选依赖</a></li><li><a href="https://doc.rust-lang.org/stable/cargo/reference/semver.html#cargo-remove-opt-dep" target="_blank" rel="noopener noreferrer">将现有的公有代码放在某个 feature 之后</a></li><li><a href="https://doc.rust-lang.org/stable/cargo/reference/semver.html#cargo-feature-remove-another" target="_blank" rel="noopener noreferrer">从 feature 列表中移除一个 feature</a></li></ul></li></ul><h2 id="feature-文档和发现" tabindex="-1"><a class="header-anchor" href="#feature-文档和发现"><span>feature 文档和发现</span></a></h2><p>将你的项目支持的 feature 信息写入到文档中是非常好的选择:</p><ul><li>我们可以通过在 <code>lib.rs</code> 的顶部添加<a href="https://course.rs/basic/comment.html#%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A" target="_blank" rel="noopener noreferrer">文档注释</a>的方式来实现。例如 <code>regex</code> 就是<a href="https://github.com/rust-lang/regex/blob/1.4.2/src/lib.rs#L488-L583" target="_blank" rel="noopener noreferrer">这么做的</a>。</li><li>若项目拥有一个用户手册，那也可以在那里添加说明，例如 <a href="https://github.com/rust-lang/regex/blob/1.4.2/src/lib.rs#L488-L583" target="_blank" rel="noopener noreferrer">serde.rs</a>。</li><li>若项目是二进制类型(可运行的应用服务，包含 <code>fn main</code> 入口)，可以将说明放在 <code>README</code> 文件或其他文档中，例如 <a href="https://github.com/mozilla/sccache/blob/0.2.13/README.md#build-requirements" target="_blank" rel="noopener noreferrer">sccache</a>。</li></ul><p>特别是对于不稳定的或者不该再被使用的 feature 而言，它们更应该被放在文档中进行清晰的说明。</p><p>当构建发布到 <code>docs.rs</code> 上的文档时，会使用 <code>Cargo.toml</code> 中的元数据来控制哪些 features 会被启用。查看 <a href="https://docs.rs/about/metadata" target="_blank" rel="noopener noreferrer">docs.rs 文档</a>获取更多信息。</p><h4 id="如何发现-features" tabindex="-1"><a class="header-anchor" href="#如何发现-features"><span>如何发现 features</span></a></h4><p>若依赖库的文档中对其使用的 <code>features</code> 做了详细描述，那你会更容易知道他们使用了哪些 <code>features</code> 以及该如何使用。</p><p>当依赖库的文档没有相关信息时，你也可以通过源码仓库的 <code>Cargo.toml</code> 文件来获取，但是有些时候，使用这种方式来跟踪并获取全部相关的信息是相当困难的。</p>`,95)]))}const d=s(n,[["render",r],["__file","intro.html.vue"]]),p=JSON.parse('{"path":"/cargo/reference/features/intro.html","title":"条件编译 Features","lang":"zh-CN","frontmatter":{"description":"条件编译 Features Cargo Feature 是非常强大的机制，可以为大家提供条件编译和可选依赖的高级特性。 [features] Feature 可以通过 Cargo.toml 中的 [features] 部分来定义：其中每个 feature 通过列表的方式指定了它所能启用的其他 feature 或可选依赖。 假设我们有一个 2D 图像处理...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/cargo/reference/features/intro.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"条件编译 Features"}],["meta",{"property":"og:description","content":"条件编译 Features Cargo Feature 是非常强大的机制，可以为大家提供条件编译和可选依赖的高级特性。 [features] Feature 可以通过 Cargo.toml 中的 [features] 部分来定义：其中每个 feature 通过列表的方式指定了它所能启用的其他 feature 或可选依赖。 假设我们有一个 2D 图像处理..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"条件编译 Features\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{},"readingTime":{"minutes":11.68,"words":3505},"filePathRelative":"cargo/reference/features/intro.md","excerpt":"\\n<p><code>Cargo Feature</code> 是非常强大的机制，可以为大家提供<a href=\\"https://doc.rust-lang.org/stable/reference/conditional-compilation.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">条件编译</a>和可选依赖的高级特性。</p>\\n<h2>[features]</h2>\\n<p><code>Feature</code> 可以通过 <code>Cargo.toml</code> 中的 <code>[features]</code> 部分来定义：其中每个 <code>feature</code> 通过列表的方式指定了它所能启用的其他 <code>feature</code> 或可选依赖。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"cargo/reference/features/intro.md","value":{"title":"intro","path":"cargo/reference/features/intro.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"cargo/reference/features/intro.md"}]}}}');export{d as comp,p as data};
