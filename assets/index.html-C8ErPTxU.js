import{_ as s,e as t,f as a,o as n}from"./app-BSEs7fAb.js";const e={};function l(h,i){return n(),t("div",null,i[0]||(i[0]=[a(`<h1 id="option" tabindex="-1"><a class="header-anchor" href="#option"><span>Option</span></a></h1><p>Option 类型代表可选的值：每个 Option 要么是 Some ，包含一个值；要么是 None ，表示空值。<br> Option 在 Rust 代码中十分常见，因为它有许多用途：</p><ul><li>初始值</li><li>输入值不符合定义的情况下作为函数的返回值（部分函数）。</li><li>返回 None 作为简单错误的返回值</li><li>可选的结构字段</li><li>可以借用或 &quot;取走&quot; 的结构字段（的值）</li><li>可选的函数参数</li><li>空指针</li><li>在某些情况下交换值*</li></ul><p>译注：“在某些情况下交换值”可以假设有个可变数组，现在要通过两个可变引用来交换其中两个元素的值。但 Rust 显然不允许有两个对数组的可变引用，这时候可以用 Option 包装下元素值，比如：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> mut</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> array</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> vec!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Some</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Some</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)];</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get_mut</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">unwrap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">take</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">unwrap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get_mut</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">unwrap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">replace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    *</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get_mut</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">unwrap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{:?}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// [Some(2), Some(1)]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>嘿嘿，有点强行了。<br><a href="https://zulip-archive.rust-lang.org/stream/122651-general/topic/.60Option.60.20.22swapping.20things.20out.20of.20difficult.20situations.22.3F.html" target="_blank" rel="noopener noreferrer">示例参考</a><br><a href="https://doc.rust-lang.org/std/option/" target="_blank" rel="noopener noreferrer">关于 Option 的描述来自于</a></p><h2 id="更多信息" tabindex="-1"><a class="header-anchor" href="#更多信息"><span>更多信息</span></a></h2><ul><li><a href="https://doc.rust-lang.org/stable/book/ch10-01-syntax.html#in-enum-definitions" target="_blank" rel="noopener noreferrer">Option Enum Format</a></li><li><a href="https://doc.rust-lang.org/std/option/" target="_blank" rel="noopener noreferrer">Option Module Documentation</a></li><li><a href="https://doc.rust-lang.org/std/option/enum.Option.html" target="_blank" rel="noopener noreferrer">Option Enum Documentation</a></li></ul>`,8)]))}const r=s(e,[["render",l],["__file","index.html.vue"]]),k=JSON.parse('{"path":"/assets/rustlings-zh/exercises/option/","title":"Option","lang":"zh-CN","frontmatter":{"description":"Option Option 类型代表可选的值：每个 Option 要么是 Some ，包含一个值；要么是 None ，表示空值。 Option 在 Rust 代码中十分常见，因为它有许多用途： 初始值 输入值不符合定义的情况下作为函数的返回值（部分函数）。 返回 None 作为简单错误的返回值 可选的结构字段 可以借用或 \\"取走\\" 的结构字段（的值） ...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/assets/rustlings-zh/exercises/option/"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"Option"}],["meta",{"property":"og:description","content":"Option Option 类型代表可选的值：每个 Option 要么是 Some ，包含一个值；要么是 None ，表示空值。 Option 在 Rust 代码中十分常见，因为它有许多用途： 初始值 输入值不符合定义的情况下作为函数的返回值（部分函数）。 返回 None 作为简单错误的返回值 可选的结构字段 可以借用或 \\"取走\\" 的结构字段（的值） ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-20T14:07:43.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-20T14:07:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Option\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-20T14:07:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{"createdTime":1745158063000,"updatedTime":1745158063000,"contributors":[{"name":"Linc","username":"Linc","email":"762699299@qq.com","commits":1,"url":"https://github.com/Linc"}]},"readingTime":{"minutes":0.98,"words":295},"filePathRelative":"assets/rustlings-zh/exercises/option/README.md","localizedDate":"2025年4月20日","excerpt":"\\n<p>Option 类型代表可选的值：每个 Option 要么是 Some ，包含一个值；要么是 None ，表示空值。<br>\\nOption 在 Rust 代码中十分常见，因为它有许多用途：</p>\\n<ul>\\n<li>初始值</li>\\n<li>输入值不符合定义的情况下作为函数的返回值（部分函数）。</li>\\n<li>返回 None 作为简单错误的返回值</li>\\n<li>可选的结构字段</li>\\n<li>可以借用或 \\"取走\\" 的结构字段（的值）</li>\\n<li>可选的函数参数</li>\\n<li>空指针</li>\\n<li>在某些情况下交换值*</li>\\n</ul>\\n<p>译注：“在某些情况下交换值”可以假设有个可变数组，现在要通过两个可变引用来交换其中两个元素的值。但 Rust 显然不允许有两个对数组的可变引用，这时候可以用 Option 包装下元素值，比如：</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"assets/rustlings-zh/exercises/option/README.md","value":{"title":"exercises/","path":"assets/rustlings-zh/exercises/option/README.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{r as comp,k as data};
