import{_ as i,e as s,k as a,o as l}from"./app-Dd7kPxnC.js";const n={};function t(r,e){return l(),s("div",null,e[0]||(e[0]=[a(`<h1 id="发布配置-profile" tabindex="-1"><a class="header-anchor" href="#发布配置-profile"><span>发布配置 Profile</span></a></h1><p>细心的同学可能发现了迄今为止我们已经为 Cargo 引入了不少新的名词，而且这些名词有一个共同的特点，不容易或不适合翻译成中文，因为难以表达的很准确，例如 Cargo Target, Feature 等，这不现在又多了一个 Profile。</p><h2 id="默认的-profile" tabindex="-1"><a class="header-anchor" href="#默认的-profile"><span>默认的 profile</span></a></h2><p>Profile 其实是一种发布配置，例如它默认包含四种: <code>dev</code>、 <code>release</code>、 <code>test</code> 和 <code>bench</code>，正常情况下，我们无需去指定，<code>Cargo</code> 会根据我们使用的命令来自动进行选择</p><ul><li>例如 <code>cargo build</code> 自动选择 <code>dev</code> profile，而 <code>cargo test</code> 则是 <code>test</code> profile, 出于历史原因，这两个 profile 输出的结果都存放在项目根目录下的 <code>target/debug</code> 目录中，结果往往用于开发/测试环境</li><li>而 <code>cargo build --release</code> 自动选择 <code>release</code> profile，并将输出结果存放在 <code>target/release</code> 目录中，结果往往用于生产环境</li></ul><p>可以看出 Profile 跟 Nodejs 的 <code>dev</code> 和 <code>prod</code> 很像，都是通过不同的配置来为目标环境构建最终编译后的结果: <code>dev</code> 编译输出的结果用于开发环境，<code>prod</code> 则用于生产环境。</p><p>针对不同的 profile，编译器还会提供不同的优化级别，例如 <code>dev</code> 用于开发环境，因此构建速度是最重要的：此时，我们可以牺牲运行性能来换取编译性能，那么优化级别就会使用最低的。而 <code>release</code> 则相反，优化级别会使用最高，导致的结果就是运行得非常快，但是编译速度大幅降低。</p><blockquote><p>初学者一个常见的错误，就是使用非 <code>release</code> profile 去测试性能，例如 <code>cargo run</code>，这种方式显然无法得到正确的结果，我们应该使用 <code>cargo run --release</code> 的方式测试性能</p></blockquote><p>profile 可以通过 <code>Cargo.toml</code> 中的 <code>[profile]</code> 部分进行设置和改变:</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">profile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dev</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">opt-level</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">               # 使用稍高一些的优化级别，最低是0，最高是3</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">overflow-checks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     # 关闭整数溢出检查</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，每一种 profile 都可以单独的进行设置，例如上面的 <code>[profile.dev]</code>。</p><p>如果是工作空间的话，只有根 package 的 <code>Cargo.toml</code> 中的 <code>[profile]</code> 设置才会被使用，其它成员或依赖包中的设置会被自动忽略。</p><p>另外，profile 还能在 Cargo 自身的配置文件中进行覆盖，总之，通过 <code>.cargo/config.toml</code> 或环境变量的方式所指定的 <code>profile</code> 配置会覆盖项目的 <code>Cargo.toml</code> 中相应的配置。</p><h2 id="自定义-profile" tabindex="-1"><a class="header-anchor" href="#自定义-profile"><span>自定义 profile</span></a></h2><p>除了默认的四种 profile，我们还可以定义自己的。对于大公司来说，这个可能会非常有用，自定义的 profile 可以帮助我们建立更灵活的工作发布流和构建模型。</p><p>当定义 profile 时，你必须指定 <code>inherits</code> 用于说明当配置缺失时，该 profile 要从哪个 profile 那里继承配置。</p><p>例如，我们想在 release profile 的基础上增加 <a href="#lto">LTO</a> 优化，那么可以在 <code>Cargo.toml</code> 中添加如下内容：</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">profile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">release-lto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">inherits</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;release&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">lto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在构建时使用 <code>--profile</code> 来指定想要选择的自定义 profile ：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --profile</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> release-lto</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>与默认的 profile 相同，自定义 profile 的编译结果也存放在 <a href="https://course.rs/cargo/guide/build-cache.html" target="_blank" rel="noopener noreferrer"><code>target/</code></a> 下的同名目录中，例如 <code>--profile release-lto</code> 的输出结果存储在 <code>target/release-lto</code> 中。</p><h2 id="选择-profile" tabindex="-1"><a class="header-anchor" href="#选择-profile"><span>选择 profile</span></a></h2><ul><li>默认使用 <code>dev</code> : <code>cargo build</code>, <code>cargo rustc</code>, <code>cargo check</code>, 和 <code>cargo run</code></li><li>默认使用 <code>test</code>: <code>cargo test</code></li><li>默认使用 <code>bench</code>: <code>cargo bench</code></li><li>默认使用 <code>release</code>： <code>cargo install</code>, <code>cargo build --release</code>, <code>cargo run --release</code></li><li>使用自定义 profile: <code>cargo build --profile release-lto</code></li></ul><h2 id="profile-设置" tabindex="-1"><a class="header-anchor" href="#profile-设置"><span>profile 设置</span></a></h2><p>下面我们来看看 profile 中可以进行哪些优化设置。</p><h4 id="opt-level" tabindex="-1"><a class="header-anchor" href="#opt-level"><span>opt-level</span></a></h4><p>该字段用于控制 <a href="https://doc.rust-lang.org/stable/rustc/codegen-options/index.html#opt-level" target="_blank" rel="noopener noreferrer"><code>-C opt-level</code></a> 标志的优化级别。更高的优化级别往往意味着运行更快的代码，但是也意味着更慢的编译速度。</p><p>同时，更高的编译级别甚至会造成编译代码的改变和再排列，这会为 debug 带来更高的复杂度。</p><p><code>opt-level</code> 支持的选项包括:</p><ul><li><code>0</code>: 无优化</li><li><code>1</code>: 基本优化</li><li><code>2</code>: 一些优化</li><li><code>3</code>: 全部优化</li><li>&quot;s&quot;: 优化输出的二进制文件的大小</li><li>&quot;z&quot;: 优化二进制文件大小，但也会关闭循环向量化</li></ul><p>我们非常推荐你根据自己的需求来找到最适合的优化级别(例如，平衡运行和编译速度)。而且有一点值得注意，有的时候优化级别和性能的关系可能会出乎你的意料之外，例如 <code>3</code> 比 <code>2</code> 更慢，再比如 <code>&quot;s&quot;</code> 并没有让你的二进制文件变得更小。</p><p>而且随着 <code>rustc</code> 版本的更新，你之前的配置也可能要随之变化，总之，为项目的热点路径做好基准性能测试是不错的选择，不然总不能每次都手动重写代码来测试吧 😃</p><p>如果想要了解更多，可以参考 <a href="https://doc.rust-lang.org/stable/rustc/profile-guided-optimization.html" target="_blank" rel="noopener noreferrer">rustc 文档</a>，这里有更高级的优化技巧。</p><h4 id="debug" tabindex="-1"><a class="header-anchor" href="#debug"><span>debug</span></a></h4><p><code>debug</code> 控制 <a href="https://doc.rust-lang.org/stable/rustc/codegen-options/index.html#debuginfo" target="_blank" rel="noopener noreferrer"><code>-C debuginfo</code></a> 标志，而后者用于控制最终二进制文件输出的 <code>debug</code> 信息量。</p><p>支持的选项包括:</p><ul><li><code>0</code> 或 <code>false</code>：不输出任何 debug 信息</li><li><code>1</code>: 行信息</li><li><code>2</code>: 完整的 debug 信息</li></ul><h4 id="split-debuginfo" tabindex="-1"><a class="header-anchor" href="#split-debuginfo"><span>split-debuginfo</span></a></h4><p><code>split-debuginfo</code> 控制 <a href="https://doc.rust-lang.org/stable/rustc/codegen-options/index.html#split-debuginfo" target="_blank" rel="noopener noreferrer">-C split-debuginfo</a> 标志，用于决定输出的 debug 信息是存放在二进制可执行文件里还是邻近的文件中。</p><h4 id="debug-assertions" tabindex="-1"><a class="header-anchor" href="#debug-assertions"><span>debug-assertions</span></a></h4><p>该字段控制 <a href="https://doc.rust-lang.org/stable/rustc/codegen-options/index.html#debug-assertions" target="_blank" rel="noopener noreferrer">-C debug-assertions</a> 标志，可以开启或关闭其中一个<a href="https://doc.rust-lang.org/stable/reference/conditional-compilation.html#debug_assertions" target="_blank" rel="noopener noreferrer">条件编译</a>选项： <code>cfg(debug_assertions)</code>。</p><p><code>debug-assertion</code> 会提供运行时的检查，该检查只能用于 <code>debug</code> 模式，原因是对于 <code>release</code> 来说，这种检查的成本较为高昂。</p><p>大家熟悉的 <a href="https://course.rs/test/assertion.html#debug_assert-%E7%B3%BB%E5%88%97" target="_blank" rel="noopener noreferrer"><code>debug_assert!</code></a> 宏也是通过该标志开启的。</p><p>支持的选项包括 :</p><ul><li><code>true</code>: 开启</li><li><code>false</code>: 关闭</li></ul><h4 id="overflow-checks" tabindex="-1"><a class="header-anchor" href="#overflow-checks"><span>overflow-checks</span></a></h4><p>用于控制 <a href="https://doc.rust-lang.org/stable/rustc/codegen-options/index.html#overflow-checks" target="_blank" rel="noopener noreferrer">-C overflow-checks</a> 标志，该标志可以控制运行时的整数溢出行为。<strong>当开启后，整数溢出会导致 <code>panic</code></strong>。</p><p>支持的选项包括 :</p><ul><li><code>true</code>: 开启</li><li><code>false</code>: 关闭</li></ul><h4 id="lto" tabindex="-1"><a class="header-anchor" href="#lto"><span>lto</span></a></h4><p><code>lto</code> 用于控制 <a href="https://doc.rust-lang.org/stable/rustc/codegen-options/index.html#lto" target="_blank" rel="noopener noreferrer"><code>-C lto</code></a> 标志，而后者可以控制 LLVM 的<a href="https://llvm.org/docs/LinkTimeOptimization.html" target="_blank" rel="noopener noreferrer">链接时优化( link time optimizations )</a>。通过对整个程序进行分析，并以增加链接时间为代价，LTO 可以生成更加优化的代码。</p><p>支持的选项包括：</p><ul><li><code>false</code>: 只会对代码生成单元中的本地包进行 <code>&quot;thin&quot; LTO</code> 优化，若代码生成单元数为 1 或者 <code>opt-level</code> 为 0，则不会进行任何 LTO 优化</li><li><code>true</code> 或 <code>&quot;fat&quot;</code>：对依赖图中的所有包进行 <code>&quot;fat&quot; LTO</code> 优化</li><li><code>&quot;thin&quot;</code>：对依赖图的所有包进行 <a href="http://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html" target="_blank" rel="noopener noreferrer"><code>&quot;thin&quot; LTO</code></a>，相比 <code>&quot;fat&quot;</code> 来说，它仅牺牲了一点性能，但是换来了链接时间的可观减少</li><li><code>off</code>： 禁用 LTO</li></ul><p>如果大家想了解跨语言 LTO，可以看下 <a href="https://doc.rust-lang.org/stable/rustc/codegen-options/index.html#linker-plugin-lto" target="_blank" rel="noopener noreferrer">-C linker-plugin-lto</a> 标志。</p><h4 id="panic" tabindex="-1"><a class="header-anchor" href="#panic"><span>panic</span></a></h4><p><code>panic</code> 控制 <a href="https://doc.rust-lang.org/stable/cargo/reference/profiles.html#codegen-units" target="_blank" rel="noopener noreferrer">-C panic</a> 标志，它可以控制 <code>panic</code> 策略的选择。</p><p>支持的选项包括:</p><ul><li><code>&quot;unwind&quot;</code>: 遇到 panic 后对栈进行展开( unwind )</li><li><code>&quot;abort&quot;</code>: 遇到 panic 后直接停止程序</li></ul><p>当设置为 <code>&quot;unwind&quot;</code> 时，具体的栈展开信息取决于特定的平台，例如 <code>NVPTX</code> 不支持 <code>unwind</code>，因此程序只能 &quot;abort&quot;。</p><p>测试、基准性能测试、构建脚本和过程宏会忽略 <code>panic</code> 设置，目前来说它们要求是 <code>&quot;unwind&quot;</code>，如果大家希望修改成 <code>&quot;abort&quot;</code>，可以看看 <a href="https://doc.rust-lang.org/stable/cargo/reference/unstable.html#panic-abort-tests" target="_blank" rel="noopener noreferrer">panic-abort-tests </a>。</p><p>另外，当你使用 <code>&quot;abort&quot;</code> 策略且在执行测试时，由于上述的要求，除了测试代码外，所有的依赖库也会忽略该 <code>&quot;abort&quot;</code> 设置而使用 <code>&quot;unwind&quot;</code> 策略。</p><h4 id="incremental" tabindex="-1"><a class="header-anchor" href="#incremental"><span>incremental</span></a></h4><p><code>incremental</code> 控制 <a href="https://doc.rust-lang.org/stable/rustc/codegen-options/index.html#incremental" target="_blank" rel="noopener noreferrer">-C incremental</a> 标志，用于开启或关闭增量编译。开启增量编译时，<code>rustc</code> 会将必要的信息存放到硬盘中( <code>target</code> 目录中 )，当下次编译时，这些信息可以被复用以改善编译时间。</p><p>支持的选项包括:</p><ul><li><code>true</code>： 启用</li><li><code>false</code>: 关闭</li></ul><p><strong>增量编译只能用于工作空间的成员和通过 <code>path</code> 引入的本地依赖。</strong></p><p>大家还可以通过<a href="https://doc.rust-lang.org/stable/cargo/reference/environment-variables.html" target="_blank" rel="noopener noreferrer">环境变量</a> <code>CARGO_INCREMENTAL</code> 或 Cargo 配置 <a href="https://doc.rust-lang.org/stable/cargo/reference/config.html#buildincremental" target="_blank" rel="noopener noreferrer">build.incremental</a> 在全局对 <code>incremental</code> 进行覆盖。</p><h4 id="codegen-units" tabindex="-1"><a class="header-anchor" href="#codegen-units"><span>codegen-units</span></a></h4><p><code>codegen-units</code> 控制 <a href="https://doc.rust-lang.org/stable/rustc/codegen-options/index.html#codegen-units" target="_blank" rel="noopener noreferrer">-C codegen-units</a> 标志，可以指定一个包会被分隔为多少个代码生成单元。<strong>更多的代码生成单元会提升代码的并行编译速度，但是可能会降低运行速度。</strong></p><p>对于增量编译，默认值是 256，非增量编译是 16。</p><h4 id="r-path" tabindex="-1"><a class="header-anchor" href="#r-path"><span>r-path</span></a></h4><p>用于控制 <a href="https://doc.rust-lang.org/stable/rustc/codegen-options/index.html#rpath" target="_blank" rel="noopener noreferrer">-C rpath</a>标志，可以控制 <a href="https://en.wikipedia.org/wiki/Rpath" target="_blank" rel="noopener noreferrer"><code>rpath</code></a> 的启用与关闭。</p><p><code>rpath</code> 代表硬编码到二进制可执行文件或库文件中的<strong>运行时代码搜索(runtime search path)</strong>，动态链接库的加载器就通过它来搜索所需的库。</p><h2 id="默认-profile" tabindex="-1"><a class="header-anchor" href="#默认-profile"><span>默认 profile</span></a></h2><h4 id="dev" tabindex="-1"><a class="header-anchor" href="#dev"><span>dev</span></a></h4><p><code>dev</code> profile 往往用于开发和 debug，<code>cargo build</code> 或 <code>cargo run</code> 默认使用的就是 <code>dev</code> profile，<code>cargo build --debug</code> 也是。</p><blockquote><p>注意：<code>dev</code> profile 的结果并没有输出到 <code>target/dev</code> 同名目录下，而是 <code>target/debug</code> ，这是历史遗留问题</p></blockquote><p>默认的 <code>dev</code> profile 设置如下：</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">profile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dev</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">opt-level</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">debug</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">split-debuginfo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;...&#39;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # Platform-specific.</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">debug-assertions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">overflow-checks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">lto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">panic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;unwind&#39;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">incremental</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">codegen-units</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">256</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rpath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="release" tabindex="-1"><a class="header-anchor" href="#release"><span>release</span></a></h4><p><code>release</code> 往往用于预发/生产环境或性能测试，以下命令使用的就是 <code>release</code> profile:</p><ul><li><code>cargo build --release</code></li><li><code>cargo run --release</code></li><li><code>cargo install</code></li></ul><p>默认的 <code>release</code> profile 设置如下：</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">profile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">release</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">opt-level</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">debug</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">split-debuginfo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;...&#39;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # Platform-specific.</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">debug-assertions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">overflow-checks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">lto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">panic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;unwind&#39;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">incremental</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">codegen-units</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rpath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="test" tabindex="-1"><a class="header-anchor" href="#test"><span>test</span></a></h4><p>该 profile 用于构建测试，它的设置是继承自 <code>dev</code></p><h4 id="bench" tabindex="-1"><a class="header-anchor" href="#bench"><span>bench</span></a></h4><p><code>bench</code> profile 用于构建基准测试 benchmark，它的设计默认继承自 <code>release</code></p><h4 id="构建本身依赖" tabindex="-1"><a class="header-anchor" href="#构建本身依赖"><span>构建本身依赖</span></a></h4><p>默认情况下，所有的 profile 都不会对构建过程本身所需的依赖进行优化，构建过程本身包括构建脚本、过程宏。</p><p>默认的设置是：</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">profile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dev</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">build-override</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">opt-level</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">codegen-units</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">256</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">profile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">release</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">build-override</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">opt-level</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">codegen-units</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">256</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是自定义 profile，那它会自动从当前正在使用的 profile 继承相应的设置，但不会修改。</p><h2 id="重写-profile" tabindex="-1"><a class="header-anchor" href="#重写-profile"><span>重写 profile</span></a></h2><p>我们还可以对特定的包使用的 profile 进行重写(override):</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># \`foo\` package 将使用 -Copt-level=3 标志.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">profile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dev</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">opt-level</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 <code>package</code> 名称实际上是一个 <a href="https://course.rs/cargo/reference/package-id.html" target="_blank" rel="noopener noreferrer"><code>Package ID</code></a>，因此我们还可以通过版本号来选择: <code>[profile.dev.package.&quot;foo:2.1.0&quot;]</code>。</p><p>如果要为所有依赖包重写(不包括工作空间的成员):</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">profile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dev</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">opt-level</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>为构建脚本、过程宏和它们的依赖重写：</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">profile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dev</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">build-override</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">opt-level</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：如果一个依赖同时被正常代码和构建脚本所使用，当 <code>--target</code> 没有指定时，Cargo 只会构建该依赖一次。</p><p>但是当使用了 <code>build-override</code> 后，该依赖会被构建两次，一次为正常代码，一次为构建脚本，因此会增加一些编译时间</p></blockquote><p>重写的优先级按以下顺序执行(第一个匹配获胜):</p><ul><li><code>[profile.dev.package.name]</code>，指定名称进行重写</li><li><code>[profile.dev.package.&quot;*&quot;]</code>，对所有非工作空间成员的 package 进行重写</li><li><code>[profile.dev.build-override]</code>，对构建脚本、过程宏及它们的依赖进行重写</li><li><code>[profile.dev]</code></li><li>Cargo 内置的默认值</li></ul><p>重写无法使用 <code>panic</code>、<code>lto</code> 或 <code>rpath</code> 设置。</p>`,105)]))}const d=i(n,[["render",t],["__file","profiles.html.vue"]]),h=JSON.parse('{"path":"/cargo/reference/profiles.html","title":"发布配置 Profile","lang":"zh-CN","frontmatter":{"description":"发布配置 Profile 细心的同学可能发现了迄今为止我们已经为 Cargo 引入了不少新的名词，而且这些名词有一个共同的特点，不容易或不适合翻译成中文，因为难以表达的很准确，例如 Cargo Target, Feature 等，这不现在又多了一个 Profile。 默认的 profile Profile 其实是一种发布配置，例如它默认包含四种: de...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/cargo/reference/profiles.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"发布配置 Profile"}],["meta",{"property":"og:description","content":"发布配置 Profile 细心的同学可能发现了迄今为止我们已经为 Cargo 引入了不少新的名词，而且这些名词有一个共同的特点，不容易或不适合翻译成中文，因为难以表达的很准确，例如 Cargo Target, Feature 等，这不现在又多了一个 Profile。 默认的 profile Profile 其实是一种发布配置，例如它默认包含四种: de..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"发布配置 Profile\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{},"readingTime":{"minutes":9.66,"words":2897},"filePathRelative":"cargo/reference/profiles.md","excerpt":"\\n<p>细心的同学可能发现了迄今为止我们已经为 Cargo 引入了不少新的名词，而且这些名词有一个共同的特点，不容易或不适合翻译成中文，因为难以表达的很准确，例如 Cargo Target, Feature 等，这不现在又多了一个 Profile。</p>\\n<h2>默认的 profile</h2>\\n<p>Profile 其实是一种发布配置，例如它默认包含四种: <code>dev</code>、 <code>release</code>、 <code>test</code> 和 <code>bench</code>，正常情况下，我们无需去指定，<code>Cargo</code> 会根据我们使用的命令来自动进行选择</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"cargo/reference/profiles.md","value":{"title":"profiles","path":"cargo/reference/profiles.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"cargo/reference/profiles.md"}]}}}');export{d as comp,h as data};
