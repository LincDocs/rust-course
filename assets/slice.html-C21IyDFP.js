import{_ as i,e as a,k as e,o as t}from"./app-D8oqi0-Y.js";const n={};function h(l,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="切片和切片引用" tabindex="-1"><a class="header-anchor" href="#切片和切片引用"><span>切片和切片引用</span></a></h1><p>关于 <code>str</code> / <code>&amp;str</code>，<code>[u8]</code> / <code>&amp;[u8]</code> 区别，你能清晰的说出来嘛？如果答案是 No ，那就跟随我一起来看看切片和切片引用到底有何区别吧。</p><blockquote><p>在继续之前，查看<a href="https://course.rs/basic/compound-type/string-slice.html#%E5%88%87%E7%89%87slice" target="_blank" rel="noopener noreferrer">这里</a>了解何为切片</p></blockquote><p>切片允许我们引用集合中部分连续的元素序列，而不是引用整个集合。例如，字符串切片就是一个子字符串，数组切片就是一个子数组。</p><h2 id="无法被直接使用的切片类型" tabindex="-1"><a class="header-anchor" href="#无法被直接使用的切片类型"><span>无法被直接使用的切片类型</span></a></h2><p>Rust 语言特性内置的 <code>str</code> 和 <code>[u8]</code> 类型都是切片，前者是字符串切片，后者是数组切片，下面我们来尝试下使用 <code>str</code> ：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;banana&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面代码创建一个 <code>str</code> 类型的字符串，看起来很正常，但是编译就会报错：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">error[E0277]:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> size</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> for</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> values</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> of</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">str</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> cannot</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> be</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> known</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> at</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> compilation</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> time</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> --</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">src/main.rs:4:9</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  |</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> |     </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">let</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> string:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> str</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;banana&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  |         </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">^^^^^^</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> doesn&#39;t have a size known at compile-time</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译器准确的告诉了我们原因：<code>str</code> 字符串切片它是 <a href="https://course.rs/advance/into-types/sized.html#%E5%8A%A8%E6%80%81%E5%A4%A7%E5%B0%8F%E7%B1%BB%E5%9E%8B-dst" target="_blank" rel="noopener noreferrer"><code>DST</code> 动态大小类型</a>，这意味着编译器无法在编译期知道 <code>str</code> 类型的大小，只有到了运行期才能动态获知，这对于强类型、强安全的 Rust 语言来说是不可接受的。</p><p>也就是说，我们无法直接使用 <code>str</code>，而对于 <code>[u8]</code> 也是类似的，大家可以自己动手试试。</p><p>总之，我们可以总结出一个结论：<strong>在 Rust 中，所有的切片都是动态大小类型，它们都无法直接被使用</strong>。</p><h4 id="为何切片是动态大小类型" tabindex="-1"><a class="header-anchor" href="#为何切片是动态大小类型"><span>为何切片是动态大小类型</span></a></h4><p>原因在于底层的切片长度是可以动态变化的，而编译器无法在编译期得知它的具体的长度，因此该类型无法被分配在栈上，只能分配在堆上。</p><h4 id="为何切片只能通过引用来使用" tabindex="-1"><a class="header-anchor" href="#为何切片只能通过引用来使用"><span>为何切片只能通过引用来使用</span></a></h4><p>既然切片只能分配到堆上，我们就无法直接使用它，大家可以想想，所有分配在堆上的数据，是不是都是通过一个在栈上的引用来访问的？切片也不例外。</p><h4 id="为何切片引用可以存储在栈上" tabindex="-1"><a class="header-anchor" href="#为何切片引用可以存储在栈上"><span>为何切片引用可以存储在栈上</span></a></h4><p>切片引用是一个宽指针，存储在栈上，指向了堆上的切片数据，该引用包含了切片的起始位置和长度，而且最重要的是，类似于指针，引用的大小是固定的(起始位置和长度都是整形)，因此它才可以存储在栈上。</p><h4 id="有没有可以存储在栈上的" tabindex="-1"><a class="header-anchor" href="#有没有可以存储在栈上的"><span>有没有可以存储在栈上的</span></a></h4><p>有，使用固定长度的数组: <code>let a: [i8;4] = [1,2,3,4];</code>，注意看，数组的类型与切片是不同的，前者的类型带有长度：<code>[i8;4]</code>，而后者仅仅是 <code>[i8]</code>。</p><h2 id="切片引用" tabindex="-1"><a class="header-anchor" href="#切片引用"><span>切片引用</span></a></h2><p>那么问题来了，该如何使用切片呢？</p><p>何以解忧，唯有引用。由于引用类型的大小在编译期是已知的，因此在 Rust 中，如果要使用切片，就必须要使用它的引用。</p><p><code>str</code> 切片的引用类型是 <code>&amp;str</code>，而 <code>[i32]</code> 的引用类型是 <code>&amp;[i32]</code>，相信聪明的读者已经看出来了，<code>&amp;str</code> 和 <code>&amp;[i32]</code> 都是我们非常常用的类型，例如:</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: &amp;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;banana&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: &amp;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;banana&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> arr</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: &amp;[</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">i32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">..</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码就可以正常通过，原因在于这些切片引用的大小在编译器都是已知的。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>我们常常说使用切片，实际上我们在用的是切片的引用，我们也在频繁说使用字符串，实际上我们在使用的也是字符串切片的引用。</p><p>总之，切片在 Rust 中是动态大小类型 DST，是无法被我们直接使用的，而我们在使用的都是切片的引用。</p><table><thead><tr><th>切片</th><th>切片引用</th></tr></thead><tbody><tr><td>str 字符串切片</td><td>&amp;str 字符串切片的引用</td></tr><tr><td>[u8] 数组切片</td><td>&amp;[u8] 数组切片的引用</td></tr></tbody></table><p><strong>但是出于方便，我们往往不会说使用切片引用，而是直接说使用字符串切片或数组切片，实际上，这时指代的都是切片的引用！</strong></p>`,31)]))}const k=i(n,[["render",h],["__file","slice.html.vue"]]),r=JSON.parse('{"path":"/difficulties/slice.html","title":"切片和切片引用","lang":"zh-CN","frontmatter":{"description":"切片和切片引用 关于 str / &str，[u8] / &[u8] 区别，你能清晰的说出来嘛？如果答案是 No ，那就跟随我一起来看看切片和切片引用到底有何区别吧。 在继续之前，查看这里了解何为切片 切片允许我们引用集合中部分连续的元素序列，而不是引用整个集合。例如，字符串切片就是一个子字符串，数组切片就是一个子数组。 无法被直接使用的切片类型 Ru...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/difficulties/slice.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"切片和切片引用"}],["meta",{"property":"og:description","content":"切片和切片引用 关于 str / &str，[u8] / &[u8] 区别，你能清晰的说出来嘛？如果答案是 No ，那就跟随我一起来看看切片和切片引用到底有何区别吧。 在继续之前，查看这里了解何为切片 切片允许我们引用集合中部分连续的元素序列，而不是引用整个集合。例如，字符串切片就是一个子字符串，数组切片就是一个子数组。 无法被直接使用的切片类型 Ru..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"切片和切片引用\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{},"readingTime":{"minutes":3.57,"words":1072},"filePathRelative":"difficulties/slice.md","excerpt":"\\n<p>关于 <code>str</code> / <code>&amp;str</code>，<code>[u8]</code> / <code>&amp;[u8]</code> 区别，你能清晰的说出来嘛？如果答案是 No ，那就跟随我一起来看看切片和切片引用到底有何区别吧。</p>\\n<blockquote>\\n<p>在继续之前，查看<a href=\\"https://course.rs/basic/compound-type/string-slice.html#%E5%88%87%E7%89%87slice\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">这里</a>了解何为切片</p>\\n</blockquote>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"difficulties/slice.md","value":{"title":"slice","path":"difficulties/slice.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"difficulties/slice.md"}]}}}');export{k as comp,r as data};
