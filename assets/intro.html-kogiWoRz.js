import{_ as s,e as t,k as e,o as n}from"./app-Dd7kPxnC.js";const a={};function l(r,i){return n(),t("div",null,i[0]||(i[0]=[e(`<h1 id="持久化单向链表" tabindex="-1"><a class="header-anchor" href="#持久化单向链表"><span>持久化单向链表</span></a></h1><p>迄今为止，我们已经掌握了如何实现一个可变的单向链表。但是之前的链表都是单所有权的，在实际使用中，共享所有权才是更实用的方式，下面一起来看看该如何实现一个不可变的、共享所有权的持久化链表( persistent )。</p><p>开始之前，还需要创建一个新文件 <code>third.rs</code> ，并在 <code>lib.rs</code> 中添加以下内容:</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// in lib.rs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pub</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> mod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> first;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pub</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> mod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> second;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pub</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> mod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> third;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与上一个链表有所不同，这次我们无需拷贝之前的代码，而是从零开始构建一个新的链表。</p>`,5)]))}const h=s(a,[["render",l],["__file","intro.html.vue"]]),d=JSON.parse('{"path":"/too-many-lists/persistent-stack/intro.html","title":"持久化单向链表","lang":"zh-CN","frontmatter":{"description":"持久化单向链表 迄今为止，我们已经掌握了如何实现一个可变的单向链表。但是之前的链表都是单所有权的，在实际使用中，共享所有权才是更实用的方式，下面一起来看看该如何实现一个不可变的、共享所有权的持久化链表( persistent )。 开始之前，还需要创建一个新文件 third.rs ，并在 lib.rs 中添加以下内容: 与上一个链表有所不同，这次我们无...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/too-many-lists/persistent-stack/intro.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"持久化单向链表"}],["meta",{"property":"og:description","content":"持久化单向链表 迄今为止，我们已经掌握了如何实现一个可变的单向链表。但是之前的链表都是单所有权的，在实际使用中，共享所有权才是更实用的方式，下面一起来看看该如何实现一个不可变的、共享所有权的持久化链表( persistent )。 开始之前，还需要创建一个新文件 third.rs ，并在 lib.rs 中添加以下内容: 与上一个链表有所不同，这次我们无..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"持久化单向链表\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.56,"words":169},"filePathRelative":"too-many-lists/persistent-stack/intro.md","excerpt":"\\n<p>迄今为止，我们已经掌握了如何实现一个可变的单向链表。但是之前的链表都是单所有权的，在实际使用中，共享所有权才是更实用的方式，下面一起来看看该如何实现一个不可变的、共享所有权的持久化链表( persistent )。</p>\\n<p>开始之前，还需要创建一个新文件 <code>third.rs</code> ，并在 <code>lib.rs</code> 中添加以下内容:</p>\\n<div class=\\"language-rust line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust\\" data-title=\\"rust\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// in lib.rs</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">pub</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> mod</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> first;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">pub</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> mod</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> second;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">pub</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> mod</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> third;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"too-many-lists/persistent-stack/intro.md","value":{"title":"intro","path":"too-many-lists/persistent-stack/intro.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"too-many-lists/persistent-stack/intro.md"}]}}}');export{h as comp,d as data};
