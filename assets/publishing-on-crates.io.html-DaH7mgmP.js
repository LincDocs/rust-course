import{_ as i,e as s,k as a,o as n}from"./app-Ca5AIWu9.js";const r={};function t(l,e){return n(),s("div",null,e[0]||(e[0]=[a(`<h1 id="发布到-crates-io" tabindex="-1"><a class="header-anchor" href="#发布到-crates-io"><span>发布到 crates.io</span></a></h1><p>如果你想要把自己的开源项目分享给全世界，那最好的办法自然是 GitHub。但如果是 Rust 的库，那除了发布到 GitHub 外，我们还可以将其发布到 <a href="https://crates.io" target="_blank" rel="noopener noreferrer">crates.io</a> 上，然后其它用户就可以很简单的对其进行引用。</p><blockquote><p>注意：发布包到 <code>crates.io</code> 后，特定的版本无法被覆盖，要发布就必须使用新的版本号，代码也无法被删除!</p></blockquote><h2 id="首次发布之前" tabindex="-1"><a class="header-anchor" href="#首次发布之前"><span>首次发布之前</span></a></h2><p><strong>首先，我们需要一个账号</strong>：访问 crates.io 的<a href="https://crates.io" target="_blank" rel="noopener noreferrer">主页</a>，然后在右上角使用 GitHub 账户登陆，接着访问你的<a href="https://crates.io/settings/profile" target="_blank" rel="noopener noreferrer">账户设置</a>页面，进入到 API Tokens 标签页下，生成新的 Token，并使用该 Token 在终端中进行登录:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> login</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> abcdefghijklmnopqrstuvwxyz012345</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该命令将告诉 Cargo 你的 API Token，然后将其存储在本地的 <code>~/.cargo/credentials.toml</code> 文件中。</p><blockquote><p>注意：你需要妥善保管好 API Token，并且不要告诉任何人，一旦泄漏，请撤销( Revoke )并重新生成。</p></blockquote><h2 id="发布包之前" tabindex="-1"><a class="header-anchor" href="#发布包之前"><span>发布包之前</span></a></h2><p><code>crates.io</code> 上的<strong>包名遵循先到先得</strong>的方式：一旦你想要的包名已经被使用，那么你就得换一个不同的包名。</p><p>在发布之前，<strong>确保</strong> <code>Cargo.toml</code> 中以下字段已经被设置:</p><ul><li><a href="https://course.rs/cargo/reference/manifest.html#license%E5%92%8Clicense-file" target="_blank" rel="noopener noreferrer">license 或 license-file</a></li><li><a href="https://course.rs/cargo/reference/manifest.html#description" target="_blank" rel="noopener noreferrer">description</a></li><li><a href="https://course.rs/cargo/reference/manifest.html#homepage" target="_blank" rel="noopener noreferrer">homepage</a></li><li><a href="https://course.rs/cargo/reference/manifest.html#documentation" target="_blank" rel="noopener noreferrer">documentation</a></li><li><a href="https://course.rs/cargo/reference/manifest.html#repository" target="_blank" rel="noopener noreferrer">repository</a></li><li><a href="https://course.rs/cargo/reference/manifest.html#readme" target="_blank" rel="noopener noreferrer">readme</a></li></ul><p>你还可以设置<a href="https://course.rs/cargo/reference/manifest.html#keywords" target="_blank" rel="noopener noreferrer">关键字</a>和<a href="https://course.rs/cargo/reference/manifest.html#categories" target="_blank" rel="noopener noreferrer">类别</a>等元信息，让包更容易被其他人搜索发现，虽然它们不是必须的。</p><p>如果你发布的是一个依赖库，那么你可能需要遵循相关的<a href="https://course.rs/practice/naming.html" target="_blank" rel="noopener noreferrer">命名规范</a>和 <a href="https://rust-lang.github.io/api-guidelines/" target="_blank" rel="noopener noreferrer">API Guidlines</a>.</p><h2 id="打包" tabindex="-1"><a class="header-anchor" href="#打包"><span>打包</span></a></h2><p>下一步就是将你的项目进行打包，然后上传到 <code>crates.io</code>。为了实现这个目的，我们可以使用 <code>cargo publish</code> 命令，该命令执行了以下步骤：</p><ol><li>对项目进行一些验证</li><li>将源代码压缩到 <code>.crate</code> 文件中</li><li>将 <code>.crate</code> 文件解压并放入到临时的目录中，并验证解压出的代码可以顺利编译</li><li>上传 <code>.crate</code> 文件到 <code>crates.io</code></li><li>注册服务会对上传的包进行一些额外的验证，然后才会添加它到注册服务列表中</li></ol><p>在发布之前，我们推荐你先运行 <code>cargo publish --dry-run</code> (或 <a href="https://doc.rust-lang.org/stable/cargo/commands/cargo-package.html" target="_blank" rel="noopener noreferrer"><code>cargo package</code></a> ) 命令来确保代码没有 warning 或错误。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> publish</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --dry-run</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>你可以在 <code>target/package</code> 目录下观察生成的 <code>.crate</code> 文件。例如，目前 <code>crates.io</code> 要求该文件的大小不能超过 10MB，你可以通过手动检查该文件的大小来确保不会无意间打包进一些较大的资源文件，比如测试数据、网站文档或生成的代码等。我们还可以使用以下命令来检查其中包含的文件:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> package</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --list</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当打包时，Cargo 会自动根据版本控制系统的配置来忽略指定的文件，例如 <code>.gitignore</code>。除此之外，你还可以通过 <a href="https://course.rs/cargo/reference/manifest.html#exclude%E5%92%8Cinclude" target="_blank" rel="noopener noreferrer"><code>exclude</code></a> 来排除指定的文件:</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ...</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">exclude</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;public/assets/*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;videos/*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想要显式地将某些文件包含其中，可以使用 <code>include</code>，但是需要注意的是，这个 key 一旦设置，那 <code>exclude</code> 就将失效：</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ...</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">include</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;**/*.rs&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;Cargo.toml&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="上传包" tabindex="-1"><a class="header-anchor" href="#上传包"><span>上传包</span></a></h2><p>准备好后，我们就可以正式来上传指定的包了，在根目录中运行：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> publish</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>就是这么简单，恭喜你，完成了第一个包的发布！</p><h2 id="发布已上传包的新版本" tabindex="-1"><a class="header-anchor" href="#发布已上传包的新版本"><span>发布已上传包的新版本</span></a></h2><p>绝大多数时候，我们并不是在发布新包，而是发布已经上传过的包的新版本。</p><p>为了实现这一点，只需修改 <code>Cargo.toml</code> 中的 <a href="https://course.rs/cargo/reference/manifest.html#version" target="_blank" rel="noopener noreferrer"><code>version</code></a> 字段 ，但需要注意：<strong>版本号需要遵循 <code>semver</code> 规则</strong>。</p><p>然后再次使用 <code>cargo publish</code> 就可以上传新的版本了。</p><h2 id="管理-crates-io-上的包" tabindex="-1"><a class="header-anchor" href="#管理-crates-io-上的包"><span>管理 crates.io 上的包</span></a></h2><p>目前来说，管理包更多地是通过 <code>cargo</code> 命令而不是在线管理，下面是一些你可以使用的命令。</p><h4 id="cargo-yank" tabindex="-1"><a class="header-anchor" href="#cargo-yank"><span>cargo yank</span></a></h4><p>有的时候你会遇到发布的包版本实际上并不可用(例如语法错误，或者忘记包含一个文件等)，对于这种情况，Cargo 提供了 yank 命令:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yank</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --vers</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1.0.1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yank</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --vers</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1.0.1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --undo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>该命令<strong>并不能删除任何代码</strong>，例如如果你上传了一段隐私内容，你需要的是立刻重置它们，而不是使用 <code>cargo yank</code>。</p><p><code>yank</code> 能做到的就是让其它人不能再使用这个版本作为依赖，但是现存的依赖依然可以继续工作。<code>crates.io</code> 的一个主要目标就是作为一个不会随着时间变化的永久性包存档，但<strong>删除某个版本显然违背了这个目标</strong>。</p><h4 id="cargo-owner" tabindex="-1"><a class="header-anchor" href="#cargo-owner"><span>cargo owner</span></a></h4><p>一个包可能会有多个主要开发者，甚至维护者 maintainer 都会发生变更。目前来说，只有包的 owner 才能发布新的版本，但是一个 owner 可以指定其它的用户为 owner:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> owner</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> github-handle</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> owner</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --remove</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> github-handle</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> owner</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> github:rust-lang:owners</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> owner</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --remove</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> github:rust-lang:owners</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令中使用的 ownerID 必须是 GitHub 用户名或 Team 名。</p><p>一旦一个用户 <code>B</code> 通过 <code>--add</code> 被加入到 <code>owner</code> 列表中，他将拥有该包相关的所有权利。例如发布新版本、yank 一个版本，还能增加和移除 owner，包含添加 <code>B</code> 为 owner 的 <code>A</code> 都可以被移除！</p><p>因此，我们必须严肃的指出：<strong>不要将你不信任的人添加为 owner !</strong> 免得哪天反目成仇后，他把你移除了 - , -</p><p>但是对于 Team 又有所不同，通过 <code>-add</code> 添加的 GitHub Team owner，只拥有受限的权利。它们可以发布或 yank 某个版本，但是他们<strong>不能添加或移除</strong> owner！总之，Team 除了可以很方便的管理所有者分组的同时，还能防止一些未知的恶意。</p><p>如果大家在添加 team 时遇到问题，可以看看官方的<a href="https://doc.rust-lang.org/stable/cargo/reference/publishing.html#github-permissions" target="_blank" rel="noopener noreferrer">相关文档</a>，由于绝大多数人都无需此功能，因此这里不再详细展开。</p>`,48)]))}const o=i(r,[["render",t],["__file","publishing-on-crates.io.html.vue"]]),c=JSON.parse('{"path":"/cargo/reference/publishing-on-crates.io.html","title":"发布到 crates.io","lang":"zh-CN","frontmatter":{"description":"发布到 crates.io 如果你想要把自己的开源项目分享给全世界，那最好的办法自然是 GitHub。但如果是 Rust 的库，那除了发布到 GitHub 外，我们还可以将其发布到 crates.io 上，然后其它用户就可以很简单的对其进行引用。 注意：发布包到 crates.io 后，特定的版本无法被覆盖，要发布就必须使用新的版本号，代码也无法被删除...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/cargo/reference/publishing-on-crates.io.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"发布到 crates.io"}],["meta",{"property":"og:description","content":"发布到 crates.io 如果你想要把自己的开源项目分享给全世界，那最好的办法自然是 GitHub。但如果是 Rust 的库，那除了发布到 GitHub 外，我们还可以将其发布到 crates.io 上，然后其它用户就可以很简单的对其进行引用。 注意：发布包到 crates.io 后，特定的版本无法被覆盖，要发布就必须使用新的版本号，代码也无法被删除..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"发布到 crates.io\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{},"readingTime":{"minutes":5.22,"words":1566},"filePathRelative":"cargo/reference/publishing-on-crates.io.md","excerpt":"\\n<p>如果你想要把自己的开源项目分享给全世界，那最好的办法自然是 GitHub。但如果是 Rust 的库，那除了发布到 GitHub 外，我们还可以将其发布到 <a href=\\"https://crates.io\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">crates.io</a> 上，然后其它用户就可以很简单的对其进行引用。</p>\\n<blockquote>\\n<p>注意：发布包到 <code>crates.io</code> 后，特定的版本无法被覆盖，要发布就必须使用新的版本号，代码也无法被删除!</p>\\n</blockquote>\\n<h2>首次发布之前</h2>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"},{"title":"manifest","link":"cargo/reference/manifest.html"}],"localMap":{"nodes":[{"id":"cargo/reference/publishing-on-crates.io.md","value":{"title":"publishing-on-crates.io","path":"cargo/reference/publishing-on-crates.io.md","outlink":[],"backlink":["SUMMARY.md","cargo/reference/manifest.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}},{"id":"cargo/reference/manifest.md","value":{"title":"manifest","path":"cargo/reference/manifest.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"cargo/reference/publishing-on-crates.io.md"},{"source":"cargo/reference/manifest.md","target":"cargo/reference/publishing-on-crates.io.md"}]}}}');export{o as comp,c as data};
