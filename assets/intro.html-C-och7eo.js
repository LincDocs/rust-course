import{_ as t,e as s,k as e,o as a}from"./app-DxZopsRG.js";const n={};function r(l,i){return a(),s("div",null,i[0]||(i[0]=[e(`<h1 id="糟糕的单向链表栈" tabindex="-1"><a class="header-anchor" href="#糟糕的单向链表栈"><span>糟糕的单向链表栈</span></a></h1><p>本章，让我们用一个不咋样的单向链表来实现一个栈数据结构，因为不咋样，实现起来倒是很简单。</p><p>首先，创建一个文件 <code>src/first.rs</code> 用于存放本章节的链表代码，虽然糟糕，也不能用完就扔，大家说是不 😛 然后在 <code>lib.rs</code> 中添加这一行代码：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// in lib.rs</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pub</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> mod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> first;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,4)]))}const d=t(n,[["render",r],["__file","intro.html.vue"]]),c=JSON.parse('{"path":"/too-many-lists/bad-stack/intro.html","title":"糟糕的单向链表栈","lang":"zh-CN","frontmatter":{"description":"糟糕的单向链表栈 本章，让我们用一个不咋样的单向链表来实现一个栈数据结构，因为不咋样，实现起来倒是很简单。 首先，创建一个文件 src/first.rs 用于存放本章节的链表代码，虽然糟糕，也不能用完就扔，大家说是不 😛 然后在 lib.rs 中添加这一行代码：","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/too-many-lists/bad-stack/intro.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"糟糕的单向链表栈"}],["meta",{"property":"og:description","content":"糟糕的单向链表栈 本章，让我们用一个不咋样的单向链表来实现一个栈数据结构，因为不咋样，实现起来倒是很简单。 首先，创建一个文件 src/first.rs 用于存放本章节的链表代码，虽然糟糕，也不能用完就扔，大家说是不 😛 然后在 lib.rs 中添加这一行代码："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"糟糕的单向链表栈\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.35,"words":105},"filePathRelative":"too-many-lists/bad-stack/intro.md","excerpt":"\\n<p>本章，让我们用一个不咋样的单向链表来实现一个栈数据结构，因为不咋样，实现起来倒是很简单。</p>\\n<p>首先，创建一个文件 <code>src/first.rs</code> 用于存放本章节的链表代码，虽然糟糕，也不能用完就扔，大家说是不 😛 然后在 <code>lib.rs</code> 中添加这一行代码：</p>\\n<div class=\\"language-rust line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust\\" data-title=\\"rust\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// in lib.rs</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">pub</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> mod</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> first;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"too-many-lists/bad-stack/intro.md","value":{"title":"intro","path":"too-many-lists/bad-stack/intro.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"too-many-lists/bad-stack/intro.md"}]}}}');export{d as comp,c as data};
