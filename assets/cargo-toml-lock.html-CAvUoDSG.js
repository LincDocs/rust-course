import{_ as s,e as a,k as e,o as n}from"./app-DEcddxss.js";const l={};function t(o,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="cargo-toml-vs-cargo-lock" tabindex="-1"><a class="header-anchor" href="#cargo-toml-vs-cargo-lock"><span>Cargo.toml vs Cargo.lock</span></a></h1><p><code>Cargo.toml</code> 和 <code>Cargo.lock</code> 是 <code>Cargo</code> 的两个元配置文件，但是它们拥有不同的目的:</p><ul><li>前者从用户的角度出发来描述项目信息和依赖管理，因此它是由用户来编写</li><li>后者包含了依赖的精确描述信息，它是由 <code>Cargo</code> 自行维护，因此不要去手动修改</li></ul><p>它们的关系跟 <code>package.json</code> 和 <code>package-lock.json</code> 非常相似，从 JavaScript 过来的同学应该会比较好理解。</p><h2 id="是否上传本地的-cargo-lock" tabindex="-1"><a class="header-anchor" href="#是否上传本地的-cargo-lock"><span>是否上传本地的 <code>Cargo.lock</code></span></a></h2><p>当本地开发时，<code>Cargo.lock</code> 自然是非常重要的，但是当你要把项目上传到 <code>Git</code> 时，例如 <code>GitHub</code>，那是否上传 <code>Cargo.lock</code> 就成了一个问题。</p><p>关于是否上传，有如下经验准则:</p><ul><li>从实践角度出发，如果你构建的是三方库类型的服务，请把 <code>Cargo.lock</code> 加入到 <code>.gitignore</code> 中。</li><li>若构建的是一个面向用户终端的产品，例如可以像命令行工具、应用程序一样执行，那就把 <code>Cargo.lock</code> 上传到源代码目录中。</li></ul><p>例如 <a href="https://github.com/tokio-rs/axum" target="_blank" rel="noopener noreferrer"><code>axum</code></a> 是 web 开发框架，它属于三方库类型的服务，因此源码目录中不应该出现 <code>Cargo.lock</code> 的身影，它的归宿是 <code>.gitignore</code>。而 <a href="https://github.com/BurntSushi/ripgrep" target="_blank" rel="noopener noreferrer"><code>ripgrep</code></a> 则恰恰相反，因为它是一个面向终端的产品，可以直接运行提供服务。</p><p><strong>那么问题来了，为何会有这种选择？</strong></p><p>原因是 <code>Cargo.lock</code> 会详尽描述上一次成功构建的各种信息：环境状态、依赖、版本等等，Cargo 可以使用它提供确定性的构建环境和流程，无论何时何地。这种特性对于终端服务是非常重要的：能确定、稳定的在用户环境中运行起来是终端服务最重要的特性之一。</p><p>而对于三方库来说，情况就有些不同。它不仅仅被库的开发者所使用，还会间接影响依赖链下游的使用者。用户引入了三方库是不会去看它的 <code>Cargo.lock</code> 信息的，也不应该受这个库的确定性运行条件所限制。</p><p>还有个原因，在项目中，可能会有几个依赖库引用同一个三方库的同一个版本，那如果该三方库使用了 <code>Cargo.lock</code> 文件，那可能三方库的多个版本会被引入使用，这时就会造成版本冲突。换句话说，通过指定版本的方式引用一个依赖库是无法看到该依赖库的完整情况的，而只有终端的产品才会看到这些完整的情况。</p><h2 id="假设没有-cargo-lock" tabindex="-1"><a class="header-anchor" href="#假设没有-cargo-lock"><span>假设没有 <code>Cargo.lock</code></span></a></h2><p><code>Cargo.toml</code> 是一个清单文件( <code>manifest</code> )包含了我们 <code>package</code> 的描述元数据。例如，通过以下内容可以说明对另一个 <code>package</code> 的依赖 :</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;hello_world&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;0.1.0&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">regex</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;https://github.com/rust-lang/regex.git&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，只有一个依赖，且该依赖的来源是 <code>GitHub</code> 上一个特定的仓库。由于我们没有指定任何版本信息，<code>Cargo</code> 会自动拉取该依赖库的最新版本( <code>master</code> 或 <code>main</code> 分支上的最新 <code>commit</code> )。</p><p>这种使用方式，其实就错失了包管理工具的最大的优点：版本管理。例如你在今天构建使用了版本 <code>A</code>，然后过了一段时间后，由于依赖包的升级，新的构建却使用了大更新版本 <code>B</code>，结果因为版本不兼容，导致了构建失败。</p><p>可以看出，确保依赖版本的确定性是非常重要的:</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">regex</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;https://github.com/rust-lang/regex.git&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rev</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;9f9f693&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这次，我们使用了指定 <code>rev</code> ( <code>revision</code> ) 的方式来构建，那么不管未来何时再次构建，使用的依赖库都会是该 <code>rev</code> ，而不是最新的 <code>commit</code>。</p><p>但是，这里还有一个问题：<code>rev</code> 需要手动的管理，你需要在每次更新包的时候都思考下 <code>SHA-1</code>，这显然非常麻烦。</p><h2 id="当有了-cargo-lock-后" tabindex="-1"><a class="header-anchor" href="#当有了-cargo-lock-后"><span>当有了 <code>Cargo.lock</code> 后</span></a></h2><p>当有了 <code>Cargo.lock</code> 后，我们无需手动追踪依赖库的 <code>rev</code>，<code>Cargo</code> 会自动帮我们完成，还是之前的清单:</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;hello_world&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;0.1.0&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">regex</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;https://github.com/rust-lang/regex.git&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一次构建时，<code>Cargo</code> 依然会拉取最新的 <code>master commit</code>，然后将以下信息写到 <code>Cargo.lock</code> 文件中:</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;hello_world&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;0.1.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;regex 1.5.0 (git+https://github.com/rust-lang/regex.git#9f9f693768c584971a4d53bc3c586c33ed3a6831)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;regex&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;1.5.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">source</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;git+https://github.com/rust-lang/regex.git#9f9f693768c584971a4d53bc3c586c33ed3a6831&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，其中包含了依赖库的准确 <code>rev</code> 信息。当未来再次构建时，只要项目中还有该 <code>Cargo.lock</code> 文件，那构建依然会拉取同一个版本的依赖库，并且再也无需我们手动去管理 <code>rev</code> 的 <code>SHA</code> 信息!</p><h2 id="更新依赖" tabindex="-1"><a class="header-anchor" href="#更新依赖"><span>更新依赖</span></a></h2><p>由于 <code>Cargo.lock</code> 会锁住依赖的版本，你需要通过手动的方式将依赖更新到新的版本：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cargo</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            # 更新所有依赖</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cargo</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> regex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   # 只更新 “</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">regex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">”</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>以上命令将使用新的版本信息重新生成 <code>Cargo.lock</code> ，需要注意的是 <code>cargo update -p regex</code> 传递的参数实际上是一个 <code>Package ID</code>， <code>regex</code> 只是一个简写形式。</p>`,32)]))}const d=s(l,[["render",t],["__file","cargo-toml-lock.html.vue"]]),r=JSON.parse('{"path":"/cargo/guide/cargo-toml-lock.html","title":"Cargo.toml vs Cargo.lock","lang":"zh-CN","frontmatter":{"description":"Cargo.toml vs Cargo.lock Cargo.toml 和 Cargo.lock 是 Cargo 的两个元配置文件，但是它们拥有不同的目的: 前者从用户的角度出发来描述项目信息和依赖管理，因此它是由用户来编写 后者包含了依赖的精确描述信息，它是由 Cargo 自行维护，因此不要去手动修改 它们的关系跟 package.json 和 pa...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/cargo/guide/cargo-toml-lock.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"Cargo.toml vs Cargo.lock"}],["meta",{"property":"og:description","content":"Cargo.toml vs Cargo.lock Cargo.toml 和 Cargo.lock 是 Cargo 的两个元配置文件，但是它们拥有不同的目的: 前者从用户的角度出发来描述项目信息和依赖管理，因此它是由用户来编写 后者包含了依赖的精确描述信息，它是由 Cargo 自行维护，因此不要去手动修改 它们的关系跟 package.json 和 pa..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Cargo.toml vs Cargo.lock\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{},"readingTime":{"minutes":4.24,"words":1271},"filePathRelative":"cargo/guide/cargo-toml-lock.md","excerpt":"\\n<p><code>Cargo.toml</code> 和 <code>Cargo.lock</code> 是 <code>Cargo</code> 的两个元配置文件，但是它们拥有不同的目的:</p>\\n<ul>\\n<li>前者从用户的角度出发来描述项目信息和依赖管理，因此它是由用户来编写</li>\\n<li>后者包含了依赖的精确描述信息，它是由 <code>Cargo</code> 自行维护，因此不要去手动修改</li>\\n</ul>\\n<p>它们的关系跟 <code>package.json</code> 和 <code>package-lock.json</code> 非常相似，从 JavaScript 过来的同学应该会比较好理解。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"cargo/guide/cargo-toml-lock.md","value":{"title":"cargo-toml-lock","path":"cargo/guide/cargo-toml-lock.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"cargo/guide/cargo-toml-lock.md"}]}}}');export{d as comp,r as data};
