import{_ as t,e as r,k as o,o as a}from"./app-CbLkK8_H.js";const d={};function c(l,e){return a(),r("div",null,e[0]||(e[0]=[o('<h1 id="构建-build-缓存" tabindex="-1"><a class="header-anchor" href="#构建-build-缓存"><span>构建( Build )缓存</span></a></h1><p><code>cargo build</code> 的结果会被放入项目根目录下的 <code>target</code> 文件夹中，当然，这个位置可以三种方式更改：设置 <code>CARGO_TARGET_DIR</code> <a href="https://doc.rust-lang.org/stable/cargo/reference/environment-variables.html" target="_blank" rel="noopener noreferrer">环境变量</a>、<a href="https://course.rs/cargo/reference/configuration.html#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A6%82%E8%A7%88" target="_blank" rel="noopener noreferrer"><code>build.target-dir</code></a> 配置项以及 <code>--target-dir</code> 命令行参数。</p><h2 id="target-目录结构" tabindex="-1"><a class="header-anchor" href="#target-目录结构"><span>target 目录结构</span></a></h2><p><code>target</code> 目录的结构取决于是否使用 <code>--target</code> 标志为特定的平台构建。</p><h4 id="不使用-target" tabindex="-1"><a class="header-anchor" href="#不使用-target"><span>不使用 --target</span></a></h4><p>若 <code>--target</code> 标志没有指定，<code>Cargo</code> 会根据宿主机架构进行构建，构建结果会放入项目根目录下的 <code>target</code> 目录中，<code>target</code> 下每个子目录中包含了相应的 <a href="https://course.rs/cargo/reference/profiles.html" target="_blank" rel="noopener noreferrer"><code>发布配置profile</code></a> 的构建结果，例如 <code>release</code>、<code>debug</code> 是自带的<code>profile</code>，前者往往用于生产环境，因为会做大量的性能优化，而后者则用于开发环境，此时的编译效率和报错信息是最好的。</p><p>除此之外我们还可以定义自己想要的 <code>profile</code> ，例如用于测试环境的 <code>profile</code>： <code>test</code>，用于预发环境的 <code>profile</code> ：<code>pre-prod</code> 等。</p><table><thead><tr><th>目录</th><th>描述</th></tr></thead><tbody><tr><td><code>target/debug/</code></td><td>包含了 <code>dev</code> profile 的构建输出(<code>cargo build</code> 或 <code>cargo build --debug</code>)</td></tr><tr><td><code>target/release/</code></td><td><code>release</code> profile 的构建输出，<code>cargo build --release</code></td></tr><tr><td><code>target/foo/</code></td><td>自定义 <code>foo</code> profile 的构建输出，<code>cargo build --profile=foo</code></td></tr></tbody></table><p>出于历史原因:</p><ul><li><code>dev</code> 和 <code>test</code> profile 的构建结果都存放在 <code>debug</code> 目录下</li><li><code>release</code> 和 <code>bench</code> profile 则存放在 <code>release</code> 目录下</li><li>用户定义的 profile 存在同名的目录下</li></ul><h4 id="使用-target" tabindex="-1"><a class="header-anchor" href="#使用-target"><span>使用 --target</span></a></h4><p>当使用 <code>--target XXX</code> 为特定的平台编译后，输出会放在 <code>target/XXX/</code> 目录下:</p><table><thead><tr><th>目录</th><th>示例</th></tr></thead><tbody><tr><td><code>target/&lt;triple&gt;/debug/</code></td><td><code>target/thumbv7em-none-eabihf/debug/</code></td></tr><tr><td><code>target/&lt;triple&gt;/release/</code></td><td><code>target/thumbv7em-none-eabihf/release/</code></td></tr></tbody></table><blockquote><p><strong>注意：</strong>，当没有使用 <code>--target</code> 时，<code>Cargo</code> 会与构建脚本和过程宏一起共享你的依赖包，对于每个 <code>rustc</code> 命令调用而言，<a href="https://course.rs/cargo/reference/configuration.html#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A6%82%E8%A7%88" target="_blank" rel="noopener noreferrer"><code>RUSTFLAGS</code></a> 也将被共享。</p><p>而使用 <code>--target</code> 后，构建脚本、过程宏会针对宿主机的 CPU 架构进行各自构建，且不会共享 <code>RUSTFLAGS</code>。</p></blockquote><h4 id="target-子目录说明" tabindex="-1"><a class="header-anchor" href="#target-子目录说明"><span>target 子目录说明</span></a></h4><p>在 profile 文件夹中(例如 <code>debug</code> 或 <code>release</code>)，包含编译后的最终成果:</p><table><thead><tr><th>目录</th><th>描述</th></tr></thead><tbody><tr><td><code>target/debug/</code></td><td>包含编译后的输出，例如二进制可执行文件、<a href="https://course.rs/cargo/reference/cargo-target.html#%E5%BA%93%E5%AF%B9%E8%B1%A1library" target="_blank" rel="noopener noreferrer">库对象( library target )</a></td></tr><tr><td><code>target/debug/examples/</code></td><td>包含<a href="https://course.rs/cargo/reference/cargo-target.html#%E7%A4%BA%E4%BE%8B%E5%AF%B9%E8%B1%A1examples" target="_blank" rel="noopener noreferrer">示例对象( example target )</a></td></tr></tbody></table><p>还有一些命令会在 <code>target</code> 下生成自己的独立目录:</p><table><thead><tr><th>目录</th><th>描述</th></tr></thead><tbody><tr><td><code>target/doc/</code></td><td>包含通过 <code>cargo doc</code> 生成的文档</td></tr><tr><td><code>target/package/</code></td><td>包含 <code>cargo package</code> 或 <code>cargo publish</code> 生成的输出</td></tr></tbody></table><p>Cargo 还会创建几个用于构建过程的其它类型目录，它们的目录结构只应该被 Cargo 自身使用，因此可能会在未来发生变化:</p><table><thead><tr><th>目录</th><th>描述</th></tr></thead><tbody><tr><td><code>target/debug/deps</code></td><td>依赖和其它输出成果</td></tr><tr><td><code>target/debug/incremental</code></td><td><code>rustc</code> <a href="https://course.rs/cargo/reference/profiles.html#incremental" target="_blank" rel="noopener noreferrer">增量编译</a>的输出，该缓存可以用于提升后续的编译速度</td></tr><tr><td><code>target/debug/build/</code></td><td><a href="https://course.rs/cargo/reference/build-script/intro.html" target="_blank" rel="noopener noreferrer">构建脚本</a>的输出</td></tr></tbody></table><h2 id="依赖信息文件" tabindex="-1"><a class="header-anchor" href="#依赖信息文件"><span>依赖信息文件</span></a></h2><p>在每一个编译成果的旁边，都有一个依赖信息文件，文件后缀是 <code>.d</code>。该文件的语法类似于 <code>Makefile</code>，用于说明构建编译成果所需的所有依赖包。</p><p>该文件往往用于提供给外部的构建系统，这样它们就可以判断 <code>Cargo</code> 命令是否需要再次被执行。</p><p>文件中的路径默认是绝对路径，你可以通过 <a href="https://course.rs/cargo/reference/configuration.html#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A6%82%E8%A7%88" target="_blank" rel="noopener noreferrer"><code>build.dep-info-basedir</code></a> 配置项来修改为相对路径。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 关于 `.d` 文件的一个示例 : target/debug/foo.d</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/path/to/myproj/target/debug/foo:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /path/to/myproj/src/lib.rs</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /path/to/myproj/src/main.rs</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="共享缓存" tabindex="-1"><a class="header-anchor" href="#共享缓存"><span>共享缓存</span></a></h2><p><a href="https://github.com/mozilla/sccache" target="_blank" rel="noopener noreferrer">sccache</a> 是一个三方工具，可以用于在不同的工作空间中共享已经构建好的依赖包。</p><p>为了设置 <code>sccache</code>，首先需要使用 <code>cargo install sccache</code> 进行安装，然后在调用 <code>Cargo</code> 之前将 <code>RUSTC_WRAPPER</code> 环境变量设置为 <code>sccache</code>。</p><ul><li>如果用的 <code>bash</code>，可以将 <code>export RUSTC_WRAPPER=sccache</code> 添加到 <code>.bashrc</code> 中</li><li>也可以使用 <a href="https://course.rs/cargo/reference/configuration.html#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A6%82%E8%A7%88" target="_blank" rel="noopener noreferrer"><code>build.rustc-wrapper</code></a> 配置项</li></ul>',30)]))}const n=t(d,[["render",c],["__file","build-cache.html.vue"]]),s=JSON.parse('{"path":"/cargo/guide/build-cache.html","title":"构建( Build )缓存","lang":"zh-CN","frontmatter":{"description":"构建( Build )缓存 cargo build 的结果会被放入项目根目录下的 target 文件夹中，当然，这个位置可以三种方式更改：设置 CARGO_TARGET_DIR 环境变量、build.target-dir 配置项以及 --target-dir 命令行参数。 target 目录结构 target 目录的结构取决于是否使用 --target...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/cargo/guide/build-cache.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"构建( Build )缓存"}],["meta",{"property":"og:description","content":"构建( Build )缓存 cargo build 的结果会被放入项目根目录下的 target 文件夹中，当然，这个位置可以三种方式更改：设置 CARGO_TARGET_DIR 环境变量、build.target-dir 配置项以及 --target-dir 命令行参数。 target 目录结构 target 目录的结构取决于是否使用 --target..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"构建( Build )缓存\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{},"readingTime":{"minutes":3.27,"words":982},"filePathRelative":"cargo/guide/build-cache.md","excerpt":"\\n<p><code>cargo build</code> 的结果会被放入项目根目录下的 <code>target</code> 文件夹中，当然，这个位置可以三种方式更改：设置 <code>CARGO_TARGET_DIR</code> <a href=\\"https://doc.rust-lang.org/stable/cargo/reference/environment-variables.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">环境变量</a>、<a href=\\"https://course.rs/cargo/reference/configuration.html#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A6%82%E8%A7%88\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>build.target-dir</code></a> 配置项以及 <code>--target-dir</code> 命令行参数。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"cargo/guide/build-cache.md","value":{"title":"build-cache","path":"cargo/guide/build-cache.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"cargo/guide/build-cache.md"}]}}}');export{n as comp,s as data};
