import{_ as e,e as s,k as i,o as a}from"./app-Gi6ydBTW.js";const r={};function n(o,t){return a(),s("div",null,t[0]||(t[0]=[i(`<h1 id="最佳实践" tabindex="-1">最佳实践</h1><p>https://www.reddit.com/r/rust/comments/rgjsbt/whats_your_top_rust_tip_crate_tool_other_for/</p><p>https://www.reddit.com/r/rust/comments/rnmmqz/question_how_to_keep_code_dry_when_many_similar/</p><p>https://www.reddit.com/r/rust/comments/rrgho1/what_is_the_recommended_way_to_use_a_library/</p><h2 id="最佳开发流程workflow" tabindex="-1">最佳开发流程workflow</h2><p>cargo watch<br> https://www.reddit.com/r/rust/comments/rxrkbo/what_is_your_workflow_when_working_with_rust/</p><h2 id="测试文件组织结构" tabindex="-1">测试文件组织结构</h2><p>https://www.reddit.com/r/rust/comments/rsuhnn/need_a_piece_of_advice_about_organising_tests/</p><h2 id="git备份" tabindex="-1">git备份</h2><p>https://github.com/tkellogg/dura</p><h2 id="code-cover" tabindex="-1">code cover</h2><p>https://docs.codecov.com/docs</p><h2 id="clippy" tabindex="-1">clippy</h2><p>https://www.reddit.com/r/rust/comments/s62xu0/inspect_enum_variant_size_differences/</p><h2 id="todo" tabindex="-1">todo</h2><p>unimplemented!() todo!()</p><h2 id="如何获知变量类型或者函数的返回类型" tabindex="-1">如何获知变量类型或者函数的返回类型</h2><p>有几种常用的方式:</p><ul><li>第一种是查询标准库或者三方库文档，搜索<code>File</code>，然后找到它的<code>open</code>方法，但是此处更推荐第二种方法:</li><li>在[Rust IDE]章节，我们推荐了<code>VSCode</code> IED和<code>rust-analyze</code>插件，如果你成功安装的话，那么就可以在<code>VScode</code>中很方便的通过代码跳转的方式查看代码，同时<code>rust-analyze</code>插件还会对代码中的类型进行标注，非常方便好用！</li><li>你还可以尝试故意标记一个错误的类型，然后让编译器告诉你:</li></ul><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">u32</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> File</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello.txt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>错误提示如下：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">error[E0308]: mismatched types</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> --&gt; src/main.rs:4:18</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">4 |     let f: u32 = File::open(&quot;hello.txt&quot;);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  |                  ^^^^^^^^^^^^^^^^^^^^^^^ expected u32, found enum</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\`std::result::Result\`</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  = note: expected type \`u32\`</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">             found type \`std::result::Result&lt;std::fs::File, std::io::Error&gt;\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="代码风格-todo" tabindex="-1">代码风格(todo)</h1><p>https://www.reddit.com/r/rust/comments/rlsatb/generically_working_with_futuressinkstream/</p>`,24)]))}const d=e(r,[["render",n],["__file","best-pratice.html.vue"]]),p=JSON.parse('{"path":"/practice/best-pratice.html","title":"最佳实践","lang":"zh-CN","frontmatter":{"description":"最佳实践 https://www.reddit.com/r/rust/comments/rgjsbt/whats_your_top_rust_tip_crate_tool_other_for/ https://www.reddit.com/r/rust/comments/rnmmqz/question_how_to_keep_code_dry_when...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/practice/best-pratice.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"最佳实践"}],["meta",{"property":"og:description","content":"最佳实践 https://www.reddit.com/r/rust/comments/rgjsbt/whats_your_top_rust_tip_crate_tool_other_for/ https://www.reddit.com/r/rust/comments/rnmmqz/question_how_to_keep_code_dry_when..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"最佳实践\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.9,"words":270},"filePathRelative":"practice/best-pratice.md","excerpt":"\\n<p>https://www.reddit.com/r/rust/comments/rgjsbt/whats_your_top_rust_tip_crate_tool_other_for/</p>\\n<p>https://www.reddit.com/r/rust/comments/rnmmqz/question_how_to_keep_code_dry_when_many_similar/</p>\\n<p>https://www.reddit.com/r/rust/comments/rrgho1/what_is_the_recommended_way_to_use_a_library/</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"practice/best-pratice.md","value":{"title":"best-pratice","path":"practice/best-pratice.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"practice/best-pratice.md"}]}}}');export{d as comp,p as data};
