import{_ as i,e as a,k as e,o as t}from"./app-EdzFxLY3.js";const n={};function l(r,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="rust-新版解读-1-60-重点-查看-cargo-构建耗时详情、cargo-feature-增加新语法" tabindex="-1"><a class="header-anchor" href="#rust-新版解读-1-60-重点-查看-cargo-构建耗时详情、cargo-feature-增加新语法"><span>Rust 新版解读 | 1.60 | 重点: 查看 Cargo 构建耗时详情、Cargo Feature 增加新语法</span></a></h1><blockquote><p>原文链接: https://blog.rust-lang.org/2022/04/07/Rust-1.60.0.html</p></blockquote><p>通过 <a href="https://www.rust-lang.org/tools/install" target="_blank" rel="noopener noreferrer">rustup</a> 安装的同学可以使用以下命令升级到 1.60 版本:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rustup</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stable</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="基于源码的代码覆盖" tabindex="-1"><a class="header-anchor" href="#基于源码的代码覆盖"><span>基于源码的代码覆盖</span></a></h2><p>rustc 新增了基于 LLVM 的代码覆盖率测量，想要测试的同学可以通过以下方式重新构建你的项目:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> RUSTFLAGS=&quot;-C instrument-coverage&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行新生成的可执行文件将在当前目录下产生一个 <code>default.profraw</code> 文件( 路径和文件名可以通过环境变量进行<a href="https://doc.rust-lang.org/stable/rustc/instrument-coverage.html#running-the-instrumented-binary-to-generate-raw-coverage-profiling-data" target="_blank" rel="noopener noreferrer">覆盖</a> )。</p><p><code>llvm-tools-preview</code> 组件包含了 <code>llvm-profdata</code>，可以用于处理和合并<ruby>原生的测量结果输出<rt>raw profile output)</rt></ruby>(测量区域执行数)。</p><p><code>llvm-cov</code> 用于报告生成，它将 <code>llvm-profdata</code> 处理后的输出跟二进制可执行文件自身相结合，对于前者大家可能好理解，但是为何要跟后者可执行文件相结合呢？原因在于可执行文件中嵌入了一个从计数器到实际源代码单元的映射。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rustup</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> component</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> llvm-tools-preview</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rustc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --print</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sysroot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)/lib/rustlib/x86_64-unknown-linux-gnu/bin/llvm-profdata merge -sparse default.profraw -o default.profdata</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rustc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --print</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sysroot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)/lib/rustlib/x86_64-unknown-linux-gnu/bin/llvm-cov show </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">-Xdemangler</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">rustfilt</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> target/debug/coverage-testing</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    -instr-profile=default.profdata</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    -show-line-counts-or-regions</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    -show-instantiations</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于一个简单的 hello world 可执行文件，执行以上命令就可以获得如下带有标记的结果：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello, world!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从结果中可以看出：每一行代码都已经被成功覆盖。</p><p>如果大家还想要了解更多，可以看下<a href="https://doc.rust-lang.org/rustc/instrument-coverage.html" target="_blank" rel="noopener noreferrer">官方的 rustc 文档</a>。目前来说，基准功能已经稳定了，并将以某种形式存在于未来所有的 Rust 发布版本中。 但输出格式和产生这些输出的 LLVM 工具可能依然会发生变化，基于此，大家在使用时需要确保 <code>llvm-tools-preview</code> 和 rustc ( 用于编译代码的 )使用了相同的版本。</p><h2 id="查看-cargo-构建耗时" tabindex="-1"><a class="header-anchor" href="#查看-cargo-构建耗时"><span>查看 Cargo 构建耗时</span></a></h2><p>新版本中，以下命令已经可以正常使用了:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --timings</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   Compiling</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello-world</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v0.1.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (hello-world)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      Timing</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> report</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> saved</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> target/cargo-timings/cargo-timing-20220318T174818Z.html</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Finished</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dev</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [unoptimized </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> debuginfo]</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">in</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 0.98s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此命令会生成一个 <code>cargo build</code> 的耗时详情报告，除了上面提到的路径外，报告还会被拷贝到 <code>target/cargo-timings/cargo-timing.html</code>。这里是一个<a href="https://blog.rust-lang.org/images/2022-04-07-timing.html" target="_blank" rel="noopener noreferrer">在线示例</a>。该报告在你需要提升构建速度时会非常有用，更多的信息请<a href="https://doc.rust-lang.org/nightly/cargo/reference/timings.html" target="_blank" rel="noopener noreferrer">查看文档</a>。</p><h2 id="cargo-feature-的新语法" tabindex="-1"><a class="header-anchor" href="#cargo-feature-的新语法"><span>Cargo Feature 的新语法</span></a></h2><blockquote><p>关于 Cargo Features ，强烈推荐大家看看 <a href="https://course.rs/cargo/reference/features/intro.html" target="_blank" rel="noopener noreferrer">Cargo 使用指南</a>，可能是目前最好的中文翻译版本。</p></blockquote><p>新版本为 Cargo Features 引入了两个新的语法: 命名空间 ( Namespaced )和弱依赖，它们可以让 features 跟可选依赖进行更好的交互。</p><p>Cargo 支持<a href="https://course.rs/cargo/reference/features/intro.html#%E5%8F%AF%E9%80%89%E4%BE%9D%E8%B5%96" target="_blank" rel="noopener noreferrer">可选依赖</a>已经很久了，例如以下代码所示:</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">jpeg-decoder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.1.20&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">default-features</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">optional</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">features</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 通过开启 jpeg-decoder 依赖的 &quot;rayon\` feture，来启用并行化处理</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">parallel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;jpeg-decoder/rayon&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子有两点值得注意：</p><ul><li>可选依赖 <code>jpeg-decoder</code> 隐式地定义了一个同名的 feature，当启用 <code>jpeg-decoder</code> feature 时将同时启用 <code>jpeg-decoder</code></li><li><code>&quot;jpeg-decoder/rayon&quot;</code> 语法会启用 <code>jpeg-decoder</code> 依赖，并且还会启用 <code>jpeg-decoder</code> 依赖的 <code>rayon</code> feature</li></ul><p>而命名空间正是为了处理第一个问题而出现的。新版本中，我们可以在 <code>[features]</code> 中使用 <code>dep:</code> 前缀来显式地引用一个可选的依赖。再无需像第一点一样：先隐式的将可选依赖暴露为一个 feature，再通过 feature 来启用它。</p><p>这样一来，我们将能更好的定义可选依赖所对应的 feture，包括将可选依赖隐藏在一个更具描述性的 feature 名称后面。</p><p>弱依赖用于处理第二点: 根据第二点，<code>optional-dependency/feature-name</code> 必定会启用 <code>optional-dependency</code> 这个可选依赖。然而在一些场景中，我们只希望在其它 features 已经启用了可选依赖 <code>optional-dependency</code> 时才去启用 <code>feature-name</code> 这个 feature。</p><p>从 1.60 开始，我们可以使用 <code>&quot;package-name?/feature-name&quot;</code> 这种带有 <code>?</code> 形式的语法: 只有当其它项已经启用了可选依赖 <code>package-name</code> 的情况下才去开启给定的 feature <code>feature-name</code>。</p><blockquote><p>译者注：简单来说，要启用 <code>feature</code> 必须需要别人先启用了其前置的可选依赖，再也无法像之前的第二点一样，既能开启可选依赖，又能启用 feature。</p></blockquote><p>例如，我们希望为自己的库增加一些序列化功能，它需要开启某个可选依赖中的指定 feature，可以这么做:</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">serde</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1.0.133&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">optional</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rgb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.8.25&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">optional</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">features</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">serde</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;dep:serde&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;rgb?/serde&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里定义了以下关系:</p><ol><li>开启 <code>serde</code> feature 将启用可选的 <code>serde</code> 依赖</li><li>只有当 <code>rgb</code> 依赖在其它地方已经被启用后，此处才能启用 <code>rgb</code> 的 <code>serde</code> feature</li></ol><h2 id="增量编译重启开启" tabindex="-1"><a class="header-anchor" href="#增量编译重启开启"><span>增量编译重启开启</span></a></h2><p>在 <a href="https://course.rs/appendix/rust-versions/1.59.html" target="_blank" rel="noopener noreferrer">1.59 更新说明中</a>，我们有提到因为某些问题，增量编译被默认关闭了，现在官方修复了其中一些，并且确认目前的状态不会再影响用户的使用，因此在 1.60 版本中，增量编译又重新默认开启了。</p><h2 id="instant-单调性保证" tabindex="-1"><a class="header-anchor" href="#instant-单调性保证"><span>Instant 单调性保证</span></a></h2><blockquote><p>译者注：Instant 可以获取当前的时间，因此保证其单调增长是非常重要的，例如 uuid 的生成往往依赖于时间戳的单调增长，一旦时间回退，就可能出现 uuid 重复的情况。</p></blockquote><p>在目前所有的平台上，<code>Instant</code> 会去尝试使用系统提供的 API 来保证单调性行为( 目前主要针对 tier 1 的平台 )。然而在实际场景中，这种单调性偶尔会因为硬件、虚拟化或操作系统bug 等原因而失效。</p><p>为了解决这些失效或是平台没有提供 API 的情况，<code>Instant::duration_since</code>, <code>Instant::elapsed</code> 和 <code>Instant::sub</code> 现在饱和为零( 这里不太好翻译，原文是 now saturate to zero，大概意思是非负？)。而在老版本中，这种时间回退的情况会导致 panic。</p><p><code>Instant::checked_duration_since</code> 也可以用于检测和处理单调性失败或 <code>Instants</code> 的减法顺序不正确的情况。</p><p>但是目前的解决方法会遮掩一些错误的发生，因此在未来版本中，Rust 可能会重新就某些场景引入 panic 机制。</p><p>在 1.60 版本前，单调性主要通过标准库的互斥锁 Mutex 或原子性 atomic 来保证，但是在 <code>Instant::now()</code> 调用频繁时，可能会导致明显的性能问题。</p>`,44)]))}const p=i(n,[["render",l],["__file","1.60.html.vue"]]),k=JSON.parse('{"path":"/appendix/rust-versions/1.60.html","title":"Rust 新版解读 | 1.60 | 重点: 查看 Cargo 构建耗时详情、Cargo Feature 增加新语法","lang":"zh-CN","frontmatter":{"description":"Rust 新版解读 | 1.60 | 重点: 查看 Cargo 构建耗时详情、Cargo Feature 增加新语法 原文链接: https://blog.rust-lang.org/2022/04/07/Rust-1.60.0.html 通过 rustup 安装的同学可以使用以下命令升级到 1.60 版本: 基于源码的代码覆盖 rustc 新增了基于...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/appendix/rust-versions/1.60.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"Rust 新版解读 | 1.60 | 重点: 查看 Cargo 构建耗时详情、Cargo Feature 增加新语法"}],["meta",{"property":"og:description","content":"Rust 新版解读 | 1.60 | 重点: 查看 Cargo 构建耗时详情、Cargo Feature 增加新语法 原文链接: https://blog.rust-lang.org/2022/04/07/Rust-1.60.0.html 通过 rustup 安装的同学可以使用以下命令升级到 1.60 版本: 基于源码的代码覆盖 rustc 新增了基于..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust 新版解读 | 1.60 | 重点: 查看 Cargo 构建耗时详情、Cargo Feature 增加新语法\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{},"readingTime":{"minutes":5.73,"words":1718},"filePathRelative":"appendix/rust-versions/1.60.md","excerpt":"\\n<blockquote>\\n<p>原文链接: https://blog.rust-lang.org/2022/04/07/Rust-1.60.0.html</p>\\n</blockquote>\\n<p>通过 <a href=\\"https://www.rust-lang.org/tools/install\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">rustup</a> 安装的同学可以使用以下命令升级到 1.60 版本:</p>\\n<div class=\\"language-shell line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"shell\\" data-title=\\"shell\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">$</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> rustup</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> update</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> stable</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"appendix/rust-versions/1.60.md","value":{"title":"1.60","path":"appendix/rust-versions/1.60.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"appendix/rust-versions/1.60.md"}]}}}');export{p as comp,k as data};
