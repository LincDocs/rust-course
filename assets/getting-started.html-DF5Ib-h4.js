import{_ as i,e,k as a,o as l}from"./app-DxZopsRG.js";const n={};function t(h,s){return l(),e("div",null,s[0]||(s[0]=[a(`<h1 id="上手使用" tabindex="-1"><a class="header-anchor" href="#上手使用"><span>上手使用</span></a></h1><p>Cargo 会在安装 Rust 的时候一并进行安装，无需我们手动的操作执行，安装 Rust 参见<a href="https://course.rs/first-try/installation.html" target="_blank" rel="noopener noreferrer">这里</a>。</p><p>在开始之前，先来明确一个名词: <code>Package</code>，由于 <code>Crate</code> 被翻译成包，因此 <code>Package</code> 再被翻译成包就很不合适，经过斟酌，我们决定翻译成项目，你也可以理解为工程、软件包，总之，在本书中<code>Package</code> 意味着项目，而项目也意味着 <code>Package</code> 。</p><p>安装完成后，接下来使用 <code>Cargo</code> 来创建一个新的<a href="https://course.rs/basic/crate-module/crate.html" target="_blank" rel="noopener noreferrer">二进制项目</a>，二进制意味着该项目可以作为一个服务运行或被编译成可执行文件运行。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cargo</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> new</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> hello_world</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里我们使用 <code>cargo new</code> 创建一个新的项目 ，事实上该命令等价于 <code>cargo new hello_world --bin</code>，<code>bin</code> 是 <code>binary</code> 的简写，代表着二进制程序，由于 <code>--bin</code> 是默认参数，因此可以对其进行省略。</p><p>创建成功后，先来看看项目的基本目录结构长啥样：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello_world</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tree</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">.</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Cargo.toml</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">└──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> src</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    └──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main.rs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> directory,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> files</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有一个很显眼的文件 <code>Cargo.toml</code>，一看就知道它是 <code>Cargo</code> 使用的配置文件，这个关系类似于： <code>package.json</code> 是 <code>npm</code> 的配置文件。</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello_world&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.1.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">edition</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;2021&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上就是 <code>Cargo.toml</code> 的全部内容，它被称之为清单( manifest )，包含了 <code>Cargo</code> 编译程序所需的所有元数据。</p><p>下面是 <code>src/main.rs</code> 的内容 ：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello, world!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出 <code>Cargo</code> 还为我们自动生成了一个 <code>hello world</code> 程序，或者说<a href="https://course.rs/basic/crate-module/crate.html" target="_blank" rel="noopener noreferrer">二进制包</a>，对程序进行编译构建：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   Compiling</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello_world</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v0.1.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (file:///path/to/package/hello_world)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再运行编译出的二进制可执行文件:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./target/debug/hello_world</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Hello,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> world!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意到路径中的 <code>debug</code> 了吗？它说明我们刚才的编译是 <code>Debug</code> 模式，该模式主要用于测试目的，如果想要进行生产编译，我们需要使用 <code>Release</code> 模式 <code>cargo build --release</code>，然后通过 <code>./target/release/hello_world</code> 运行。</p><p>除了上面的编译 + 运行方式外，在日常开发中，我们还可以使用一个简单的命令直接运行:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     Fresh</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello_world</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v0.1.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (file:///path/to/package/hello_world)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   Running</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">target/hello_world</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Hello,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> world!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cargo run</code> 会帮我们自动完成编译、运行的过程，当然，该命令也支持 <code>Release</code> 模式: <code>cargo run --release</code>。</p><blockquote><p>如果你的程序在跑性能测试 benchmark，一定要使用 <code>Release</code> 模式，因为该模式下，程序会做大量性能优化</p></blockquote><p>在快速了解 <code>Cargo</code> 的使用方式后，下面，我们将正式进入 Cargo 的学习之旅。</p>`,23)]))}const d=i(n,[["render",t],["__file","getting-started.html.vue"]]),k=JSON.parse('{"path":"/cargo/getting-started.html","title":"上手使用","lang":"zh-CN","frontmatter":{"description":"上手使用 Cargo 会在安装 Rust 的时候一并进行安装，无需我们手动的操作执行，安装 Rust 参见这里。 在开始之前，先来明确一个名词: Package，由于 Crate 被翻译成包，因此 Package 再被翻译成包就很不合适，经过斟酌，我们决定翻译成项目，你也可以理解为工程、软件包，总之，在本书中Package 意味着项目，而项目也意味着 ...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/cargo/getting-started.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"上手使用"}],["meta",{"property":"og:description","content":"上手使用 Cargo 会在安装 Rust 的时候一并进行安装，无需我们手动的操作执行，安装 Rust 参见这里。 在开始之前，先来明确一个名词: Package，由于 Crate 被翻译成包，因此 Package 再被翻译成包就很不合适，经过斟酌，我们决定翻译成项目，你也可以理解为工程、软件包，总之，在本书中Package 意味着项目，而项目也意味着 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"上手使用\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{},"readingTime":{"minutes":2.17,"words":650},"filePathRelative":"cargo/getting-started.md","excerpt":"\\n<p>Cargo 会在安装 Rust 的时候一并进行安装，无需我们手动的操作执行，安装 Rust 参见<a href=\\"https://course.rs/first-try/installation.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">这里</a>。</p>\\n<p>在开始之前，先来明确一个名词: <code>Package</code>，由于 <code>Crate</code> 被翻译成包，因此 <code>Package</code> 再被翻译成包就很不合适，经过斟酌，我们决定翻译成项目，你也可以理解为工程、软件包，总之，在本书中<code>Package</code> 意味着项目，而项目也意味着 <code>Package</code> 。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"cargo/getting-started.md","value":{"title":"getting-started","path":"cargo/getting-started.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"cargo/getting-started.md"}]}}}');export{d as comp,k as data};
