import{_ as i,e,f as a,o as t}from"./app-BSEs7fAb.js";const n={};function r(l,s){return t(),e("div",null,s[0]||(s[0]=[a(`<h1 id="rust-新版解读-1-62-重点-cargo-add-default-枚举变量-linux-上更薄更快的-mutex-裸机-x86-64-构架" tabindex="-1"><a class="header-anchor" href="#rust-新版解读-1-62-重点-cargo-add-default-枚举变量-linux-上更薄更快的-mutex-裸机-x86-64-构架"><span>Rust 新版解读 | 1.62 | 重点: Cargo add，#[default] 枚举变量，Linux 上更薄更快的 Mutex，裸机 x86_64 构架</span></a></h1><blockquote><p>原文链接: https://blog.rust-lang.org/2022/06/30/Rust-1.62.0.html<br> 翻译 by ：<a href="https://github.com/AllanDowney" target="_blank" rel="noopener noreferrer">AllanDowney</a></p></blockquote><p>通过 <a href="https://www.rust-lang.org/tools/install" target="_blank" rel="noopener noreferrer">rustup</a> 安装的同学可以使用以下命令升级到 1.62 版本:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rustup</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stable</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="cargo-add" tabindex="-1"><a class="header-anchor" href="#cargo-add"><span>Cargo add</span></a></h2><p>现在可以使用 <code>cargo add</code> 直接从命令行添加新的依赖项。此命令支持指定功能和版本。它还可以用来修改现有的依赖关系。</p><p>例如:</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cargo</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> add</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> log</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cargo</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> add</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> serde</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> --</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">features</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> derive</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cargo</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> add</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> nom</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有关更多信息，请参阅 <a href="https://doc.rust-lang.org/nightly/cargo/commands/cargo-add.html" target="_blank" rel="noopener noreferrer">cargo 文档</a>。</p><h2 id="default-枚举变量" tabindex="-1"><a class="header-anchor" href="#default-枚举变量"><span><code>#[default]</code> 枚举变量</span></a></h2><p>如果指定枚举默认变量，现在可以使用 <code>#[derive(Default)]</code>。例如，到目前为止，您必须手动为此枚举写入 <code>Default</code> ：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">#[derive(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Default</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">)]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">enum</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Maybe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">    #[default]</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">    Nothing</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Something</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到目前为止，只允许将“单元”变量（没有字段的变量）标记为#[default]。<a href="https://rust-lang.github.io/rfcs/3107-derive-default-enum.html" target="_blank" rel="noopener noreferrer">RFC</a> 中提供了有关此功能的更多信息。</p><h2 id="linux-上更薄更快的-mutex" tabindex="-1"><a class="header-anchor" href="#linux-上更薄更快的-mutex"><span>Linux 上更薄更快的 Mutex</span></a></h2><p>以前，Linux 上的 <code>pthreads</code> 库支持 <code>Mutex</code>、<code>Condvar</code> 和 <code>RwLock</code> 。 <code>pthreads 锁</code> 支持比 Rust API 本身更多的功能，包括运行时配置，并且设计用于比 Rust 提供的静态保证更少的语言中。</p><p>例如，<code>Mutex</code> 实现是 40 个字节，不能被移动(move)。这迫使标准库在后台为使用 <code>pthreads</code> 的平台的每个新 <code>Mutex</code> 分配一个 <code>Box</code>。</p><p>现在 Rust 的标准库在 Linux 上提供了这些锁的原始 futex 实现，它非常轻量级，不需要额外分配。在 1.62.0 中，<code>Mutex</code> 在 Linux 上的内部状态只需要 5 个字节，尽管在未来的版本中可能会发生变化。</p><p>这是提高 Rust 的锁类型效率的长期努力的一部分，包括以前在 Windows 上的改进，如取消绑定其原语。您可以在<a href="https://github.com/rust-lang/rust/issues/93740" target="_blank" rel="noopener noreferrer">跟踪问题</a>中了解更多有关这方面的信息。</p><h2 id="裸机-x86-64-构架" tabindex="-1"><a class="header-anchor" href="#裸机-x86-64-构架"><span>裸机 <code>x86_64</code> 构架</span></a></h2><p>现在更容易为 <code>x86_64</code> 构建无操作系统的二进制文件，例如在编写内核时。<code>x86_64-unknown-none</code> 构架已升级到第 2 层，可以用 <code>rustup</code> 安装。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rustup</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> target</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> add</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> x86_64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">unknown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">none</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rustc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> --</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">target</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> x86_64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">unknown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">none</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> my_no_std_program</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.rs</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以在 <a href="https://docs.rust-embedded.org/book/intro/no-std.html" target="_blank" rel="noopener noreferrer">Embedded Rust book</a> 中阅读更多关于使用 <code>no_std</code> 进行开发的信息。</p>`,22)]))}const d=i(n,[["render",r],["__file","1.62.html.vue"]]),p=JSON.parse('{"path":"/src/appendix/rust-versions/1.62.html","title":"Rust 新版解读 | 1.62 | 重点: Cargo add，#[default] 枚举变量，Linux 上更薄更快的 Mutex，裸机 x86_64 构架","lang":"zh-CN","frontmatter":{"description":"Rust 新版解读 | 1.62 | 重点: Cargo add，#[default] 枚举变量，Linux 上更薄更快的 Mutex，裸机 x86_64 构架 原文链接: https://blog.rust-lang.org/2022/06/30/Rust-1.62.0.html 翻译 by ：AllanDowney 通过 rustup 安装的同学可...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/src/appendix/rust-versions/1.62.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"Rust 新版解读 | 1.62 | 重点: Cargo add，#[default] 枚举变量，Linux 上更薄更快的 Mutex，裸机 x86_64 构架"}],["meta",{"property":"og:description","content":"Rust 新版解读 | 1.62 | 重点: Cargo add，#[default] 枚举变量，Linux 上更薄更快的 Mutex，裸机 x86_64 构架 原文链接: https://blog.rust-lang.org/2022/06/30/Rust-1.62.0.html 翻译 by ：AllanDowney 通过 rustup 安装的同学可..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-20T14:07:43.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-20T14:07:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust 新版解读 | 1.62 | 重点: Cargo add，#[default] 枚举变量，Linux 上更薄更快的 Mutex，裸机 x86_64 构架\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-20T14:07:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{"createdTime":1745158063000,"updatedTime":1745158063000,"contributors":[{"name":"Linc","username":"Linc","email":"762699299@qq.com","commits":1,"url":"https://github.com/Linc"}]},"readingTime":{"minutes":1.92,"words":577},"filePathRelative":"src/appendix/rust-versions/1.62.md","localizedDate":"2025年4月20日","excerpt":"\\n<blockquote>\\n<p>原文链接: https://blog.rust-lang.org/2022/06/30/Rust-1.62.0.html<br>\\n翻译 by ：<a href=\\"https://github.com/AllanDowney\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">AllanDowney</a></p>\\n</blockquote>\\n<p>通过 <a href=\\"https://www.rust-lang.org/tools/install\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">rustup</a> 安装的同学可以使用以下命令升级到 1.62 版本:</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"src/SUMMARY.html"}],"localMap":{"nodes":[{"id":"src/appendix/rust-versions/1.62.md","value":{"title":"1.62","path":"src/appendix/rust-versions/1.62.md","outlink":[],"backlink":["src/SUMMARY.md"]}},{"id":"src/SUMMARY.md","value":{"title":"SUMMARY","path":"src/SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"src/SUMMARY.md","target":"src/appendix/rust-versions/1.62.md"}]}}}');export{d as comp,p as data};
