import{_ as e,e as o,f as n,o as r}from"./app-BSEs7fAb.js";const s={};function i(c,t){return r(),o("div",null,t[0]||(t[0]=[n('<h1 id="所有权和借用" tabindex="-1"><a class="header-anchor" href="#所有权和借用"><span>所有权和借用</span></a></h1><p>Rust 之所以能成为万众瞩目的语言，就是因为其内存安全性。在以往，内存安全几乎都是通过 GC 的方式实现，但是 GC 会引来性能、内存占用以及 Stop the world 等问题，在高性能场景和系统编程上是不可接受的，因此 Rust 采用了与 ( 不 ) 众 ( 咋 ) 不 ( 好 ) 同 ( 学 )的方式：<strong>所有权系统</strong>。</p><p>理解<strong>所有权</strong>和<strong>借用</strong>，对于 Rust 学习是至关重要的，因此我们把本章提到了非常靠前的位置，So，在座的各位，有一个算一个，准备好了嘛？</p><p>从现在开始，鉴于大家已经掌握了非常基本的语法，有些时候，在示例代码中，将省略 <code>fn main() {}</code> 的模版代码，只要将相应的示例放在 <code>fn main() {}</code> 中，即可运行。</p>',4)]))}const p=e(s,[["render",i],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/src/basic/ownership/","title":"所有权和借用","lang":"zh-CN","frontmatter":{"description":"所有权和借用 Rust 之所以能成为万众瞩目的语言，就是因为其内存安全性。在以往，内存安全几乎都是通过 GC 的方式实现，但是 GC 会引来性能、内存占用以及 Stop the world 等问题，在高性能场景和系统编程上是不可接受的，因此 Rust 采用了与 ( 不 ) 众 ( 咋 ) 不 ( 好 ) 同 ( 学 )的方式：所有权系统。 理解所有权和...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/src/basic/ownership/"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"所有权和借用"}],["meta",{"property":"og:description","content":"所有权和借用 Rust 之所以能成为万众瞩目的语言，就是因为其内存安全性。在以往，内存安全几乎都是通过 GC 的方式实现，但是 GC 会引来性能、内存占用以及 Stop the world 等问题，在高性能场景和系统编程上是不可接受的，因此 Rust 采用了与 ( 不 ) 众 ( 咋 ) 不 ( 好 ) 同 ( 学 )的方式：所有权系统。 理解所有权和..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-20T14:07:43.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-20T14:07:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"所有权和借用\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-20T14:07:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{"createdTime":1745158063000,"updatedTime":1745158063000,"contributors":[{"name":"Linc","username":"Linc","email":"762699299@qq.com","commits":1,"url":"https://github.com/Linc"}]},"readingTime":{"minutes":0.73,"words":220},"filePathRelative":"src/basic/ownership/index.md","localizedDate":"2025年4月20日","excerpt":"\\n<p>Rust 之所以能成为万众瞩目的语言，就是因为其内存安全性。在以往，内存安全几乎都是通过 GC 的方式实现，但是 GC 会引来性能、内存占用以及 Stop the world 等问题，在高性能场景和系统编程上是不可接受的，因此 Rust 采用了与 ( 不 ) 众 ( 咋 ) 不 ( 好 ) 同 ( 学 )的方式：<strong>所有权系统</strong>。</p>\\n<p>理解<strong>所有权</strong>和<strong>借用</strong>，对于 Rust 学习是至关重要的，因此我们把本章提到了非常靠前的位置，So，在座的各位，有一个算一个，准备好了嘛？</p>\\n<p>从现在开始，鉴于大家已经掌握了非常基本的语法，有些时候，在示例代码中，将省略 <code>fn main() {}</code> 的模版代码，只要将相应的示例放在 <code>fn main() {}</code> 中，即可运行。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"src/SUMMARY.html"}],"localMap":{"nodes":[{"id":"src/basic/ownership/index.md","value":{"title":"index","path":"src/basic/ownership/index.md","outlink":[],"backlink":["src/SUMMARY.md"]}},{"id":"src/SUMMARY.md","value":{"title":"SUMMARY","path":"src/SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"src/SUMMARY.md","target":"src/basic/ownership/index.md"}]}}}');export{p as comp,d as data};
