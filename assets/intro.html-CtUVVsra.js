import{_ as e,e as o,k as n,o as c}from"./app-Ca5AIWu9.js";const r={};function i(a,t){return c(),o("div",null,t[0]||(t[0]=[n('<h1 id="智能指针" tabindex="-1"><a class="header-anchor" href="#智能指针"><span>智能指针</span></a></h1><p>在各个编程语言中，指针的概念几乎都是相同的：<strong>指针是一个包含了内存地址的变量，该内存地址引用或者指向了另外的数据</strong>。</p><p>在 Rust 中，最常见的指针类型是引用，引用通过 <code>&amp;</code> 符号表示。不同于其它语言，引用在 Rust 中被赋予了更深层次的含义，那就是：借用其它变量的值。引用本身很简单，除了指向某个值外并没有其它的功能，也不会造成性能上的额外损耗，因此是 Rust 中使用最多的指针类型。</p><p>而智能指针则不然，它虽然也号称指针，但是它是一个复杂的家伙：通过比引用更复杂的数据结构，包含比引用更多的信息，例如元数据，当前长度，最大可用长度等。总之，Rust 的智能指针并不是独创，在 C++ 或者其他语言中也存在相似的概念。</p><p>Rust 标准库中定义的那些智能指针，虽重但强，可以提供比引用更多的功能特性，例如本章将讨论的引用计数智能指针。该智能指针允许你同时拥有同一个数据的多个所有权，它会跟踪每一个所有者并进行计数，当所有的所有者都归还后，该智能指针及指向的数据将自动被清理释放。</p><p>引用和智能指针的另一个不同在于前者仅仅是借用了数据，而后者往往可以拥有它们指向的数据，然后再为其它人提供服务。</p><p>在之前的章节中，实际上我们已经见识过多种智能指针，例如动态字符串 <code>String</code> 和动态数组 <code>Vec</code>，它们的数据结构中不仅仅包含了指向底层数据的指针，还包含了当前长度、最大长度等信息，其中 <code>String</code> 智能指针还提供了一种担保信息：所有的数据都是合法的 <code>UTF-8</code> 格式。</p><p>智能指针往往是基于结构体实现，它与我们自定义的结构体最大的区别在于它实现了 <code>Deref</code> 和 <code>Drop</code> 特征：</p><ul><li><code>Deref</code> 可以让智能指针像引用那样工作，这样你就可以写出同时支持智能指针和引用的代码，例如 <code>*T</code></li><li><code>Drop</code> 允许你指定智能指针超出作用域后自动执行的代码，例如做一些数据清除等收尾工作</li></ul><p>智能指针在 Rust 中很常见，我们在本章不会全部讲解，而是挑选几个最常用、最有代表性的进行讲解：</p><ul><li><code>Box&lt;T&gt;</code>，可以将值分配到堆上</li><li><code>Rc&lt;T&gt;</code>，引用计数类型，允许多所有权存在</li><li><code>Ref&lt;T&gt;</code> 和 <code>RefMut&lt;T&gt;</code>，允许将借用规则检查从编译期移动到运行期进行</li></ul>',11)]))}const d=e(r,[["render",i],["__file","intro.html.vue"]]),s=JSON.parse('{"path":"/advance/smart-pointer/intro.html","title":"智能指针","lang":"zh-CN","frontmatter":{"description":"智能指针 在各个编程语言中，指针的概念几乎都是相同的：指针是一个包含了内存地址的变量，该内存地址引用或者指向了另外的数据。 在 Rust 中，最常见的指针类型是引用，引用通过 & 符号表示。不同于其它语言，引用在 Rust 中被赋予了更深层次的含义，那就是：借用其它变量的值。引用本身很简单，除了指向某个值外并没有其它的功能，也不会造成性能上的额外损耗，...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/advance/smart-pointer/intro.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"智能指针"}],["meta",{"property":"og:description","content":"智能指针 在各个编程语言中，指针的概念几乎都是相同的：指针是一个包含了内存地址的变量，该内存地址引用或者指向了另外的数据。 在 Rust 中，最常见的指针类型是引用，引用通过 & 符号表示。不同于其它语言，引用在 Rust 中被赋予了更深层次的含义，那就是：借用其它变量的值。引用本身很简单，除了指向某个值外并没有其它的功能，也不会造成性能上的额外损耗，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"智能指针\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{},"readingTime":{"minutes":2.48,"words":743},"filePathRelative":"advance/smart-pointer/intro.md","excerpt":"\\n<p>在各个编程语言中，指针的概念几乎都是相同的：<strong>指针是一个包含了内存地址的变量，该内存地址引用或者指向了另外的数据</strong>。</p>\\n<p>在 Rust 中，最常见的指针类型是引用，引用通过 <code>&amp;</code> 符号表示。不同于其它语言，引用在 Rust 中被赋予了更深层次的含义，那就是：借用其它变量的值。引用本身很简单，除了指向某个值外并没有其它的功能，也不会造成性能上的额外损耗，因此是 Rust 中使用最多的指针类型。</p>\\n<p>而智能指针则不然，它虽然也号称指针，但是它是一个复杂的家伙：通过比引用更复杂的数据结构，包含比引用更多的信息，例如元数据，当前长度，最大可用长度等。总之，Rust 的智能指针并不是独创，在 C++ 或者其他语言中也存在相似的概念。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"advance/smart-pointer/intro.md","value":{"title":"intro","path":"advance/smart-pointer/intro.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"advance/smart-pointer/intro.md"}]}}}');export{d as comp,s as data};
