import{_ as t,e as r,f as o,o as n}from"./app-BSEs7fAb.js";const s={};function a(i,e){return n(),r("div",null,e[0]||(e[0]=[o('<h1 id="集合-collections" tabindex="-1"><a class="header-anchor" href="#集合-collections"><span>集合（Collections）</span></a></h1><p>Rust 的标准库包含了很多有用的数据结构，它们称作为集合。<br> 大多其它的数据类型通常仅表示一个特定的值，但集合可以包含多个值。<br> 内置的数组和元组类型指向的数据存储在堆上，这意味着存储的数据不必在编译时确定，<br> 并可以根据程序的运行来增加或减少。</p><p>本次练习将带你熟悉 Rust 程序中两个特别常用的基本数据结构：</p><ul><li><p><em>vector</em> 能够存储一段连续且数量不定的值。</p></li><li><p><em>散列表（hash map）</em> 能够将某个值与一个特定的键关联起来。<br> 你可能也知道它们：<a href="https://en.cppreference.com/w/cpp/container/unordered_map" target="_blank" rel="noopener noreferrer">C++ 中的 <em>unordered map</em></a>、<a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" target="_blank" rel="noopener noreferrer">Python 的 <em>dictionary</em></a> 或其它语言中的 <em>associative array（译：关联数组、map、映射）</em>。</p></li></ul><h2 id="更多信息" tabindex="-1"><a class="header-anchor" href="#更多信息"><span>更多信息</span></a></h2><ul><li><a href="https://doc.rust-lang.org/stable/book/ch08-01-vectors.html" target="_blank" rel="noopener noreferrer">Storing Lists of Values with Vectors</a></li><li><a href="https://doc.rust-lang.org/book/ch08-03-hash-maps.html" target="_blank" rel="noopener noreferrer">Storing Keys with Associated Values in Hash Maps</a></li></ul>',6)]))}const l=t(s,[["render",a],["__file","index.html.vue"]]),p=JSON.parse('{"path":"/assets/rustlings-zh/exercises/collections/","title":"集合（Collections）","lang":"zh-CN","frontmatter":{"description":"集合（Collections） Rust 的标准库包含了很多有用的数据结构，它们称作为集合。 大多其它的数据类型通常仅表示一个特定的值，但集合可以包含多个值。 内置的数组和元组类型指向的数据存储在堆上，这意味着存储的数据不必在编译时确定， 并可以根据程序的运行来增加或减少。 本次练习将带你熟悉 Rust 程序中两个特别常用的基本数据结构： vector...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/assets/rustlings-zh/exercises/collections/"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"集合（Collections）"}],["meta",{"property":"og:description","content":"集合（Collections） Rust 的标准库包含了很多有用的数据结构，它们称作为集合。 大多其它的数据类型通常仅表示一个特定的值，但集合可以包含多个值。 内置的数组和元组类型指向的数据存储在堆上，这意味着存储的数据不必在编译时确定， 并可以根据程序的运行来增加或减少。 本次练习将带你熟悉 Rust 程序中两个特别常用的基本数据结构： vector..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-20T14:07:43.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-20T14:07:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"集合（Collections）\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-20T14:07:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{"createdTime":1745158063000,"updatedTime":1745158063000,"contributors":[{"name":"Linc","username":"Linc","email":"762699299@qq.com","commits":1,"url":"https://github.com/Linc"}]},"readingTime":{"minutes":0.8,"words":241},"filePathRelative":"assets/rustlings-zh/exercises/collections/README.md","localizedDate":"2025年4月20日","excerpt":"\\n<p>Rust 的标准库包含了很多有用的数据结构，它们称作为集合。<br>\\n大多其它的数据类型通常仅表示一个特定的值，但集合可以包含多个值。<br>\\n内置的数组和元组类型指向的数据存储在堆上，这意味着存储的数据不必在编译时确定，<br>\\n并可以根据程序的运行来增加或减少。</p>\\n<p>本次练习将带你熟悉 Rust 程序中两个特别常用的基本数据结构：</p>\\n<ul>\\n<li>\\n<p><em>vector</em> 能够存储一段连续且数量不定的值。</p>\\n</li>\\n<li>\\n<p><em>散列表（hash map）</em> 能够将某个值与一个特定的键关联起来。<br>\\n你可能也知道它们：<a href=\\"https://en.cppreference.com/w/cpp/container/unordered_map\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">C++ 中的 <em>unordered map</em></a>、<a href=\\"https://docs.python.org/3/tutorial/datastructures.html#dictionaries\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Python 的 <em>dictionary</em></a> 或其它语言中的 <em>associative array（译：关联数组、map、映射）</em>。</p>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"assets/rustlings-zh/exercises/collections/README.md","value":{"title":"exercises/","path":"assets/rustlings-zh/exercises/collections/README.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{l as comp,p as data};
