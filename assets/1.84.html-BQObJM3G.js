import{_ as i,e,k as t,o as a}from"./app-DpsuSTEZ.js";const n={};function r(l,s){return a(),e("div",null,s[0]||(s[0]=[t(`<h1 id="rust-新版解读-1-84-const-能力拓展" tabindex="-1">Rust 新版解读 | 1.84 | Const 能力拓展</h1><blockquote><p>Rust 1.84 官方 release doc: <a href="https://blog.rust-lang.org/2025/01/09/Rust-1.84.0.html" target="_blank" rel="noopener noreferrer">Announcing Rust 1.84.0 | Rust Blog</a></p></blockquote><p>通过 <a href="https://www.rust-lang.org/tools/install" target="_blank" rel="noopener noreferrer">rustup</a> 安装的同学可以使用以下命令升级到 1.84 版本:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rustup</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stable</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="cargo-在依赖版本选择中考虑-rust-版本" tabindex="-1">Cargo 在依赖版本选择中考虑 Rust 版本</h2><p>1.84.0 稳定了支持最低 Rust 版本（MSRV, minimum supported Rust version）的解析器，该解析器优先选择与项目声明的 MSRV （<code>Cargo.toml</code> 里的 <code>package.rust_version</code>） 兼容的依赖版本。通过支持 MSRV 的版本选择，维护者可以减少支持旧工具链的工作量，因为不再需要为每个依赖手动选择旧版本。</p><p>你可以通过 <code>.cargo/config.toml</code> 启用支持 MSRV 的解析器：</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">resolver</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">incompatible-rust-versions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;fallback&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在添加依赖时：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clap</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Updating</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> crates.io</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> index</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">warning:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ignoring</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clap@4.5.23</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (which </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">requires</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rustc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1.74</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) to maintain demo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;s rust-version of 1.60</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      Adding clap v4.0.32 to dependencies</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    Updating crates.io index</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     Locking 33 packages to latest Rust 1.60 compatible versions</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      Adding clap v4.0.32 (available: v4.5.23, requires Rust 1.74)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 CI 中<a href="https://doc.rust-lang.org/cargo/guide/continuous-integration.html#verifying-latest-dependencies" target="_blank" rel="noopener noreferrer">验证最新依赖</a>时，你可以覆盖此行为：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CARGO_RESOLVER_INCOMPATIBLE_RUST_VERSIONS=allow</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Updating</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> crates.io</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> index</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     Locking</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 12</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> packages</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> latest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> compatible</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> versions</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Updating</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clap</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v4.0.32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">v4.5.23</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以通过在 <code>Cargo.toml</code> 清单文件中设置 <a href="https://doc.rust-lang.org/cargo/reference/resolver.html#resolver-versions" target="_blank" rel="noopener noreferrer"><code>package.resolver = &quot;3&quot;</code></a> 来启用此功能，但这需要将 MSRV 提升到 1.84。对于使用 Rust 2024 的项目（将在 1.85 中稳定），新的解析器将默认启用。</p><p>这为库作者在决定采用新 Rust 工具链功能的策略时提供了更大的灵活性。以前，库采用新 Rust 工具链的功能会迫使使用旧 Rust 版本的下游用户要么升级工具链，要么手动选择与工具链兼容的旧版本库（并避免运行 <code>cargo update</code>）。现在，这些用户将能够自动使用与其旧工具链兼容的旧库版本。</p><p>有关决定 MSRV 策略时的更多注意事项，请参阅<a href="https://doc.rust-lang.org/cargo/reference/rust-version.html#setting-and-updating-rust-version" target="_blank" rel="noopener noreferrer">文档</a>。</p><h2 id="新-trait-求解器的迁移开始" tabindex="-1">新 trait 求解器的迁移开始</h2><p>Rust 编译器正在迁移到新的 trait 求解器实现。下一代 trait 求解器是 Rust 类型系统核心组件的重新实现。它不仅负责检查 trait 边界（例如 <code>Vec&lt;T&gt;: Clone</code>）是否成立，还被类型系统的许多其他部分使用，例如规范化（确定 <code>&lt;Vec&lt;T&gt; as IntoIterator&gt;::Item</code> 的基础类型）和类型等价（检查 <code>T</code> 和 <code>U</code> 是否相同）。</p><p>在 1.84 中，新求解器用于检查 trait 实现的一致性。从高层次来看，一致性负责确保在考虑其他 crate 中尚未编写或不可见的代码时，给定类型的 trait 实现最多只有一个。</p><p>此稳定化修复了旧实现中的一些主要理论上的正确性问题，导致可能会报告以前未报告的“trait 冲突实现”错误。根据 <a href="https://github.com/rust-lang/crater/" target="_blank" rel="noopener noreferrer">Crater</a> 对可用代码的评估，我们预计受影响的模式非常罕见。此次稳定版本还提高了我们证明实现不重叠的能力，在某些情况下允许编写更多代码。</p><p>有关更多详细信息，请参阅之前的<a href="https://blog.rust-lang.org/inside-rust/2024/12/04/trait-system-refactor-initiative.html" target="_blank" rel="noopener noreferrer">博客文章</a>和<a href="https://github.com/rust-lang/rust/pull/130654" target="_blank" rel="noopener noreferrer">稳定报告</a>。</p><h2 id="严格来源-api" tabindex="-1">严格来源 API</h2><p>在 Rust 中，<a href="https://rust-lang.github.io/rfcs/3559-rust-has-provenance.html" target="_blank" rel="noopener noreferrer">指针不仅仅是“整数”或“地址”</a>。例如，“释放后使用”是未定义行为，即使你“幸运”并且在读取/写入之前重新分配了释放的内存。另一个例子是，通过从 <code>&amp;i32</code> 引用派生的指针写入是未定义行为，即使通过不同指针写入同一地址是合法的。这里的底层模式是，指针的计算方式很重要，而不仅仅是计算结果的地址。因此，我们说指针具有<strong>来源</strong>：要完全描述 Rust 中与指针相关的未定义行为，我们不仅需要知道指针指向的地址，还需要跟踪它是从哪些其他指针“派生”的。</p><p>大多数情况下，程序员不需要过多担心来源，指针的派生方式非常清晰。然而，当将指针转换为整数并返回时，结果指针的来源是不明确的。在此版本中，Rust 添加了一组 API，可以在许多情况下替代整数指针转换的使用，从而避免此类转换固有的歧义。特别是，现在可以在不将指针转换为整数(或反方向将整数转换成指针)的情况下实现使用对齐指针的最低有效位存储额外信息的模式。这使得代码更易于推理，更易于编译器分析，并且还有益于像 <a href="https://github.com/rust-lang/miri" target="_blank" rel="noopener noreferrer">Miri</a> 这样的工具和像 <a href="https://www.cl.cam.ac.uk/research/security/ctsrd/cheri/" target="_blank" rel="noopener noreferrer">CHERI</a> 这样的架构，旨在检测和诊断指针滥用。</p><p>有关更多详细信息，请参阅标准库中关于<a href="https://doc.rust-lang.org/std/ptr/index.html#provenance" target="_blank" rel="noopener noreferrer">来源</a>的文档。</p><h2 id="others" tabindex="-1">Others</h2><p>其它更新细节，和稳定的 API 列表，包括上述 <code>provenance</code> 相关 API，参考<a href="https://blog.rust-lang.org/2025/01/09/Rust-1.84.0.html#stabilized-apis" target="_blank" rel="noopener noreferrer">原Blog</a></p>`,26)]))}const p=i(n,[["render",r],["__file","1.84.html.vue"]]),o=JSON.parse('{"path":"/appendix/rust-versions/1.84.html","title":"Rust 新版解读 | 1.84 | Const 能力拓展","lang":"zh-CN","frontmatter":{"description":"Rust 新版解读 | 1.84 | Const 能力拓展 Rust 1.84 官方 release doc: Announcing Rust 1.84.0 | Rust Blog 通过 rustup 安装的同学可以使用以下命令升级到 1.84 版本: Cargo 在依赖版本选择中考虑 Rust 版本 1.84.0 稳定了支持最低 Rust 版本（MS...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/appendix/rust-versions/1.84.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"Rust 新版解读 | 1.84 | Const 能力拓展"}],["meta",{"property":"og:description","content":"Rust 新版解读 | 1.84 | Const 能力拓展 Rust 1.84 官方 release doc: Announcing Rust 1.84.0 | Rust Blog 通过 rustup 安装的同学可以使用以下命令升级到 1.84 版本: Cargo 在依赖版本选择中考虑 Rust 版本 1.84.0 稳定了支持最低 Rust 版本（MS..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust 新版解读 | 1.84 | Const 能力拓展\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"git":{},"readingTime":{"minutes":4.24,"words":1272},"filePathRelative":"appendix/rust-versions/1.84.md","excerpt":"\\n<blockquote>\\n<p>Rust 1.84 官方 release doc: <a href=\\"https://blog.rust-lang.org/2025/01/09/Rust-1.84.0.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Announcing Rust 1.84.0 | Rust Blog</a></p>\\n</blockquote>\\n<p>通过 <a href=\\"https://www.rust-lang.org/tools/install\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">rustup</a> 安装的同学可以使用以下命令升级到 1.84 版本:</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"appendix/rust-versions/1.84.md","value":{"title":"1.84","path":"appendix/rust-versions/1.84.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"appendix/rust-versions/1.84.md"}]}}}');export{p as comp,o as data};
