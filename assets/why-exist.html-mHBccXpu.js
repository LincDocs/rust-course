import{_ as s,e,k as t,o as a}from"./app-Gi6ydBTW.js";const l={};function o(r,i){return a(),e("div",null,i[0]||(i[0]=[t(`<h1 id="为何会有-cargo" tabindex="-1">为何会有 Cargo</h1><p>根据之前学习的知识，Rust 有两种类型的包: 库包和二进制包，前者是我们经常使用的依赖包，用于被其它包所引入，而后者是一个应用服务，可以编译成二进制可执行文件进行运行。</p><p>包是通过 Rust 编译器 <code>rustc</code> 进行编译的:</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rustc</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.rs</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ ./</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hello</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">world!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面我们直接使用 <code>rustc</code> 对二进制包 <code>hello.rs</code> 进行编译，生成二进制可执行文件 <code>hello</code>，并对其进行运行。</p><p>该方式虽然简单，但有几个问题：</p><ul><li>必须要指定文件名编译，当项目复杂后，这种编译方式也随之更加复杂</li><li>如果要指定编译参数，情况将更加复杂</li></ul><p>最关键的是，外部依赖库的引入也将是一个大问题。大部分实际的项目都有不少依赖包，而这些依赖包又间接的依赖了新的依赖包，在这种复杂情况下，如何管理依赖包及其版本也成为一个相当棘手的问题。</p><p>正是因为这些原因，与其使用 <code>rustc</code> ，我们可以使用一个强大的包管理工具来解决问题：欢迎 <code>Cargo</code> 闪亮登场。</p><h2 id="cargo" tabindex="-1">Cargo</h2><p><code>Cargo</code> 解决了之前描述的所有问题，同时它保证了每次重复的构建都不会改变上一次构建的结果，这背后是通过完善且强大的依赖包版本管理来实现的。</p><p>总之，<code>Cargo</code> 为了实现目标，做了四件事：</p><ul><li>引入两个元数据文件，包含项目的方方面面信息: <code>Cargo.toml</code> 和 <code>Cargo.lock</code></li><li>获取和构建项目的依赖，例如 <code>Cargo.toml</code> 中的依赖包版本描述，以及从 <code>crates.io</code> 下载包</li><li>调用 <code>rustc</code> (或其它编译器) 并使用的正确的参数来构建项目，例如 <code>cargo build</code></li><li>引入一些惯例，让项目的使用更加简单</li></ul><p>毫不夸张的说，得益于 <code>Cargo</code> 的标准化，只要你使用它构建过一个项目，那构建其它使用 <code>Cargo</code> 的项目，也将不存在任何困难。</p>`,14)]))}const d=s(l,[["render",o],["__file","why-exist.html.vue"]]),c=JSON.parse('{"path":"/cargo/guide/why-exist.html","title":"为何会有 Cargo","lang":"zh-CN","frontmatter":{"description":"为何会有 Cargo 根据之前学习的知识，Rust 有两种类型的包: 库包和二进制包，前者是我们经常使用的依赖包，用于被其它包所引入，而后者是一个应用服务，可以编译成二进制可执行文件进行运行。 包是通过 Rust 编译器 rustc 进行编译的: 上面我们直接使用 rustc 对二进制包 hello.rs 进行编译，生成二进制可执行文件 hello，并...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/cargo/guide/why-exist.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"为何会有 Cargo"}],["meta",{"property":"og:description","content":"为何会有 Cargo 根据之前学习的知识，Rust 有两种类型的包: 库包和二进制包，前者是我们经常使用的依赖包，用于被其它包所引入，而后者是一个应用服务，可以编译成二进制可执行文件进行运行。 包是通过 Rust 编译器 rustc 进行编译的: 上面我们直接使用 rustc 对二进制包 hello.rs 进行编译，生成二进制可执行文件 hello，并..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"为何会有 Cargo\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.79,"words":538},"filePathRelative":"cargo/guide/why-exist.md","excerpt":"\\n<p>根据之前学习的知识，Rust 有两种类型的包: 库包和二进制包，前者是我们经常使用的依赖包，用于被其它包所引入，而后者是一个应用服务，可以编译成二进制可执行文件进行运行。</p>\\n<p>包是通过 Rust 编译器 <code>rustc</code> 进行编译的:</p>\\n<div class=\\"language-rust line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust\\" data-title=\\"rust\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">$ </span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">rustc</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\"> hello</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.rs</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">$ ./</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">hello</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#0184BC;--shiki-dark:#E5C07B\\">Hello</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">world!</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"cargo/guide/why-exist.md","value":{"title":"why-exist","path":"cargo/guide/why-exist.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"cargo/guide/why-exist.md"}]}}}');export{d as comp,c as data};
