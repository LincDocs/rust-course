import{_ as e,e as i,f as n,o as r}from"./app-DFfX2bp8.js";const o={};function a(l,t){return r(),i("div",null,t[0]||(t[0]=[n('<h1 id="函数式编程" tabindex="-1"><a class="header-anchor" href="#函数式编程"><span>函数式编程</span></a></h1><p>罗马不是一天建成的，编程语言亦是如此，每一门编程语言在借鉴前辈的同时，也会提出自己独有的特性，Rust 即是如此。当站在巨人肩膀上时，一个人所能看到的就更高更远，恰好，我们看到了函数式语言的优秀特性，例如：</p><ul><li>使用函数作为参数进行传递</li><li>使用函数作为函数返回值</li><li>将函数赋值给变量</li></ul><p>见猎心喜，我们忍不住就借鉴了过来，于是你能看到本章的内容，天下语言一大。。。跑题了。</p><p>关于函数式编程到底是什么的争论由来已久，本章节并不会踏足这个泥潭，因此我们在这里主要关注的是函数式特性：</p><ul><li>闭包 Closure</li><li>迭代器 Iterator</li><li>模式匹配</li><li>枚举</li></ul><p>其中后两个在前面章节我们已经深入学习过，因此本章的重点就是闭包和迭代器，<strong>这些函数式特性可以让代码的可读性和易写性大幅提升</strong>。对于 Rust 语言来说，掌握这两者就相当于你同时拥有了倚天剑屠龙刀，威力无穷。</p>',7)]))}const s=e(o,[["render",a],["__file","intro.html.vue"]]),p=JSON.parse('{"path":"/src/advance/functional-programing/intro.html","title":"函数式编程","lang":"zh-CN","frontmatter":{"description":"函数式编程 罗马不是一天建成的，编程语言亦是如此，每一门编程语言在借鉴前辈的同时，也会提出自己独有的特性，Rust 即是如此。当站在巨人肩膀上时，一个人所能看到的就更高更远，恰好，我们看到了函数式语言的优秀特性，例如： 使用函数作为参数进行传递 使用函数作为函数返回值 将函数赋值给变量 见猎心喜，我们忍不住就借鉴了过来，于是你能看到本章的内容，天下语言...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/src/advance/functional-programing/intro.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"函数式编程"}],["meta",{"property":"og:description","content":"函数式编程 罗马不是一天建成的，编程语言亦是如此，每一门编程语言在借鉴前辈的同时，也会提出自己独有的特性，Rust 即是如此。当站在巨人肩膀上时，一个人所能看到的就更高更远，恰好，我们看到了函数式语言的优秀特性，例如： 使用函数作为参数进行传递 使用函数作为函数返回值 将函数赋值给变量 见猎心喜，我们忍不住就借鉴了过来，于是你能看到本章的内容，天下语言..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-24T15:57:50.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-24T15:57:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"函数式编程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-24T15:57:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{"createdTime":1745510270000,"updatedTime":1745510270000,"contributors":[{"name":"Linc","username":"Linc","email":"762699299@qq.com","commits":1,"url":"https://github.com/Linc"}]},"readingTime":{"minutes":1.04,"words":312},"filePathRelative":"src/advance/functional-programing/intro.md","localizedDate":"2025年4月24日","excerpt":"\\n<p>罗马不是一天建成的，编程语言亦是如此，每一门编程语言在借鉴前辈的同时，也会提出自己独有的特性，Rust 即是如此。当站在巨人肩膀上时，一个人所能看到的就更高更远，恰好，我们看到了函数式语言的优秀特性，例如：</p>\\n<ul>\\n<li>使用函数作为参数进行传递</li>\\n<li>使用函数作为函数返回值</li>\\n<li>将函数赋值给变量</li>\\n</ul>\\n<p>见猎心喜，我们忍不住就借鉴了过来，于是你能看到本章的内容，天下语言一大。。。跑题了。</p>\\n<p>关于函数式编程到底是什么的争论由来已久，本章节并不会踏足这个泥潭，因此我们在这里主要关注的是函数式特性：</p>\\n<ul>\\n<li>闭包 Closure</li>\\n<li>迭代器 Iterator</li>\\n<li>模式匹配</li>\\n<li>枚举</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"src/SUMMARY.html"}],"localMap":{"nodes":[{"id":"src/advance/functional-programing/intro.md","value":{"title":"intro","path":"src/advance/functional-programing/intro.md","outlink":[],"backlink":["src/SUMMARY.md"]}},{"id":"src/SUMMARY.md","value":{"title":"SUMMARY","path":"src/SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"src/SUMMARY.md","target":"src/advance/functional-programing/intro.md"}]}}}');export{s as comp,p as data};
