import{_ as i,e as a,k as e,o as n}from"./app-Gi6ydBTW.js";const t={};function l(h,s){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="线程类型导致的栈溢出" tabindex="-1">线程类型导致的栈溢出</h1><p>在 Rust 中，我们不太容易遇到栈溢出，因为默认栈还挺大的，而且大的数据往往存在堆上(动态增长)，但是一旦遇到该如何处理？先来看段代码：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">#![feature(test)]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">extern</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> crate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> test;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">#[cfg(test)]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">mod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tests {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    use</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Bencher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">    #[bench]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> it_works</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: &amp;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">mut</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> Bencher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">iter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">||</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> stack</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [[[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">512</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">512</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]; });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码是一个测试模块，它在堆上生成了一个数组<code>stack</code>，初步看起来数组挺大的，先尝试运行下<code>cargo test</code>:</p><blockquote><p>你很可能会遇到<code>#![feature(test)]</code>错误，因为该特性目前只存在<code>Rust Nightly</code>版本上，具体解决方法见<a href="https://course.rs/appendix/rust-version.html#%E5%9C%A8%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95%E4%BD%BF%E7%94%A8-rust-nightly" target="_blank" rel="noopener noreferrer">Rust 语言圣经</a></p></blockquote><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">running 1 test</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">thread &#39;tests::it_works&#39; has overflowed its stack</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">fatal runtime error: stack overflow</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Bang，很不幸，遇到了百年一遇的栈溢出错误，再来试试<code>cargo bench</code>，竟然通过了测试，这是什么原因？为何<code>cargo test</code>和<code>cargo bench</code>拥有完全不同的行为？这就要从 Rust 的栈原理讲起。</p><p>首先看看<code>stack</code>数组，它的大小是<code>8 × 2 × 512 × 512 = 4 MiB</code>，嗯，很大，崩溃也正常(读者说，正常，只是作者你不太正常。。).</p><p>其次，<code>cargo test</code>和<code>cargo bench</code>，前者运行在一个新创建的线程上，而后者运行在<strong>main 线程上</strong>.</p><p>最后，<code>main</code>线程由于是老大，所以资源比较多，拥有令其它兄弟艳羡不已的<code>8MB</code>栈大小，而其它新线程只有区区<code>2MB</code>栈大小(取决于操作系统,<code>linux</code>是<code>2MB</code>,其它的可能更小)，再对比我们的<code>stack</code>大小，不崩溃就奇怪了。</p><p>因此，你现在明白，为何<code>cargo test</code>不能运行，而<code>cargo bench</code>却可以欢快运行。</p><p>如果实在想要增大栈的默认大小，以通过该测试，你可以这样运行:<code>RUST_MIN_STACK=8388608 cargo test</code>,结果如下：</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">running 1 test</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">test tests::it_works ... ok</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Bingo, 成功了,最后再补充点测试的背景知识:</p><blockquote><p><code>cargo test</code>为何使用新线程？因为它需要并行的运行测试用例，与之相反，<code>cargo bench</code>只需要顺序的执行，因此 main 线程足矣</p></blockquote>`,15)]))}const p=i(t,[["render",l],["__file","stack-overflow.html.vue"]]),r=JSON.parse('{"path":"/compiler/pitfalls/stack-overflow.html","title":"线程类型导致的栈溢出","lang":"zh-CN","frontmatter":{"description":"线程类型导致的栈溢出 在 Rust 中，我们不太容易遇到栈溢出，因为默认栈还挺大的，而且大的数据往往存在堆上(动态增长)，但是一旦遇到该如何处理？先来看段代码： 以上代码是一个测试模块，它在堆上生成了一个数组stack，初步看起来数组挺大的，先尝试运行下cargo test: 你很可能会遇到#![feature(test)]错误，因为该特性目前只存在R...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/compiler/pitfalls/stack-overflow.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"线程类型导致的栈溢出"}],["meta",{"property":"og:description","content":"线程类型导致的栈溢出 在 Rust 中，我们不太容易遇到栈溢出，因为默认栈还挺大的，而且大的数据往往存在堆上(动态增长)，但是一旦遇到该如何处理？先来看段代码： 以上代码是一个测试模块，它在堆上生成了一个数组stack，初步看起来数组挺大的，先尝试运行下cargo test: 你很可能会遇到#![feature(test)]错误，因为该特性目前只存在R..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://course.rs/appendix/rust-version.html#在指定目录使用-rust-nightly"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线程类型导致的栈溢出\\",\\"image\\":[\\"https://course.rs/appendix/rust-version.html#在指定目录使用-rust-nightly\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.88,"words":565},"filePathRelative":"compiler/pitfalls/stack-overflow.md","excerpt":"\\n<p>在 Rust 中，我们不太容易遇到栈溢出，因为默认栈还挺大的，而且大的数据往往存在堆上(动态增长)，但是一旦遇到该如何处理？先来看段代码：</p>\\n<div class=\\"language-rust line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"rust\\" data-title=\\"rust\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#986801;--shiki-dark:#ABB2BF\\">#![feature(test)]</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">extern</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> crate</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> test;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#986801;--shiki-dark:#ABB2BF\\">#[cfg(test)]</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">mod</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> tests {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    use</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\"> test</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">::</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#E5C07B\\">Bencher</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#986801;--shiki-dark:#ABB2BF\\">    #[bench]</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    fn</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> it_works</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">b</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">: &amp;</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">mut</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#E5C07B\\"> Bencher</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">        b</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">iter</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">||</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> { </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">let</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\"> stack</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> [[[</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">0.0</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">; </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">2</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">]; </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">512</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">]; </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">512</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">]; });</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"compiler/pitfalls/stack-overflow.md","value":{"title":"stack-overflow","path":"compiler/pitfalls/stack-overflow.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"compiler/pitfalls/stack-overflow.md"}]}}}');export{p as comp,r as data};
