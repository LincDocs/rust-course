import{_ as d,e,f as o,o as c}from"./app-C_xW6TWK.js";const r={};function p(a,t){return c(),e("div",null,t[0]||(t[0]=[o('<h2 id="附录-b-运算符与符号" tabindex="-1"><a class="header-anchor" href="#附录-b-运算符与符号"><span>附录 B：运算符与符号</span></a></h2><p>该附录包含了 Rust 目前出现过的各种符号，这些符号之前都分散在各个章节中。</p><h3 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h3><p>表 B-1 包含了 Rust 中的运算符、上下文中的示例、简短解释以及该运算符是否可重载。如果一个运算符是可重载的，则该运算符上用于重载的特征也会列出。</p><p>下表中，<code>expr</code> 是表达式，<code>ident</code> 是标识符，<code>type</code> 是类型，<code>var</code> 是变量，<code>trait</code> 是特征，<code>pat</code> 是匹配分支(pattern)。</p><p><span class="caption">表 B-1：运算符</span></p><table><thead><tr><th>运算符</th><th>示例</th><th>解释</th><th>是否可重载</th></tr></thead><tbody><tr><td><code>!</code></td><td><code>ident!(...)</code>, <code>ident!{...}</code>, <code>ident![...]</code></td><td>宏展开</td><td></td></tr><tr><td><code>!</code></td><td><code>!expr</code></td><td>按位非或逻辑非</td><td><code>Not</code></td></tr><tr><td><code>!=</code></td><td><code>var != expr</code></td><td>不等比较</td><td><code>PartialEq</code></td></tr><tr><td><code>%</code></td><td><code>expr % expr</code></td><td>算术求余</td><td><code>Rem</code></td></tr><tr><td><code>%=</code></td><td><code>var %= expr</code></td><td>算术求余与赋值</td><td><code>RemAssign</code></td></tr><tr><td><code>&amp;</code></td><td><code>&amp;expr</code>, <code>&amp;mut expr</code></td><td>借用</td><td></td></tr><tr><td><code>&amp;</code></td><td><code>&amp;type</code>, <code>&amp;mut type</code>, <code>&amp;&#39;a type</code>, <code>&amp;&#39;a mut type</code></td><td>借用指针类型</td><td></td></tr><tr><td><code>&amp;</code></td><td><code>expr &amp; expr</code></td><td>按位与</td><td><code>BitAnd</code></td></tr><tr><td><code>&amp;=</code></td><td><code>var &amp;= expr</code></td><td>按位与及赋值</td><td><code>BitAndAssign</code></td></tr><tr><td><code>&amp;&amp;</code></td><td><code>expr &amp;&amp; expr</code></td><td>逻辑与</td><td></td></tr><tr><td><code>*</code></td><td><code>expr * expr</code></td><td>算术乘法</td><td><code>Mul</code></td></tr><tr><td><code>*=</code></td><td><code>var *= expr</code></td><td>算术乘法与赋值</td><td><code>MulAssign</code></td></tr><tr><td><code>*</code></td><td><code>*expr</code></td><td>解引用</td><td></td></tr><tr><td><code>*</code></td><td><code>*const type</code>, <code>*mut type</code></td><td>裸指针</td><td></td></tr><tr><td><code>+</code></td><td><code>trait + trait</code>, <code>&#39;a + trait</code></td><td>复合类型限制</td><td></td></tr><tr><td><code>+</code></td><td><code>expr + expr</code></td><td>算术加法</td><td><code>Add</code></td></tr><tr><td><code>+=</code></td><td><code>var += expr</code></td><td>算术加法与赋值</td><td><code>AddAssign</code></td></tr><tr><td><code>,</code></td><td><code>expr, expr</code></td><td>参数以及元素分隔符</td><td></td></tr><tr><td><code>-</code></td><td><code>- expr</code></td><td>算术取负</td><td><code>Neg</code></td></tr><tr><td><code>-</code></td><td><code>expr - expr</code></td><td>算术减法</td><td><code>Sub</code></td></tr><tr><td><code>-=</code></td><td><code>var -= expr</code></td><td>算术减法与赋值</td><td><code>SubAssign</code></td></tr><tr><td><code>-&gt;</code></td><td><code>fn(...) -&gt; type</code>, <code>|...| -&gt; type</code></td><td>函数与闭包，返回类型</td><td></td></tr><tr><td><code>.</code></td><td><code>expr.ident</code></td><td>成员访问</td><td></td></tr><tr><td><code>..</code></td><td><code>..</code>, <code>expr..</code>, <code>..expr</code>, <code>expr..expr</code></td><td>右半开区间</td><td>PartialOrd</td></tr><tr><td><code>..=</code></td><td><code>..=expr</code>, <code>expr..=expr</code></td><td>闭合区间</td><td>PartialOrd</td></tr><tr><td><code>..</code></td><td><code>..expr</code></td><td>结构体更新语法</td><td></td></tr><tr><td><code>..</code></td><td><code>variant(x, ..)</code>, <code>struct_type { x, .. }</code></td><td>“代表剩余部分”的模式绑定</td><td></td></tr><tr><td><code>...</code></td><td><code>expr...expr</code></td><td>(不推荐使用，用<code>..=</code>替代) 闭合区间</td><td></td></tr><tr><td><code>/</code></td><td><code>expr / expr</code></td><td>算术除法</td><td><code>Div</code></td></tr><tr><td><code>/=</code></td><td><code>var /= expr</code></td><td>算术除法与赋值</td><td><code>DivAssign</code></td></tr><tr><td><code>:</code></td><td><code>pat: type</code>, <code>ident: type</code></td><td>约束</td><td></td></tr><tr><td><code>:</code></td><td><code>ident: expr</code></td><td>结构体字段初始化</td><td></td></tr><tr><td><code>:</code></td><td><code>&#39;a: loop {...}</code></td><td>循环标志</td><td></td></tr><tr><td><code>;</code></td><td><code>expr;</code></td><td>语句和语句结束符</td><td></td></tr><tr><td><code>;</code></td><td><code>[...; len]</code></td><td>固定大小数组语法的部分</td><td></td></tr><tr><td><code>&lt;&lt;</code></td><td><code>expr &lt;&lt; expr</code></td><td>左移</td><td><code>Shl</code></td></tr><tr><td><code>&lt;&lt;=</code></td><td><code>var &lt;&lt;= expr</code></td><td>左移与赋值</td><td><code>ShlAssign</code></td></tr><tr><td><code>&lt;</code></td><td><code>expr &lt; expr</code></td><td>小于比较</td><td><code>PartialOrd</code></td></tr><tr><td><code>&lt;=</code></td><td><code>expr &lt;= expr</code></td><td>小于等于比较</td><td><code>PartialOrd</code></td></tr><tr><td><code>=</code></td><td><code>var = expr</code>, <code>ident = type</code></td><td>赋值/等值</td><td></td></tr><tr><td><code>==</code></td><td><code>expr == expr</code></td><td>等于比较</td><td><code>PartialEq</code></td></tr><tr><td><code>=&gt;</code></td><td><code>pat =&gt; expr</code></td><td>匹配分支语法的部分</td><td></td></tr><tr><td><code>&gt;</code></td><td><code>expr &gt; expr</code></td><td>大于比较</td><td><code>PartialOrd</code></td></tr><tr><td><code>&gt;=</code></td><td><code>expr &gt;= expr</code></td><td>大于等于比较</td><td><code>PartialOrd</code></td></tr><tr><td><code>&gt;&gt;</code></td><td><code>expr &gt;&gt; expr</code></td><td>右移</td><td><code>Shr</code></td></tr><tr><td><code>&gt;&gt;=</code></td><td><code>var &gt;&gt;= expr</code></td><td>右移与赋值</td><td><code>ShrAssign</code></td></tr><tr><td><code>@</code></td><td><code>ident @ pat</code></td><td>模式绑定</td><td></td></tr><tr><td><code>^</code></td><td><code>expr ^ expr</code></td><td>按位异或</td><td><code>BitXor</code></td></tr><tr><td><code>^=</code></td><td><code>var ^= expr</code></td><td>按位异或与赋值</td><td><code>BitXorAssign</code></td></tr><tr><td><code>|</code></td><td><code>pat | pat</code></td><td>模式匹配中的多个可选条件</td><td></td></tr><tr><td><code>|</code></td><td><code>expr | expr</code></td><td>按位或</td><td><code>BitOr</code></td></tr><tr><td><code>|=</code></td><td><code>var |= expr</code></td><td>按位或与赋值</td><td><code>BitOrAssign</code></td></tr><tr><td><code>||</code></td><td><code>expr || expr</code></td><td>逻辑或</td><td></td></tr><tr><td><code>?</code></td><td><code>expr?</code></td><td>错误传播</td><td></td></tr></tbody></table><h3 id="非运算符符号" tabindex="-1"><a class="header-anchor" href="#非运算符符号"><span>非运算符符号</span></a></h3><p><span class="caption">表 B-2：独立语法</span></p><table><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td><code>&#39;ident</code></td><td>生命周期名称或循环标签</td></tr><tr><td><code>...u8</code>, <code>...i32</code>, <code>...f64</code>, <code>...usize</code>, 等</td><td>指定类型的数值常量</td></tr><tr><td><code>&quot;...&quot;</code></td><td>字符串常量</td></tr><tr><td><code>r&quot;...&quot;</code>, <code>r#&quot;...&quot;#</code>, <code>r##&quot;...&quot;##</code>, etc.</td><td>原生字符串, 未转义字符</td></tr><tr><td><code>b&quot;...&quot;</code></td><td>将 <code>&amp;str</code> 转换成 <code>&amp;[u8; N]</code> 类型的数组</td></tr><tr><td><code>br&quot;...&quot;</code>, <code>br#&quot;...&quot;#</code>, <code>br##&quot;...&quot;##</code>, 等</td><td>原生字节字符串，原生和字节字符串字面值的结合</td></tr><tr><td><code>&#39;...&#39;</code></td><td>Char 字符</td></tr><tr><td><code>b&#39;...&#39;</code></td><td>ASCII 字节</td></tr><tr><td><code>|...| expr</code></td><td>闭包</td></tr><tr><td><code>!</code></td><td>代表总是空的类型，用于发散函数(无返回值函数)</td></tr><tr><td><code>_</code></td><td>模式绑定中表示忽略的意思；也用于增强整型字面值的可读性</td></tr></tbody></table><p>表 B-3 展示了模块和对象调用路径的语法。</p><p><span class="caption">表 B-3：路径相关语法</span></p><table><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td><code>ident::ident</code></td><td>命名空间路径</td></tr><tr><td><code>::path</code></td><td>从当前的包的根路径开始的相对路径</td></tr><tr><td><code>self::path</code></td><td>与当前模块相对的路径（如一个显式相对路径）</td></tr><tr><td><code>super::path</code></td><td>与父模块相对的路径</td></tr><tr><td><code>type::ident</code>, <code>&lt;type as trait&gt;::ident</code></td><td>关联常量、关联函数、关联类型</td></tr><tr><td><code>&lt;type&gt;::...</code></td><td>不可以被直接命名的关联项类型（如 <code>&lt;&amp;T&gt;::...</code>，<code>&lt;[T]&gt;::...</code>， 等）</td></tr><tr><td><code>trait::method(...)</code></td><td>使用特征名进行方法调用，以消除方法调用的二义性</td></tr><tr><td><code>type::method(...)</code></td><td>使用类型名进行方法调用, 以消除方法调用的二义性</td></tr><tr><td><code>&lt;type as trait&gt;::method(...)</code></td><td>将类型转换为特征，再进行方法调用,以消除方法调用的二义性</td></tr></tbody></table><p>表 B-4 展示了使用泛型参数时用到的符号。</p><p><span class="caption">表 B-4：泛型</span></p><table><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td><code>path&lt;...&gt;</code></td><td>为一个类型中的泛型指定具体参数（如 <code>Vec&lt;u8&gt;</code>）</td></tr><tr><td><code>path::&lt;...&gt;</code>, <code>method::&lt;...&gt;</code></td><td>为一个泛型、函数或表达式中的方法指定具体参数，通常指双冒号(turbofish)（如 <code>&quot;42&quot;.parse::&lt;i32&gt;()</code>）</td></tr><tr><td><code>fn ident&lt;...&gt; ...</code></td><td>泛型函数定义</td></tr><tr><td><code>struct ident&lt;...&gt; ...</code></td><td>泛型结构体定义</td></tr><tr><td><code>enum ident&lt;...&gt; ...</code></td><td>泛型枚举定义</td></tr><tr><td><code>impl&lt;...&gt; ...</code></td><td>实现泛型</td></tr><tr><td><code>for&lt;...&gt; type</code></td><td>高阶生命周期限制</td></tr><tr><td><code>type&lt;ident=type&gt;</code></td><td>泛型，其一个或多个相关类型必须被指定为特定类型（如 <code>Iterator&lt;Item=T&gt;</code>）</td></tr></tbody></table><p>表 B-5 展示了使用特征约束来限制泛型参数的符号。</p><p><span class="caption">表 B-5：特征约束</span></p><table><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td><code>T: U</code></td><td>泛型参数 <code>T</code>需实现<code>U</code>类型</td></tr><tr><td><code>T: &#39;a</code></td><td>泛型 <code>T</code> 的生命周期必须长于 <code>&#39;a</code>（意味着该类型不能传递包含生命周期短于 <code>&#39;a</code> 的任何引用）</td></tr><tr><td><code>T : &#39;static</code></td><td>泛型 T 只能使用声明周期为&#39;static 的引用</td></tr><tr><td><code>&#39;b: &#39;a</code></td><td>生命周期<code>&#39;b</code>必须长于生命周期<code>&#39;a</code></td></tr><tr><td><code>T: ?Sized</code></td><td>使用一个不定大小的泛型类型</td></tr><tr><td><code>&#39;a + trait</code>, <code>trait + trait</code></td><td>多个类型组成的复合类型限制</td></tr></tbody></table><p>表 B-6 展示了宏以及在一个对象上定义属性的符号。</p><p><span class="caption">表 B-6：宏与属性</span></p><table><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td><code>#[meta]</code></td><td>外部属性</td></tr><tr><td><code>#![meta]</code></td><td>内部属性</td></tr><tr><td><code>$ident</code></td><td>宏替换</td></tr><tr><td><code>$ident:kind</code></td><td>宏捕获</td></tr><tr><td><code>$(…)…</code></td><td>宏重复</td></tr><tr><td><code>ident!(...)</code>, <code>ident!{...}</code>, <code>ident![...]</code></td><td>宏调用</td></tr></tbody></table><p>表 B-7 展示了写注释的符号。</p><p><span class="caption">表 B-7：注释</span></p><table><thead><tr><th>符号</th><th>注释</th></tr></thead><tbody><tr><td><code>//</code></td><td>行注释</td></tr><tr><td><code>//!</code></td><td>内部行(hang)文档注释</td></tr><tr><td><code>///</code></td><td>外部行文档注释</td></tr><tr><td><code>/*...*/</code></td><td>块注释</td></tr><tr><td><code>/*!...*/</code></td><td>内部块文档注释</td></tr><tr><td><code>/**...*/</code></td><td>外部块文档注释</td></tr></tbody></table><p>表 B-8 展示了出现在使用元组时的符号。</p><p><span class="caption">表 B-8：元组</span></p><table><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td><code>()</code></td><td>空元组（亦称单元），即是字面值也是类型</td></tr><tr><td><code>(expr)</code></td><td>括号表达式</td></tr><tr><td><code>(expr,)</code></td><td>单一元素元组表达式</td></tr><tr><td><code>(type,)</code></td><td>单一元素元组类型</td></tr><tr><td><code>(expr, ...)</code></td><td>元组表达式</td></tr><tr><td><code>(type, ...)</code></td><td>元组类型</td></tr><tr><td><code>expr(expr, ...)</code></td><td>函数调用表达式；也用于初始化元组结构体 <code>struct</code> 以及元组枚举 <code>enum</code> 变体</td></tr><tr><td><code>expr.0</code>, <code>expr.1</code>, etc.</td><td>元组索引</td></tr></tbody></table><p>表 B-9 展示了使用大括号的上下文。</p><p><span class="caption">表 B-9：大括号</span></p><table><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td><code>{...}</code></td><td>代码块表达式</td></tr><tr><td><code>Type {...}</code></td><td>结构体字面值</td></tr></tbody></table><p>表 B-10 展示了使用方括号的上下文。</p><p><span class="caption">表 B-10：方括号</span></p><table><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td><code>[...]</code></td><td>数组</td></tr><tr><td><code>[expr; len]</code></td><td>数组里包含<code>len</code>个<code>expr</code></td></tr><tr><td><code>[type; len]</code></td><td>数组里包含了<code>len</code>个<code>type</code>类型的对象</td></tr><tr><td><code>expr[expr]</code></td><td>集合索引。 重载（<code>Index</code>, <code>IndexMut</code>）</td></tr><tr><td><code>expr[..]</code>, <code>expr[a..]</code>, <code>expr[..b]</code>, <code>expr[a..b]</code></td><td>集合索引，也称为集合切片，索引要实现以下特征中的其中一个：<code>Range</code>，<code>RangeFrom</code>，<code>RangeTo</code> 或 <code>RangeFull</code></td></tr></tbody></table>',34)]))}const i=d(r,[["render",p],["__file","operators.html.vue"]]),s=JSON.parse('{"path":"/src/appendix/operators.html","title":"operators","lang":"zh-CN","frontmatter":{"description":"附录 B：运算符与符号 该附录包含了 Rust 目前出现过的各种符号，这些符号之前都分散在各个章节中。 运算符 表 B-1 包含了 Rust 中的运算符、上下文中的示例、简短解释以及该运算符是否可重载。如果一个运算符是可重载的，则该运算符上用于重载的特征也会列出。 下表中，expr 是表达式，ident 是标识符，type 是类型，var 是变量，tr...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/src/appendix/operators.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:description","content":"附录 B：运算符与符号 该附录包含了 Rust 目前出现过的各种符号，这些符号之前都分散在各个章节中。 运算符 表 B-1 包含了 Rust 中的运算符、上下文中的示例、简短解释以及该运算符是否可重载。如果一个运算符是可重载的，则该运算符上用于重载的特征也会列出。 下表中，expr 是表达式，ident 是标识符，type 是类型，var 是变量，tr..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-20T14:07:43.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-20T14:07:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-20T14:07:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{"createdTime":1745158063000,"updatedTime":1745158063000,"contributors":[{"name":"Linc","username":"Linc","email":"762699299@qq.com","commits":1,"url":"https://github.com/Linc"}]},"readingTime":{"minutes":5.94,"words":1781},"filePathRelative":"src/appendix/operators.md","localizedDate":"2025年4月20日","excerpt":"<h2>附录 B：运算符与符号</h2>\\n<p>该附录包含了 Rust 目前出现过的各种符号，这些符号之前都分散在各个章节中。</p>\\n<h3>运算符</h3>\\n<p>表 B-1 包含了 Rust 中的运算符、上下文中的示例、简短解释以及该运算符是否可重载。如果一个运算符是可重载的，则该运算符上用于重载的特征也会列出。</p>\\n<p>下表中，<code>expr</code> 是表达式，<code>ident</code> 是标识符，<code>type</code> 是类型，<code>var</code> 是变量，<code>trait</code> 是特征，<code>pat</code> 是匹配分支(pattern)。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"src/SUMMARY.html"}],"localMap":{"nodes":[{"id":"src/appendix/operators.md","value":{"title":"operators","path":"src/appendix/operators.md","outlink":[],"backlink":["src/SUMMARY.md"]}},{"id":"src/SUMMARY.md","value":{"title":"SUMMARY","path":"src/SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"src/SUMMARY.md","target":"src/appendix/operators.md"}]}}}');export{i as comp,s as data};
