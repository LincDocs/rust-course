import{_ as e,e as o,k as r,o as n}from"./app-D8-td6D_.js";const a={};function s(i,t){return n(),o("div",null,t[0]||(t[0]=[r('<h1 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h1><blockquote><p>测试可以有效的发现程序存在的缺陷，但是它却无法证明程序不存在缺陷 - Edsger W. Dijkstra, &quot;The Humble Programmer&quot;</p></blockquote><p>对于程序开发而言，测试可以说是至关重要的一环，虽然它无法完全消除所有的 Bug，但是依然可以在某种程度上保证程序的正确性。</p><p>Rust 语言本身就非常关注安全性，但是语言级别的安全性并不能保证代码逻辑上的正确性，因为后者其实是一个相当复杂的问题。也许 Rust 的类型系统可以提供一些帮助，但是依然远远不够。</p><p>例如，假设我们有一个函数 <code>add_two</code> 用于将两个整数进行相加并返回一个整数结果。没错，Rust 的类型系统可以通过函数签名确保我们的输入和输出类型都是正确的，譬如你无法传入一个字符串作为输入，但是 Rust 无法保证函数中代码逻辑的正确性：明明目标是相加操作，却给整成了 <code>x - y</code>。</p><p>好在，写测试可以解决类似的问题。但也不要迷信测试，文章开头的那句话说明一切。</p>',6)]))}const p=e(a,[["render",s],["__file","intro.html.vue"]]),l=JSON.parse('{"path":"/test/intro.html","title":"测试","lang":"zh-CN","frontmatter":{"description":"测试 测试可以有效的发现程序存在的缺陷，但是它却无法证明程序不存在缺陷 - Edsger W. Dijkstra, \\"The Humble Programmer\\" 对于程序开发而言，测试可以说是至关重要的一环，虽然它无法完全消除所有的 Bug，但是依然可以在某种程度上保证程序的正确性。 Rust 语言本身就非常关注安全性，但是语言级别的安全性并不能保证...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/test/intro.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"测试"}],["meta",{"property":"og:description","content":"测试 测试可以有效的发现程序存在的缺陷，但是它却无法证明程序不存在缺陷 - Edsger W. Dijkstra, \\"The Humble Programmer\\" 对于程序开发而言，测试可以说是至关重要的一环，虽然它无法完全消除所有的 Bug，但是依然可以在某种程度上保证程序的正确性。 Rust 语言本身就非常关注安全性，但是语言级别的安全性并不能保证..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"测试\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.06,"words":319},"filePathRelative":"test/intro.md","excerpt":"\\n<blockquote>\\n<p>测试可以有效的发现程序存在的缺陷，但是它却无法证明程序不存在缺陷 - Edsger W. Dijkstra, \\"The Humble Programmer\\"</p>\\n</blockquote>\\n<p>对于程序开发而言，测试可以说是至关重要的一环，虽然它无法完全消除所有的 Bug，但是依然可以在某种程度上保证程序的正确性。</p>\\n<p>Rust 语言本身就非常关注安全性，但是语言级别的安全性并不能保证代码逻辑上的正确性，因为后者其实是一个相当复杂的问题。也许 Rust 的类型系统可以提供一些帮助，但是依然远远不够。</p>\\n<p>例如，假设我们有一个函数 <code>add_two</code> 用于将两个整数进行相加并返回一个整数结果。没错，Rust 的类型系统可以通过函数签名确保我们的输入和输出类型都是正确的，譬如你无法传入一个字符串作为输入，但是 Rust 无法保证函数中代码逻辑的正确性：明明目标是相加操作，却给整成了 <code>x - y</code>。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"test/intro.md","value":{"title":"intro","path":"test/intro.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"test/intro.md"}]}}}');export{p as comp,l as data};
