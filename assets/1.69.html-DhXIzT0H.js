import{_ as i,e as a,k as e,o as n}from"./app-DEcddxss.js";const t={};function l(r,s){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="rust-新版解读-1-69-cargo-fix" tabindex="-1"><a class="header-anchor" href="#rust-新版解读-1-69-cargo-fix"><span>Rust 新版解读 | 1.69 | cargo fix</span></a></h1><blockquote><p>Rust 1.69 官方 release doc: <a href="https://blog.rust-lang.org/2023/04/20/Rust-1.69.0.html" target="_blank" rel="noopener noreferrer">Announcing Rust 1.69.0 | Rust Blog</a></p></blockquote><p>通过 <a href="https://www.rust-lang.org/tools/install" target="_blank" rel="noopener noreferrer">rustup</a> 安装的同学可以使用以下命令升级到 1.69 版本:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rustup</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stable</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="cargo-提供自动修复建议" tabindex="-1"><a class="header-anchor" href="#cargo-提供自动修复建议"><span>Cargo 提供自动修复建议</span></a></h2><p>在 Rust 1.29.0 版本添加的 <code>cargo fix</code> 子命令，能够自动修复一些简单的编译错误。从那以后，能够自动修复的错误/警告原因的数量一直在稳步增加。此外，还增加了对自动修复一些简单的 Clippy 警告的支持。</p><p>为了让更多人注意到这些能力，现在当检测到可自动修复的错误时，Cargo 会建议运行 <code>cargo fix</code> 或 <code>cargo clippy --fix</code> 命令：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">warning:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> unused</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> import:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">std::hash::Hash</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> --</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">src/main.rs:1:5</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  |</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">use</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> std::hash::Hash</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  |     </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">^^^^^^^^^^^^^^^</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  |</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> note:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \`</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#[warn(unused_imports)]</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> on</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> by</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> default</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">warning:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">foo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bin</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;foo&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">generated</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> warning</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (run </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fix </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">--bin</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;foo&quot;\`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apply</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> suggestion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的完整命令（即包含 <code>--bin foo</code>）仅在你想要精确修复一个单独的 crate 时需要附上。默认执行 workspace 下所有 fixs 只需要 <code>cargo fix</code> 。</p><h2 id="构建脚本默认不再包含调试信息" tabindex="-1"><a class="header-anchor" href="#构建脚本默认不再包含调试信息"><span>构建脚本默认不再包含调试信息</span></a></h2><p>为了提高编译速度，Cargo 现在默认避免在构建脚本中发出调试信息。构建脚本成功执行时不会有可见的效果，但构建脚本中的回溯（backtraces）将包含更少的信息。</p><p>所以如果想要 debug 构建脚本，需要额外开启调试信息，在 <code>Cargo.toml</code> 文件里添加</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[profile.dev.build-override]</span></span>
<span class="line"><span>debug = true</span></span>
<span class="line"><span>[profile.release.build-override]</span></span>
<span class="line"><span>debug = true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="others" tabindex="-1"><a class="header-anchor" href="#others"><span>Others</span></a></h2><p>其它更新细节，和稳定的API列表，参考<a href="https://blog.rust-lang.org/2023/04/20/Rust-1.69.0.html#stabilized-apis" target="_blank" rel="noopener noreferrer">原Blog</a></p>`,15)]))}const p=i(t,[["render",l],["__file","1.69.html.vue"]]),k=JSON.parse('{"path":"/appendix/rust-versions/1.69.html","title":"Rust 新版解读 | 1.69 | cargo fix","lang":"zh-CN","frontmatter":{"description":"Rust 新版解读 | 1.69 | cargo fix Rust 1.69 官方 release doc: Announcing Rust 1.69.0 | Rust Blog 通过 rustup 安装的同学可以使用以下命令升级到 1.69 版本: Cargo 提供自动修复建议 在 Rust 1.29.0 版本添加的 cargo fix 子命令，能够...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/appendix/rust-versions/1.69.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"Rust 新版解读 | 1.69 | cargo fix"}],["meta",{"property":"og:description","content":"Rust 新版解读 | 1.69 | cargo fix Rust 1.69 官方 release doc: Announcing Rust 1.69.0 | Rust Blog 通过 rustup 安装的同学可以使用以下命令升级到 1.69 版本: Cargo 提供自动修复建议 在 Rust 1.29.0 版本添加的 cargo fix 子命令，能够..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust 新版解读 | 1.69 | cargo fix\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.34,"words":403},"filePathRelative":"appendix/rust-versions/1.69.md","excerpt":"\\n<blockquote>\\n<p>Rust 1.69 官方 release doc: <a href=\\"https://blog.rust-lang.org/2023/04/20/Rust-1.69.0.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Announcing Rust 1.69.0 | Rust Blog</a></p>\\n</blockquote>\\n<p>通过 <a href=\\"https://www.rust-lang.org/tools/install\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">rustup</a> 安装的同学可以使用以下命令升级到 1.69 版本:</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"SUMMARY","link":"SUMMARY.html"}],"localMap":{"nodes":[{"id":"appendix/rust-versions/1.69.md","value":{"title":"1.69","path":"appendix/rust-versions/1.69.md","outlink":[],"backlink":["SUMMARY.md"]}},{"id":"SUMMARY.md","value":{"title":"SUMMARY","path":"SUMMARY.md","outlink":[],"backlink":[]}}],"links":[{"source":"SUMMARY.md","target":"appendix/rust-versions/1.69.md"}]}}}');export{p as comp,k as data};
