import{_ as t,e as r,f as o,o as n}from"./app-BSEs7fAb.js";const a={};function s(p,e){return n(),r("div",null,e[0]||(e[0]=[o('<h1 id="「rust-语言周刊」-第-17-期-·-2022-07-15" tabindex="-1"><a class="header-anchor" href="#「rust-语言周刊」-第-17-期-·-2022-07-15"><span>「Rust 语言周刊」 第 17 期 · 2022-07-15</span></a></h1><p>Rust语言周刊精选全世界过去一周(或者几周)的优秀文章、新闻、开源项目和语言动态。</p><p>本周刊由 RustCn 倾情打造，其中， <code>[Zh]</code> 标识的中文资料由 Rust 翻译计划提供，并且原始的 Markdown 文档已<a href="https://github.com/rustlang-cn/rustt" target="_blank" rel="noopener noreferrer">全部开源</a>，欢迎大家阅读和订阅。</p><blockquote><p>RustCn：https://hirust.cn, 公众号: Rust语言中文网</p></blockquote><img src="https://pica.zhimg.com/80/v2-2826dfca738cdc1795e77d12eb269906_1440w.png"><h5 align="center">题图: Tauri 发布 1.0 版本</h5><h2 id="官方新闻" tabindex="-1"><a class="header-anchor" href="#官方新闻"><span>官方新闻</span></a></h2><p>1、[Zh] <a href="https://course.rs/appendix/rust-versions/1.62.html" target="_blank" rel="noopener noreferrer">Rust 发布 1.62 版本</a></p><p>如果大家期待 Rust 像其它语言一样，每一个新版本都带来大量新特性，那你们可要失望了，1.62 的更新内容相当少，甚至不如某些语言一个 minor 版本的更新力度，但<strong>错不在 Rust</strong>，建议大家了解下 Rust 的<a href="https://course.rs/appendix/rust-version.html" target="_blank" rel="noopener noreferrer">版本发布流程</a>，就明白其中的弯弯绕绕了。</p><h2 id="开源项目" tabindex="-1"><a class="header-anchor" href="#开源项目"><span>开源项目</span></a></h2><p>1、<a href="https://github.com/LearningOS/rust-based-os-comp2022" target="_blank" rel="noopener noreferrer">基于 Rust 的操作系统训练营</a></p><p>该训练营有一个配套教程，将带大家从零开始使用 Rust 编写 RISC-V 架构的 类 Unix 内核 。</p><p>我自己也做开源，深知这件事会占用多少的时间和精力，甚至还会遭人非议，而我仅仅是写写书，跟作者这种大佬一比，差距就太大了... Respect!</p><p>2、<a href="https://tauri.app/blog/tauri_1_0/" target="_blank" rel="noopener noreferrer">Tauri 发布 1.0 版本</a></p><p>虽然 Tauri 很有名，但是为防有同学不知道背景，还是简单介绍下：它是一款跨平台的桌面应用开发框架，虽然内核是使用 Rust 开发，但是开发者可以使用自己喜欢的前端框架( <code>react</code>, <code>vue</code>, <code>vite</code> )来构建自己的用户界面，最终编译生成一个可执行的二进制文件，方便在各个不同的操作系统间分发运行。总之，你可以将 Tauri 当作是理念更先进的 Electron.js 。</p><p>言归正传，在历经 1 年多的时间后，Tauri 终于发布了 1.0 版本，这也标志着它已经可以在生产环境正式使用，并且目前来看，官方文档还算可以，甚至还提供了<a href="https://tauri.app/zh/v1/guides/getting-started/prerequisites" target="_blank" rel="noopener noreferrer">中文文档</a>，除此之外，我还发现了一个<a href="https://zhuanlan.zhihu.com/p/539708101" target="_blank" rel="noopener noreferrer">宝藏教学系列</a>，值得一读。</p><p>3、<a href="https://lettre.rs/post/lettre-0-10/" target="_blank" rel="noopener noreferrer">lettre 发布 0.1.0 版本</a></p><p><code>lettre</code> 是一个现代化的邮件发送库，它简单易用、安全可靠，但是需要注意，它的目标<strong>不是支持所有的邮件 RFC 标准</strong>，因此在你有特殊需求时，可能会需要自己动手，丰衣足食。</p><p>该库目前已被多个项目使用，包括大名鼎鼎的 <code>crates.io</code>。</p><p>4、<a href="https://github.com/cloudflare/workers-rs" target="_blank" rel="noopener noreferrer">workers-rs: 使用 Rust + WebAssembly 实现 Cloudflare 的 Workers</a></p><p>Cloudflare 已经成为全世界最大的 DNS 服务商，而且它的业务不仅仅是 DNS，目前云计算方面也进行的如火如荼。CF 最大的优势不仅仅在于 DNS 的快速和稳定，还在于它提供了多种方式来扩展你的 DNS 使用，例如你可以使用 Rust 来变成它的 worker。</p><p>为了便于有需要的同学进一步学习该如何使用，这里还有一篇<a href="https://logankeenan.com/posts/running-a-rust-server-in-a-cloudflare-worker/" target="_blank" rel="noopener noreferrer">实战文章</a>，值得一看。</p><h2 id="精选文章" tabindex="-1"><a class="header-anchor" href="#精选文章"><span>精选文章</span></a></h2><p>1、<a href="https://blog.jetbrains.com/rust/2022/07/07/procedural-macros-under-the-hood-part-ii/" target="_blank" rel="noopener noreferrer">过程宏揭秘 II</a></p><p>想要了解过程宏是如何编译、怎么跟 IDE 互动的吗？来看看这个系列的文章，作者来自 Intellij Rust 插件开发组，之前还给 RustCon 分享过，干货满满。</p><p>本文是系列文章中的第二篇，第一篇见<a href="https://blog.jetbrains.com/rust/2022/03/18/procedural-macros-under-the-hood-part-i/" target="_blank" rel="noopener noreferrer">这里</a>。</p><p>2、[youtube][有字幕] <a href="https://www.youtube.com/watch?v=N0XMjokwTIM" target="_blank" rel="noopener noreferrer">AWS 在构建 Rust SDK 方面的实践</a></p><p>如果没有亚马逊这几年对 Rust 的大力(肆)支(鼓)持(吹)，Rust 也不会走到今天这个地步。出于敬意，放上这个视频，事实上，里面更多的是对自己产品的宣传 = ， = 特别是第一部分，大家可以跳着看，一些关于底层的讲解还是值得一看的。</p><p>3、[Zh] <a href="https://www.oschina.net/news/202630/gcc-rust-approved-by-gcc-steering-committee" target="_blank" rel="noopener noreferrer">在 GCC 13 中，大家可能将看到 Rust 的身影</a></p><p>目前来说，Rust 的编译器实现是基于 LLVM 的，而我们可能很快将看到基于 GCC 的实现，与 LLVM 不同，新的编译器将能获得 GCC 内部优化通道的所有访问权，同时带来更多的目标平台的支持，以及享受 GCC 众多的插件生态。</p><p>该项目已经历时多年(从 Rust 0.9 版本开始)，我一度怀疑可能永远都无法看到它的身影，没想到现在突然官宣了，但是项目依然还处于早期阶段，当前的目标是在 GCC 13 中提供测试级别的支持。</p><p>再加上 Rust 即将在 Linux 5.20 中出现，可以预料， Rust 的未来将更加美好，大家一起期待吧！</p><p>4、<a href="https://www.tangramvision.com/blog/c-rust-interior-mutability-moving-and-ownership" target="_blank" rel="noopener noreferrer">C++ 大战 Rust 系列：可变性和所有权</a></p><p>虽然 Rust 将所有权发扬光大，但是咱不能说 Rust 发明了所有权，毕竟众所周知：Rust 语言是借鉴大师 😛</p><p>在这篇文章中，作者将介绍 C++ 和 Rust 在实现所有权、可变性方面的不同设计哲学，以及标准库、编译器层面的支持。</p><p>5、<a href="https://www.shuttle.rs/blog/2022/06/30/error-handling" target="_blank" rel="noopener noreferrer">Rust 错误介绍，比你想要的更多</a></p><p>文章不错，标题也不错！ 虽然你想要的错误处理几乎都可以在 <code>https://course.rs</code> 上找到，但是这篇文章依然值得一看。</p><p>6、[Youtube][有字幕] <a href="https://www.youtube.com/watch?v=pMiqRM5ooNw" target="_blank" rel="noopener noreferrer">为何你的 Rust 编译这么慢？</a></p><p>视频质量自然非常高，从各个方面介绍了该如何提升 Rust 的编译速度，干货满满，强烈推荐。</p><p>但...我的天，我真的佩服作者，就以 Rust 周刊举例吧，每次周刊基本都要花费我几个小时，那一个将近 3 个小时的干货视频，要准备多久？简直是卷王在世 😃</p><p>甚至有人评论到：这个是一个 AMSR 视频...</p><p>7、<a href="https://haibane-tenshi.github.io/rust-reborrowing/" target="_blank" rel="noopener noreferrer">Rust中的再借用</a></p><p>大家都知道 Rust 中的生命周期很难，那你们谈谈对借用的印象，难吗？我猜，大多数人会说不难。其实不然，Rust 中的借用并不仅仅是书上介绍的那些，例如<strong>再借用(reborrowing)</strong>，你听说过吗？</p><p>8、<a href="https://blog.polybdenum.com/2022/06/25/an-unfortunate-experience-with-rust.html" target="_blank" rel="noopener noreferrer">我很强，但 Rust 更强</a></p><p>作者说他对于 Rust 极其有经验，但是就算这样的高手，依然避免不了被 Rust 所教育，你问怎么个教育法？当然是跟编译器搏斗咯。</p><p>其实，从我个人而言，非常推荐大家看看这类文章，那些关于 Rust 如何成功的营销文，爽则爽矣，对于技术却无多大帮助。而这种错误实践类的文章，却能帮助我们少走很多弯路！</p>',46)]))}const c=t(a,[["render",s],["__file","rust-weekly.html.vue"]]),i=JSON.parse('{"path":"/src/rust-weekly.html","title":"「Rust 语言周刊」 第 17 期 · 2022-07-15","lang":"zh-CN","frontmatter":{"description":"「Rust 语言周刊」 第 17 期 · 2022-07-15 Rust语言周刊精选全世界过去一周(或者几周)的优秀文章、新闻、开源项目和语言动态。 本周刊由 RustCn 倾情打造，其中， [Zh] 标识的中文资料由 Rust 翻译计划提供，并且原始的 Markdown 文档已全部开源，欢迎大家阅读和订阅。 RustCn：https://hirust...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/src/rust-weekly.html"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"「Rust 语言周刊」 第 17 期 · 2022-07-15"}],["meta",{"property":"og:description","content":"「Rust 语言周刊」 第 17 期 · 2022-07-15 Rust语言周刊精选全世界过去一周(或者几周)的优秀文章、新闻、开源项目和语言动态。 本周刊由 RustCn 倾情打造，其中， [Zh] 标识的中文资料由 Rust 翻译计划提供，并且原始的 Markdown 文档已全部开源，欢迎大家阅读和订阅。 RustCn：https://hirust..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-20T14:07:43.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-20T14:07:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"「Rust 语言周刊」 第 17 期 · 2022-07-15\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-20T14:07:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{"createdTime":1745158063000,"updatedTime":1745158063000,"contributors":[{"name":"Linc","username":"Linc","email":"762699299@qq.com","commits":1,"url":"https://github.com/Linc"}]},"readingTime":{"minutes":5.88,"words":1764},"filePathRelative":"src/rust-weekly.md","localizedDate":"2025年4月20日","excerpt":"\\n<p>Rust语言周刊精选全世界过去一周(或者几周)的优秀文章、新闻、开源项目和语言动态。</p>\\n<p>本周刊由 RustCn 倾情打造，其中， <code>[Zh]</code> 标识的中文资料由 Rust 翻译计划提供，并且原始的 Markdown 文档已<a href=\\"https://github.com/rustlang-cn/rustt\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">全部开源</a>，欢迎大家阅读和订阅。</p>\\n<blockquote>\\n<p>RustCn：https://hirust.cn, 公众号: Rust语言中文网</p>\\n</blockquote>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"src/rust-weekly.md","value":{"title":"rust-weekly","path":"src/rust-weekly.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{c as comp,i as data};
