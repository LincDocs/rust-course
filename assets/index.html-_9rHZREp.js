import{_ as t,e as o,f as r,o as s}from"./app-DFfX2bp8.js";const n={};function i(a,e){return s(),o("div",null,e[0]||(e[0]=[r('<h1 id="type-conversions" tabindex="-1"><a class="header-anchor" href="#type-conversions"><span>Type conversions</span></a></h1><p>Rust offers a multitude of ways to convert a value of a given type into another type.</p><p>The simplest form of type conversion is a type cast expression. It is denoted with the binary operator <code>as</code>. For instance, <code>println!(&quot;{}&quot;, 1 + 1.0);</code> would not compile, since <code>1</code> is an integer while <code>1.0</code> is a float. However, <code>println!(&quot;{}&quot;, 1 as f32 + 1.0)</code> should compile. The exercise <a href="using_as.rs"><code>using_as</code></a> tries to cover this.</p><p>Rust also offers traits that facilitate type conversions upon implementation. These traits can be found under the <a href="https://doc.rust-lang.org/std/convert/index.html" target="_blank" rel="noopener noreferrer"><code>convert</code></a> module.<br> The traits are the following:</p><ul><li><code>From</code> and <code>Into</code> covered in <a href="from_into.rs"><code>from_into</code></a></li><li><code>TryFrom</code> and <code>TryInto</code> covered in <a href="try_from_into.rs"><code>try_from_into</code></a></li><li><code>AsRef</code> and <code>AsMut</code> covered in <a href="as_ref_mut.rs"><code>as_ref_mut</code></a></li></ul><p>Furthermore, the <code>std::str</code> module offers a trait called <a href="https://doc.rust-lang.org/std/str/trait.FromStr.html" target="_blank" rel="noopener noreferrer"><code>FromStr</code></a> which helps with converting strings into target types via the <code>parse</code> method on strings. If properly implemented for a given type <code>Person</code>, then <code>let p: Person = &quot;Mark,20&quot;.parse().unwrap()</code> should both compile and run without panicking.</p><p>These should be the main ways <em><strong>within the standard library</strong></em> to convert data into your desired types.</p><h2 id="further-information" tabindex="-1"><a class="header-anchor" href="#further-information"><span>Further information</span></a></h2><p>These are not directly covered in the book, but the standard library has a great documentation for it.</p><ul><li><a href="https://doc.rust-lang.org/std/convert/index.html" target="_blank" rel="noopener noreferrer">conversions</a></li><li><a href="https://doc.rust-lang.org/std/str/trait.FromStr.html" target="_blank" rel="noopener noreferrer"><code>FromStr</code> trait</a></li></ul>',10)]))}const d=t(n,[["render",i],["__file","index.html.vue"]]),p=JSON.parse('{"path":"/assets/rustlings-zh/exercises/conversions/","title":"Type conversions","lang":"zh-CN","frontmatter":{"description":"Type conversions Rust offers a multitude of ways to convert a value of a given type into another type. The simplest form of type conversion is a type cast expression. It is deno...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/assets/rustlings-zh/exercises/conversions/"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"Type conversions"}],["meta",{"property":"og:description","content":"Type conversions Rust offers a multitude of ways to convert a value of a given type into another type. The simplest form of type conversion is a type cast expression. It is deno..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-24T15:57:50.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-24T15:57:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Type conversions\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-24T15:57:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{"createdTime":1745510270000,"updatedTime":1745510270000,"contributors":[{"name":"Linc","username":"Linc","email":"762699299@qq.com","commits":1,"url":"https://github.com/Linc"}]},"readingTime":{"minutes":0.72,"words":217},"filePathRelative":"assets/rustlings-zh/exercises/conversions/README.md","localizedDate":"2025年4月24日","excerpt":"\\n<p>Rust offers a multitude of ways to convert a value of a given type into another type.</p>\\n<p>The simplest form of type conversion is a type cast expression. It is denoted with the binary operator <code>as</code>. For instance, <code>println!(\\"{}\\", 1 + 1.0);</code> would not compile, since <code>1</code> is an integer while <code>1.0</code> is a float. However, <code>println!(\\"{}\\", 1 as f32 + 1.0)</code> should compile. The exercise <a href=\\"using_as.rs\\"><code>using_as</code></a> tries to cover this.</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"assets/rustlings-zh/exercises/conversions/README.md","value":{"title":"exercises/","path":"assets/rustlings-zh/exercises/conversions/README.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{d as comp,p as data};
