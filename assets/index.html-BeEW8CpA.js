import{_ as e,e as r,f as i,o}from"./app-BSEs7fAb.js";const a={};function s(c,t){return o(),r("div",null,t[0]||(t[0]=[i('<h1 id="traits" tabindex="-1"><a class="header-anchor" href="#traits"><span>Traits</span></a></h1><p>Trait 是一系列方法的集合。</p><p>数据类型可以实现 trait。为此需要帮数据类型定义好构成 trait 的方法。<br> 例如，<code>String</code> 类型实现了 <code>From&lt;&amp;str&gt;</code> trait。它赋予我们能力写出 <code>String::from(&quot;hello&quot;)</code>。</p><p>如此一来，trait 就有点类似于 Java 的接口和 C++ 的抽象类。</p><p>另外一些常见的 Rust trait 包括：</p><ul><li><code>Clone</code> （<code>clone</code> 方法）</li><li><code>Display</code> (实现通过 <code>{}</code> 进行格式化显示)</li><li><code>Debug</code> (实现通过 <code>{:?}</code> 进行格式化显示 )</li></ul><p>因为 trait 标明了数据类型之间的共有行为，所以它在编写泛型时非常有用。</p><h2 id="更多信息" tabindex="-1"><a class="header-anchor" href="#更多信息"><span>更多信息</span></a></h2><ul><li><a href="https://doc.rust-lang.org/book/ch10-02-traits.html" target="_blank" rel="noopener noreferrer">Traits</a></li></ul>',9)]))}const l=e(a,[["render",s],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/assets/rustlings-zh/exercises/traits/","title":"Traits","lang":"zh-CN","frontmatter":{"description":"Traits Trait 是一系列方法的集合。 数据类型可以实现 trait。为此需要帮数据类型定义好构成 trait 的方法。 例如，String 类型实现了 From<&str> trait。它赋予我们能力写出 String::from(\\"hello\\")。 如此一来，trait 就有点类似于 Java 的接口和 C++ 的抽象类。 另外一些常见的 ...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/rust-course/assets/rustlings-zh/exercises/traits/"}],["meta",{"property":"og:site_name","content":"rust-course"}],["meta",{"property":"og:title","content":"Traits"}],["meta",{"property":"og:description","content":"Traits Trait 是一系列方法的集合。 数据类型可以实现 trait。为此需要帮数据类型定义好构成 trait 的方法。 例如，String 类型实现了 From<&str> trait。它赋予我们能力写出 String::from(\\"hello\\")。 如此一来，trait 就有点类似于 Java 的接口和 C++ 的抽象类。 另外一些常见的 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-20T14:07:43.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-20T14:07:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Traits\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-20T14:07:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/rust-course/\\"}]}"]]},"git":{"createdTime":1745158063000,"updatedTime":1745158063000,"contributors":[{"name":"Linc","username":"Linc","email":"762699299@qq.com","commits":1,"url":"https://github.com/Linc"}]},"readingTime":{"minutes":0.54,"words":161},"filePathRelative":"assets/rustlings-zh/exercises/traits/README.md","localizedDate":"2025年4月20日","excerpt":"\\n<p>Trait 是一系列方法的集合。</p>\\n<p>数据类型可以实现 trait。为此需要帮数据类型定义好构成 trait 的方法。<br>\\n例如，<code>String</code> 类型实现了 <code>From&lt;&amp;str&gt;</code> trait。它赋予我们能力写出 <code>String::from(\\"hello\\")</code>。</p>\\n<p>如此一来，trait 就有点类似于 Java 的接口和 C++ 的抽象类。</p>\\n<p>另外一些常见的 Rust trait 包括：</p>\\n<ul>\\n<li><code>Clone</code> （<code>clone</code> 方法）</li>\\n<li><code>Display</code> (实现通过 <code>{}</code> 进行格式化显示)</li>\\n<li><code>Debug</code> (实现通过 <code>{:?}</code> 进行格式化显示 )</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"assets/rustlings-zh/exercises/traits/README.md","value":{"title":"exercises/","path":"assets/rustlings-zh/exercises/traits/README.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{l as comp,d as data};
